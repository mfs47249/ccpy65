from storetokens import storetokens, objects
from codeemitter import codeemitter, funcdef
from cclogger import cclogger

import sys

#
#  Memory-Configuration Ben Eaters Breadboardcomputer
#
#  0000 - RAM - 4K
#  1000 - RAM - 4K
#  2000 - RAM - 4K
#  3000 - RAM - 4K
#  4000 - ???
#  5000 - ???
#  6000 - IO-BASESADDRESS
#  7000 - IO-REPEATING
#  8000 - EEPROM - 32K
#  9000 - EEPROM
#  A000 - EEPROM
#  B000 - EEPROM
#  C000 - EEPROM
#  D000 - EEPROM
#  E000 - EEPROM
#  F000 - EEPROM
#
class initasm:
    zeropagestart = 0x0000
    programstart = 0x0200

    def __init__(self, logger, emit, stokens, varstart, programstart, stackstart):
        self.programstart = programstart
        self.logger = logger
        self.emit = emit
        self.usingwozfloat = False
        self.kimathincluded = False
        self.usingkimath = self.kimathincluded
        self.kimathzeropage = self.kimathincluded
        self.lcdenabled = True
        self.aciaenabled = True
        self.emulatorenabled = False
        self.stokens = stokens
        self.defineVIA6522()
        self.defineACIA6551()
        for reg in [ '0','A','1','B','2','C','3','D','4','E','5','F','6','G','7','H' ]:
            dataregistername = "_unireg%s" % reg
            if reg in [ '0','1','2','3','4','5','6','7' ]:
                stoken = stokens.addwithattributes(dataregistername, "long", ["cpuregister", "vardefinition", "type_long", "type_longlong" ])
            else:
                stoken = stokens.addwithattributes(dataregistername, "long", ["cpuregister", "vardefinition", "type_long"  ])
            stoken.setsize(8)
            emit.varstatement(stoken, "long", dataregistername)
        stoken = stokens.addwithattributes("_userstack", "pointer", ["cpuregister", "vardefinition", "type_pointer" ])
        emit.varstatement(stoken, "pointer", "_userstack")
        stoken = stokens.addwithattributes("_systemstack", "pointer", ["cpuregister", "vardefinition", "type_pointer" ])
        emit.varstatement(stoken, "pointer", "_systemstack")
        stoken = stokens.addwithattributes("_framepointer", "pointer", ["cpuregister", "vardefinition", "type_pointer" ])
        emit.varstatement(stoken, "pointer", "_framepointer")
        stoken = stokens.addwithattributes("_scratchregister", "superlong", ["cpuregister", "vardefinition", "type_superlong" ])
        emit.varstatement(stoken, "superlong", "_scratchregister")
        stoken = stokens.addwithattributes("_zpscratch", "longlong", ["cpuregister", "vardefinition", "type_longlong" ])
        emit.varstatement(stoken, "longlong", "_zpscratch")
        stoken = stokens.addwithattributes("tickscounter", "long", ["type_long", "vardefinition"])
        emit.varstatement(stoken, "long", "tickscounter")
        #self.createvar("long", "type_long", 1,  "tickscounter")
        self.createvar("pointer", "type_pointer", 2, "irq_vector")
        self.createvar("pointer", "type_pointer", 2, "t1calledsubroutine")
        self.createvar("pointer", "type_pointer", 2, "irqscratchpointer")
        self.createvar("long", "type_long", 4, "_zpirqscratch0")
        self.createvar("long", "type_long", 4, "_zpirqscratch1")
        if self.usingwozfloat: # if true, the wozfloat routines will be included
            stoken = stokens.addwithattributes("SIGN", "byte", ["cpuregister", "vardefinition", "type_byte"])
            emit.varstatement(stoken, "byte", "SIGN")
            stoken = stokens.addwithattributes("X2", "byte", ["cpuregister", "vardefinition", "type_byte"])
            emit.varstatement(stoken, "byte", "X2")
            stoken = stokens.addwithattributes("M2", "chararray", ["cpuregister", "vardefinition", "type_chararray"])
            stoken.setsize(3)
            emit.varstatement(stoken, "byte", "M2")
            stoken = stokens.addwithattributes("X1", "byte", ["cpuregister", "vardefinition", "type_byte"])
            emit.varstatement(stoken, "byte", "X1")
            stoken = stokens.addwithattributes("M1", "chararray", ["cpuregister", "vardefinition", "type_chararray"])
            stoken.setsize(3)
            emit.varstatement(stoken, "byte", "M1")
            stoken = stokens.addwithattributes("E", "long", ["cpuregister", "vardefinition", "type_long"])
            emit.varstatement(stoken, "long", "E")
            stoken = stokens.addwithattributes("Z", "long", ["cpuregister", "vardefinition", "type_long"])
            emit.varstatement(stoken, "long", "Z")
            stoken = stokens.addwithattributes("T", "long", ["cpuregister", "vardefinition", "type_long"])
            emit.varstatement(stoken, "long", "T")
            stoken = stokens.addwithattributes("SEXP", "long", ["cpuregister", "vardefinition", "type_long"])
            emit.varstatement(stoken, "long", "SEXP")
            stoken = stokens.addwithattributes("INT", "byte", ["cpuregister", "vardefinition", "type_byte"])
            emit.varstatement(stoken, "byte", "INT")
        if self.kimathzeropage:
            self.createvar("byte", "type_byte", 1, "kima_n")
            self.createvar("byte", "type_byte", 1,  "kima_nkon")
            self.createvar("byte", "type_byte", 1,  "kima_j")
            self.createvar("byte", "type_byte", 1,  "kima_cnt")
            self.createvar("byte", "type_byte", 1,  "kima_cnta")
            self.emit.createcode("=","kima_cnta", "res     .ds 1",name="kima_length")
            self.createvar("byte", "type_byte", 1,  "kima_deg")
            self.createvar("byte", "type_byte", 1,  "kima_argxl")
            self.createvar("byte", "type_byte", 1,  "kima_argxh")
            self.createvar("byte", "type_byte", 1,  "kima_argyl")
            self.createvar("byte", "type_byte", 1,  "kima_argyh")
            self.createvar("byte", "type_byte", 1,  "kima_resl")
            self.createvar("byte", "type_byte", 1,  "kima_resh")
            self.emit.createcode("=","kima_resl", "res     .ds 1",name="kima_res")
            self.createvar("byte", "type_byte", 1,  "kima_ptrl")
            self.createvar("byte", "type_byte", 1,  "kima_ptrh")
            self.emit.createcode("=","kima_ptrl", "res     .ds 1",name="kima_ptr")
            self.createvar("byte", "type_byte", 1,  "kima_konl")
            self.createvar("byte", "type_byte", 1,  "kima_konh")
            self.emit.createcode("=","kima_konl", "res     .ds 1",name="kima_kon")
            self.createvar("byte", "type_byte", 1,  "kima_prec")
            self.createvar("byte", "type_byte", 1,  "kima_extra")
            self.createvar("byte", "type_byte", 1,  "kima_temp")
            self.createvar("byte", "type_byte", 1,  "kima_temp1")
            self.createvar("byte", "type_byte", 1,  "kima_overr")
            self.createvar("byte", "type_byte", 1,  "kima_tmpx")
            self.createvar("byte", "type_byte", 1,  "kima_tmpy")
        # set start of global var area
        emit.setvarstart(varstart)
        self.createvar("int", "type_integer", 2, "t1interval")
        # kim registerst are not in zeropage
        if self.usingkimath:
            # define kimath register ra with 18 byte length
            stoken = stokens.addwithattributes("kima_ra", "chararray", ["cpuregister", "vardefinition", "type_chararray"])
            stoken.setsize(17+1)
            emit.varstatement(stoken, "byte", "kima_ra")
            # define kimath register rb with 18 byte length
            stoken = stokens.addwithattributes("kima_rb", "chararray", ["cpuregister", "vardefinition", "type_chararray"])
            stoken.setsize(17+1)
            emit.varstatement(stoken, "byte", "kima_rb")
            # define kimath register rq with 17 byte length
            stoken = stokens.addwithattributes("kima_rq", "chararray", ["cpuregister", "vardefinition", "type_chararray"])
            stoken.setsize(17)
            emit.varstatement(stoken, "byte", "kima_rq")
            # define kimath register rx with 17 byte length
            stoken = stokens.addwithattributes("kima_rx", "chararray", ["cpuregister", "vardefinition", "type_chararray"])
            stoken.setsize(17)
            rx_startaddress = emit.getvaraddress()
            emit.varstatement(stoken, "byte", "kima_rx")
            # define kimath register sx with 17 byte length, same address as rx
            stoken = stokens.addwithattributes("kima_sx", "chararray", ["cpuregister", "vardefinition", "type_chararray"])
            stoken.setsize(17)
            emit.setvaraddress(rx_startaddress)
            emit.varstatement(stoken, "byte", "kima_sx")
            # define kimath register ex with 1 byte length
            stoken = stokens.addwithattributes("kima_ex", "chararray", ["cpuregister", "vardefinition", "type_chararray"])
            stoken.setsize(1)
            emit.varstatement(stoken, "byte", "kima_ex")
            # define kimath register ry with 17 byte length
            stoken = stokens.addwithattributes("kima_ry", "chararray", ["cpuregister", "vardefinition", "type_chararray"])
            stoken.setsize(17)
            ry_startaddress = emit.getvaraddress()
            emit.varstatement(stoken, "byte", "kima_ry")
            # define kimath register sy with 17 byte length, same address as ry
            stoken = stokens.addwithattributes("kima_sy", "chararray", ["cpuregister", "vardefinition", "type_chararray"])
            stoken.setsize(17)
            emit.setvaraddress(ry_startaddress)
            emit.varstatement(stoken, "byte", "kima_sy")
            # define kimath register ey with 1 byte length
            stoken = stokens.addwithattributes("kima_ey", "chararray", ["cpuregister", "vardefinition", "type_chararray"])
            stoken.setsize(1)
            emit.varstatement(stoken, "byte", "kima_ey")
            # define kimath register rz with 17 byte length
            stoken = stokens.addwithattributes("kima_rz", "chararray", ["cpuregister", "vardefinition", "type_chararray"])
            stoken.setsize(17)
            rz_startaddress = emit.getvaraddress()
            emit.varstatement(stoken, "byte", "kima_rz")
            # define kimath register sz with 17 byte length, same address as rz
            stoken = stokens.addwithattributes("kima_sz", "chararray", ["cpuregister", "vardefinition", "type_chararray"])
            stoken.setsize(17)
            emit.setvaraddress(rz_startaddress)
            emit.varstatement(stoken, "byte", "kima_sz")
            # define kimath register ey with 1 byte length
            stoken = stokens.addwithattributes("kima_ez", "chararray", ["cpuregister", "vardefinition", "type_chararray"])
            stoken.setsize(1)
            emit.varstatement(stoken, "byte", "kima_ez")
            # define kimath register rm with 18 byte length
            stoken = stokens.addwithattributes("kima_rm", "chararray", ["cpuregister", "vardefinition", "type_chararray"])
            stoken.setsize(17+1)
            emit.varstatement(stoken, "byte", "kima_rm")
            # define kimath register rn with 18 byte length
            stoken = stokens.addwithattributes("kima_rn", "chararray", ["cpuregister", "vardefinition", "type_chararray"])
            stoken.setsize(17+1)
            emit.varstatement(stoken, "byte", "kima_rn")
            # define kimath register ramcod with 3 byte length
            stoken = stokens.addwithattributes("kima_ramcod", "chararray", ["cpuregister", "vardefinition", "type_chararray"])
            stoken.setsize(3)
            emit.varstatement(stoken, "byte", "kima_ramcod")
            # define kimath register rama with 3 byte length
            stoken = stokens.addwithattributes("kima_rama", "chararray", ["cpuregister", "vardefinition", "type_chararray"])
            stoken.setsize(3)
            emit.varstatement(stoken, "byte", "kima_rama")
            # define kimath register ramb with 5 byte length
            stoken = stokens.addwithattributes("kima_ramb", "chararray", ["cpuregister", "vardefinition", "type_chararray"])
            stoken.setsize(5)
            emit.varstatement(stoken, "byte", "kima_ramb")
        stoken = stokens.addwithattributes("_memarea", "chararray", ["type_chararray", "vardefinition"])
        stoken.setsize(256)
        emit.varstatement(stoken, "chararray", "memarea")
        stoken = stokens.addwithattributes("_memarea", "chararray", ["type_chararray", "vardefinition"])
        stoken.setsize(256)
        emit.varstatement(stoken, "chararray", "irqmemarea")
        #
        stoken = stokens.addwithattributes("_outbufacia", "chararray", ["type_chararray", "vardefinition"])
        stoken.setsize(256)
        emit.varstatement(stoken, "chararray", "outbufacia")
        self.createvar("byte", "type_byte", 1,  "outbuf_irqptr")
        self.createvar("byte", "type_byte", 1,  "outbuf_writeptr")
        self.createvar("byte", "type_byte", 1,  "outbuf_writecounter")
        #
        stoken = stokens.addwithattributes("_inbufacia", "chararray", ["type_chararray", "vardefinition"])
        stoken.setsize(256)
        emit.varstatement(stoken, "chararray", "inbufacia")
        self.createvar("byte", "type_byte", 1,  "inbuf_irqptr")
        self.createvar("byte", "type_byte", 1,  "inbuf_readptr")
        self.createvar("byte", "type_byte", 1,  "inbuf_readcounter")
        #
        # create var for uptime counter on lcd
        if self.lcdenabled:
            self.createvar("byte", "type_byte", 1,  "lcd_update_statecounter")
            self.createvar("byte", "type_byte", 1,  "lcd_update_ticks")
            self.createvar("byte", "type_byte", 1,  "lcd_update_seconds")
            self.createvar("byte", "type_byte", 1,  "lcd_update_minutes")
            self.createvar("byte", "type_byte", 1,  "lcd_update_hours")
            self.createvar("int", "type_int", 1,  "lcd_update_days") 
        #
        # define adjustment and info var for timer 1 clock interval
        #
        #
        # start program
        emit.insertinline("ORG", self.programstart, 0)
        emit.insertinline("SEI", "", 0, name="programstart")
        emit.insertinline("CLD", "", 0)
        emit.insertinline("LDX", "#$FF", 0)
        emit.insertinline("TXS", "", 0)
        emit.insertinline("JSR", "setuserstack", 0)
        emit.createcode("LDA", "#<IRQhandler", "load low byte of irq-startaddress")
        emit.createcode("STA", "irq_vector_0")
        emit.createcode("LDA", "#>IRQhandler", "load high byte of irq-startaddress")
        emit.createcode("STA", "irq_vector_1")
        #
        emit.createcode("LDA", "#<t1calledsubdummy")
        emit.createcode("STA", "t1calledsubroutine_0")
        emit.createcode("LDA", "#>t1calledsubdummy")
        emit.createcode("STA", "t1calledsubroutine_1")
        # initialize timer interval (used for calculation in the gettimer() function)
        emit.createcode("LDA", "#$0e", "Initialize Timer to 10ms")
        emit.createcode("STA", "t1interval_0")
        emit.createcode("LDA", "#$27")
        emit.createcode("STA", "t1interval_1")
        #
        if self.lcdenabled:
            emit.insertinline("JSR", "configure_lcd", 0)
        emit.insertinline("JSR", "init_transmittimer", 0)
        emit.insertinline("JSR", "init_aciaserial", 0)
        emit.insertinline("JSR", "init_clocktimer", 0)
        # initializing VIA PA for debugging
        emit.createcode("LDA", "#255")
        emit.createcode("STA", "VIADDRA", "set all bits of Via PA as output")
        #
        emit.insertinline("CLI", "", 0)
        #emit.insertinline("JSR", "_lcd_start_message", 0)
        emit.insertinline("JSR", "main", 0)
        # clear upper 32 bit of _unireg0 because _OUT_UNIREG show only the first 32 bit
        emit.createcode("LDA", "#0")
        emit.createcode("STA", "_uniregA_0")
        emit.createcode("STA", "_uniregA_1")
        emit.createcode("STA", "_uniregA_2")
        emit.createcode("STA", "_uniregA_3")
        emit.insertinline("JSR", "_OUT_UNIREG0", 0)
        emit.insertinline("LDA", "#','", 0)
        emit.insertinline("JSR", "_OUTPUTCHAR", 0)
        emit.insertinline("JSR", "_UNIREG0_DECIMAL", 0)
        emit.insertinline("JSR", "_prt_global_memarea", 0)
        # call wozmon when program is finished, comment out, when not using wozmon
        emit.insertinline("JMP", "wozmonentrypoint", 0, name="_dowozmanentrypoint")
        # in case of not using the wozmon, you can use this code for entering endless loop
        emit.insertinline("LDY", "#0", 0)
        emit.insertinline("LDA", "_MESS_TERMINATED,Y", 0, name="_MESS_TERMINATED_LOOP")
        emit.insertinline("BEQ", "_program_terminated", 0)
        emit.insertinline("INY","",0)
        emit.insertinline("JSR", "_OUTPUTCHAR", 0)
        emit.insertinline("JMP", "_MESS_TERMINATED_LOOP", 0)
        emit.insertinline("JSR", "_OUTPUTCRLF", 0, name="_program_terminated")
        emit.insertinline("JSR", "_INPUT_WAIT",0, name="__INPUT_WAIT_LOOP")
        emit.insertinline("JMP", "__INPUT_WAIT_LOOP", 0)

        emit.insertinline(".ASCIIZ", "\"program terminated\"", 0, name="_MESS_TERMINATED")
        # emit.insertinline(".ASCIIZ", "\"IRQ/BRK detected\"", 0, name="_IRQ_BRK_MESSAGE")
        emit.insertinline(".ASCIIZ", "\"system startet\"", 0, name="_START_MESSAGE")
        # interrupt handler entry point
        emit.insertinline("JMP", "(irq_vector)", 0,name="IRQstart")
        emit.createcode("PHA", "", "save registers", name="IRQhandler")
        emit.createcode("PHX")
        emit.createcode("PHY")
        emit.createcode("LDA", "#1")
        emit.createcode("STA", "VIAORAIRA", "set PIA Pin PA0 to 1")
        emit.insertinline("JSR", "aciairqhandler", 0)
        emit.insertinline("JSR", "irq_handler_transmittimer", 0)
        emit.insertinline("JSR", "irq_handler_clocktimer", 0)
        emit.createcode("STZ", "VIAORAIRA", "set PIA Pin PA0 to 0")
        emit.createcode("PLY")
        emit.createcode("PLX")
        emit.createcode("PLA")
        emit.insertinline("RTI", "", 0)
        # print startmessage on lcd display
        emit.createcode("LDX", "#0", 0, name="_lcd_start_message")
        emit.createcode("LDA", "_START_MESSAGE,X", 0, name="_lcd_start_message_loop")
        emit.createcode("BEQ", "_lcd_start_message_rts")
        emit.insertinline("JSR", "print_lcdchar",0)
        emit.createcode("INX")
        emit.createcode("BRA", "_lcd_start_message_loop")
        emit.createcode("RTS", "", "", name="_lcd_start_message_rts")

        # former debug output for software irq
        # emit.createcode("JSR", "_OUTPUTCRLF")
        # emit.createcode("JSR", "_OUTPUTCRLF")
        # emit.createcode("LDY", "#0")
        # emit.createcode("LDA", "_IRQ_BRK_MESSAGE,Y", name="_IRQ_BRK_MESS")
        # emit.createcode("BEQ", "_end_irqbrk_mess")
        # emit.createcode("JSR", "_OUTPUTCHAR")
        # emit.createcode("INY")
        # emit.createcode("JMP", "_IRQ_BRK_MESS")
        # emit.createcode("JSR", "_OUTPUTCRLF",name="_end_irqbrk_mess")
        # emit.createcode("JMP", "wozmon")
        #
        # entry point for NMI Routine
        emit.createcode("PHA", "", "save all registers in NMI Routine", name="NMIstart")
        emit.createcode("PHX")
        emit.createcode("PHY")
        #
        #
        emit.createcode("PLY")
        emit.createcode("PLX")
        emit.createcode("PLA")
        emit.createcode("RTI")

        #
        self.emit_HELPERS()
        self.emit_OUTPUTCRLF()
        self.emit_INPUTCHAR()
        self.emit_OUTPUTCHAR()
        self.emit_OUT_ACCU()
        self.emit_OUT_ACCU_lcd()
        self.setuserstackaddress(stackstart)
        self.emit_outhex()
        self.getaddressoflocalvar()
        self.emit_bintodecimal()
        # self.emit_outbcd()
        self.emit_outputscratchregister()
        self.emit_out_framepointer()
        self.emit_out_userstack()
        for x in range(8):
            self.emit_out_uniregN(x)
        for x in range(8):
            self.emit_out_atuniregN(x)
        self.emit_out_atframepointer()
        if self.usingwozfloat:
            self.emit_out_M1()
            self.emit_out_M2()
        self.emit_decimal()
        # self.emit_decimal_only16bit() works, but too slow for using inside an interrupt handler, needs 2.5ms
        self.emit_output_memarea()
        self.emit_LCDbeneater()
        self.emit_ClockTimer()
        self.emit_AciaRoutines()
        self.emit_transmittimer()
        self.emit_transmitirqhandler()
        # self.emit_outputcharwithdelay()
        self.createinternalfunction("writelf", "type_void", "_OUTPUTCRLF")
        self.createinternalfunction("write_ureg0", "type_void", "_OUT_UNIREG0")
        self.createinternalfunction("write_framepointer", "type_void", "_OUT_FRAMEPOINTER")
        self.createinternalfunction("write_userstack", "type_void", "_OUT_USERSTACK")
        self.createinternalfunction("to_bcd", "type_void", "_BIN2BCD")
        self.definecompilerfunction("real", "wozfloat",argcount=1)
        self.definecompilerfunction("log", "wozfloat",argcount=1)
        self.definecompilerfunction("log10", "wozfloat",argcount=1)
        self.definecompilerfunction("exp", "wozfloat",argcount=1)
        self.definecompilerfunction("integer", "type_integer",argcount=1)
        self.definecompilerfunction("adr", "type_pointer",argcount=1)
        self.definecompilerfunction("peek", "type_byte",argcount=1)
        self.definecompilerfunction("poke", "type_void",argcount=2)
        self.definecompilerfunction("_getstack6502", "type_integer",argcount=0)
        self.definecompilerfunction("gettimer", "type_longlong", argcount=0)
        self.definecompilerfunction("settimer", "type_void", argcount=1)
        self.definecompilerfunction("sizeof", "type_integer",argcount=1)
        self.definecompilerfunction("getch", "type_integer",argcount=0)
        self.definecompilerfunction("avail", "type_integer",argcount=0)
        self.definecompilerfunction("print", "type_integer",argcount=-1)
        self.definecompilerfunction("println", "type_integer",argcount=-1)
        self.definecompilerfunction("printhex", "type_integer",argcount=-1)
        self.definecompilerfunction("printlnhex", "type_integer",argcount=-1)
        self.definecompilerfunction("lcdcommand", "type_void",argcount=1)
        self.definecompilerfunction("lcddata", "type_void",argcount=1)
        self.definecompilerfunction("lcdstring", "type_void", argcount=1)
        self.definecompilerfunction("strcpy", "type_pointer",argcount=-1)
        self.definecompilerfunction("strcat", "type_pointer",argcount=-1)
        self.definecompilerfunction("strlen", "type_byte",argcount=1)
        # strtok, very cool, but has his flaws, see https://cplusplus.com/faq/sequences/strings/strtok/
        # strupper: void strupper(char *toconvert) converts a string to upper, will modify the string
        # int toupper(int c), converts a single char to uppercase
        # int strcmp(a,b)

        self.definecompilerfunction("and", "type_all",argcount=2)
        self.definecompilerfunction("or", "type_all",argcount=1)
        self.definecompilerfunction("shiftright", "type_all",argcount=2)
        self.definecompilerfunction("shiftleft", "type_all",argcount=2)
        self.definecompilerfunction("rotateright", "type_all",argcount=2)
        self.definecompilerfunction("rotateleft", "type_all",argcount=2)
        self.definecompilerfunction("kim_clrx", "type_all", argcount=0)
        self.definecompilerfunction("kim_clry", "type_all", argcount=0)
        self.definecompilerfunction("kim_clrz", "type_all", argcount=0)
        self.definecompilerfunction("kim_iprec", "type_all", argcount=2)
        self.definecompilerfunction("kim_ploadx", "type_all", argcount=1)
        self.definecompilerfunction("kim_ploady", "type_all", argcount=1)
        self.definecompilerfunction("kim_uploadx", "type_all", argcount=1)
        self.definecompilerfunction("kim_uploady", "type_all", argcount=1)
        self.definecompilerfunction("kim_dechex", "type_all", argcount=1)
        self.definecompilerfunction("kim_savxy", "type_all", argcount=0)
        self.definecompilerfunction("kim_rclxy", "type_all", argcount=0)
        self.definecompilerfunction("kim_ustres", "type_all", argcount=1)
        self.wozmon()
        if self.usingwozfloat:
            self.wozfloat()
        if self.usingkimath:
            self.kimath()

    def emit_INPUTCHAR(self):
        # input a character from terminal, will return char in accu
        # 
        self.emit.insertinline("LABEL", "_INPUTCHAR", 0)
        if self.emulatorenabled:
            self.emit.insertinline("LDA", "$FFF1", 0)
        if self.aciaenabled:
            self.emit.createcode("LDA", "inbuf_readcounter", "load number of char in readbuffer")
            self.emit.createcode("BEQ", "_INPUTCHAR_EXIT")
            self.emit.createcode("JSR", "_INPUT_WAIT", "will not wait, because we tested before")
        self.emit.createcode("RTS", "", "exit with 0 or char", name="_INPUTCHAR_EXIT")
        #
        # check for char in input buffer, returns zero when no
        # character in buffer, returns number of chars in buffer in accu
        self.emit.insertinline("LABEL", "_INPUT_AVAIL", 0)
        if self.emulatorenabled:
            self.emit.insertinline("LDA", "$FFF1", 0)
        if self.aciaenabled:
            self.emit.createcode("LDA", "inbuf_readcounter", "load number of char in readbuffer")
            self.emit.createcode("BNE", "_INPUT_CHARS_IN_BUFFER")
            self.emit.createcode("WAI", "", "wait until next IRQ (mainly Timer 1 when no IO-activity")
        self.emit.createcode("RTS", "", "return", name="_INPUT_CHARS_IN_BUFFER")
        #
        # wait for input and get char if present.
        #
        self.emit.insertinline("LABEL", "_INPUT_WAIT", 0)
        self.emit.createcode("PHX", "", "save registers")
        self.emit.createcode("PHY")
        if self.emulatorenabled:
            self.emit.insertinline("LDA", "$FFF1", 0)
            self.emit.insertinline("BEQ", "_INPUT_WAIT", 0)
        if self.aciaenabled:
            self.emit.createcode("LDA", "inbuf_readcounter", "load number of chars in readbuffer", name="_INPUT_WAIT_FOR_CHARS")
            self.emit.createcode("BEQ", "_INPUT_GOSLEEP", "if count is 0, then wait for input in buffer")
            self.emit.createcode("SEI", "", "lock interrupts, as long as we modify the buffer")
            self.emit.createcode("LDX", "inbuf_readptr", "read pointer for read access")
            self.emit.createcode("INC", "inbuf_readptr", "increment, will rollover when 255 is reached")
            self.emit.createcode("LDA", "global_inbufacia,X", "load char from buffer into accu")
            self.emit.createcode("DEC", "inbuf_readcounter")
            self.emit.createcode("CLI", "", "interrupts are now allowed")
        self.emit.createcode("PLY")
        self.emit.createcode("PLX")
        self.emit.insertinline("RTS", "", 0)

        # put processor to wait state
        self.emit.createcode("WAI", "", "Put Processor in Waitstate, waiting for IRQ to continue processor activity", name="_INPUT_GOSLEEP")
        self.emit.createcode("BRA", "_INPUT_WAIT_FOR_CHARS")

    def emit_OUTPUTCHAR(self):
        #
        # output a character to hardware, char in accu
        self.emit.insertinline("LABEL", "_OUTPUTCHAR", 0)
        # if self.lcdenabled:
        #     emit.insertinline("JSR", "print_lcdchar", 0)
        if self.aciaenabled:
            self.emit.createcode("PHA", "", "save accu")
            self.emit.createcode("PHX", "", "save X-Register")
            # put char in output buffer, correct bufferptr if end of buffer reached
            self.emit.createcode("SEI", "", "lock interrupts, as long as we modify the buffer")
            self.emit.createcode("LDX", "outbuf_writeptr", "load pointer to write position")
            self.emit.createcode("STA", "global_outbufacia,X", "store char in buffer at actual position")
            self.emit.createcode("INX", "", "move pointer to next position in buffer")
            self.emit.createcode("STX", "outbuf_writeptr", "", name="output_store_write_ptr")
            # check for empty buffer and start timer
            self.emit.createcode("LDA", "outbuf_writecounter")
            self.emit.createcode("BNE", "output_dont_enable_timer", "there are chars in buffer, so we did not need to restart the timer")
            self.emit.createcode("JSR", "start_transmittimer", "start timer, because we will send this (and later) chars")
            self.emit.createcode("INC", "outbuf_writecounter", "One more char in outbuffer", name="output_dont_enable_timer")
            self.emit.createcode("CLI", "", "interrupts are now allowed")
            # check for buffer full and wait until buffer is empty
            self.emit.createcode("LDA", "outbuf_writecounter", "load counter")
            self.emit.createcode("CMP", "#240", "check if buffer is almost full (8 chars left)")
            self.emit.createcode("BPL", "outbuf_exitwithrestoreregisters")
            self.emit.createcode("LDA", "outbuf_writecounter", "load counter", name="output_buffer_full_empty_loop")
            # empty buffer complete
            self.emit.createcode("BNE", "_OUTPUT_GOSLEEP")
            # empty buffer until 20 chars remaining, this may not work correctly
            #self.emit.createcode("CMP", "#20", "check if buffer is empty")
            #self.emit.createcode("BPL", "_OUTPUT_GOSLEEP")
            # end of empty buffer
            # restore registers
            self.emit.createcode("PLX", "", "restore X-Register", name="outbuf_exitwithrestoreregisters")
            self.emit.createcode("PLA", "", "restore Accu")
        # this is the output channel of the emulator
        # a write to FFF0 will output to the terminal
        if self.emulatorenabled:
            self.emit.insertinline("STA", "$FFF0", 0)
        self.emit.insertinline("RTS", "", 0)
        # put processor in sleep mode
        self.emit.createcode("WAI", "", "Put Processor in Waitstate, waiting for IRQ to continue processor activity", name="_OUTPUT_GOSLEEP")
        self.emit.createcode("BRA", "output_buffer_full_empty_loop")

    def emit_OUTPUTCRLF(self):
        # output CR LF
        self.emit.insertinline("LABEL", "_OUTPUTCRLF", 0)
        self.emit.insertinline("PHA", "", 0)
        self.emit.insertinline("LDA", "#10", 0)
        self.emit.insertinline("JSR", "_OUTPUTCHAR", 0)
        self.emit.insertinline("LDA", "#13", 0)
        self.emit.insertinline("JSR", "_OUTPUTCHAR", 0)
        self.emit.insertinline("PLA", "", 0)
        self.emit.insertinline("RTS","",0)

    def emit_OUT_ACCU(self):
        # output a hex-byte  http://forum.6502.org/viewtopic.php?t=3164
        self.emit.insertinline("LABEL", "_OUT_ACCU", 0)
        self.emit.createcode("PHX")
        self.emit.createcode("PHY")
        self.emit.createcode("PHA")
        self.emit.insertinline("SED","", 0)         #  A = entry value
        self.emit.insertinline("TAX","",0)
        self.emit.insertinline("AND", "#$0F", 0)
        self.emit.insertinline("CMP", "#9+1", 0)
        self.emit.insertinline("ADC","#$30", 0)
        self.emit.insertinline("TAY","",0)
        self.emit.insertinline("TXA","",0)
        self.emit.insertinline("LSR","",0)
        self.emit.insertinline("LSR","",0)
        self.emit.insertinline("LSR","",0)
        self.emit.insertinline("LSR","",0)
        self.emit.insertinline("CMP","#9+1",0)
        self.emit.insertinline("ADC", "#$30", 0)    #  A = MSN ASCII char
        self.emit.insertinline("CLD","",0)          #  Y = LSN ASCII char
        self.emit.insertinline("JSR", "_OUTPUTCHAR", 0)
        self.emit.insertinline("TYA","",0)
        self.emit.insertinline("JSR", "_OUTPUTCHAR", 0)
        self.emit.createcode("PLA")
        self.emit.createcode("PLY")
        self.emit.createcode("PLX")
        self.emit.insertinline("RTS", "", 0)

    def emit_OUT_ACCU_lcd(self):
        # output a hex-byte  http://forum.6502.org/viewtopic.php?t=3164
        self.emit.insertinline("LABEL", "_OUT_ACCU_LCD", 0)
        self.emit.createcode("PHX")
        self.emit.createcode("PHY")
        self.emit.createcode("PHA")
        self.emit.insertinline("SED","", 0)         #  A = entry value
        self.emit.insertinline("TAX","",0)
        self.emit.insertinline("AND", "#$0F", 0)
        self.emit.insertinline("CMP", "#9+1", 0)
        self.emit.insertinline("ADC","#$30", 0)
        self.emit.insertinline("TAY","",0)
        self.emit.insertinline("TXA","",0)
        self.emit.insertinline("LSR","",0)
        self.emit.insertinline("LSR","",0)
        self.emit.insertinline("LSR","",0)
        self.emit.insertinline("LSR","",0)
        self.emit.insertinline("CMP","#9+1",0)
        self.emit.insertinline("ADC", "#$30", 0)    #  A = MSN ASCII char
        self.emit.insertinline("CLD","",0)          #  Y = LSN ASCII char
        self.emit.insertinline("JSR", "print_lcdchar", 0)
        self.emit.insertinline("TYA","",0)
        self.emit.insertinline("JSR", "print_lcdchar", 0)
        self.emit.createcode("PLA")
        self.emit.createcode("PLY")
        self.emit.createcode("PLX")
        self.emit.insertinline("RTS", "", 0)

    def createvar(self, datatype, type_def, size, name):
        stoken = self.stokens.addwithattributes(name, datatype, ["cpuregister", "vardefinition", type_def])
        stoken.setsize(size)
        self.emit.varstatement(stoken, datatype, name)

    def defineVIA6522(self):
        viabaseaddress = int(0x6000)   # Base Address of VIA 6522 in Ben Eaters Breadboard-Computer
        self.emit.createcode("=", "%d" % viabaseaddress,   "Output- Inputregister - B", name="VIAORBIRB")
        self.emit.createcode("=", "%d" % (viabaseaddress+1), "Output- Inputregister - A", name="VIAORAIRA")
        self.emit.createcode("=", "%d" % (viabaseaddress+2), "Data Direction Register B", name="VIADDRB")
        self.emit.createcode("=", "%d" % (viabaseaddress+3), "Data Direction Register A", name="VIADDRA")
        self.emit.createcode("=", "%d" % (viabaseaddress+4), "Timer 1 Low Latches / Timer 1 Low Order Counter", name="VIAT1CL")
        self.emit.createcode("=", "%d" % (viabaseaddress+5), "Timer 1 High Order Counter", name="VIAT1CH")
        self.emit.createcode("=", "%d" % (viabaseaddress+6), "Timer 1 Low Order Latches", name="VIAT1LL")
        self.emit.createcode("=", "%d" % (viabaseaddress+7), "Timer 1 High Order Latches", name="VIAT1LH")
        self.emit.createcode("=", "%d" % (viabaseaddress+8), "Timer 2 Low Latches / Timer 1 Low Order Counter", name="VIAT2CL")
        self.emit.createcode("=", "%d" % (viabaseaddress+9), "Timer 2 High Order Counter", name="VIAT2CH")
        self.emit.createcode("=", "%d" % (viabaseaddress+10), "Shift Register", name="VIASR")
        self.emit.createcode("=", "%d" % (viabaseaddress+11), "Auxililary Control Register", name="VIAACR")
        self.emit.createcode("=", "%d" % (viabaseaddress+12), "Peripheral Control Register", name="VIAPCR")
        self.emit.createcode("=", "%d" % (viabaseaddress+13), "Interrupt Flag Register", name="VIAIFR")
        self.emit.createcode("=", "%d" % (viabaseaddress+14), "Interrupt Enable Register", name="VIAIER")
        self.emit.createcode("=", "%d" % (viabaseaddress+15), "Output- Inputregister - A No Handshake", name="VIAORAIRANH")

    def defineACIA6551(self):
        aciabaseaddress = int(0x5000)
        self.emit.createcode("=", "%d" % aciabaseaddress,   "Output- Inputregister", name="ACIADATA")
        self.emit.createcode("=", "%d" % (aciabaseaddress+1),   "Status Register",     name="ACIASTATUS")
        self.emit.createcode("=", "%d" % (aciabaseaddress+2),   "Command Register",    name="ACIACOMMAND")
        self.emit.createcode("=", "%d" % (aciabaseaddress+3),   "Control Register",    name="ACIACONTROL")

    def emit_AciaRoutines(self):
        # init ACIA
        self.emit.createcode("LDA", "#0", "soft reset, (value not important)", name="init_aciaserial")
        self.emit.createcode("STA", "ACIASTATUS", "write into status register does soft reset")
        # switching baudrate, remember to change timer in transmit timer to adjust timing
        self.emit.createcode("LDA", "#%00011111", "Set 8bits + 1 stop, 19200 baud")
        # self.emit.createcode("LDA", "#%00011110", "Set 8bits + 1 stop, 9600 baud")
        #
        self.emit.createcode("STA", "ACIACONTROL")
        #self.emit.createcode("LDA", "#%00001001", "no par, no echo, interrupts disabled for TxD")
        self.emit.createcode("LDA", "#%00101001", "odd par, no echo, interrupts disabled for TxD")
        self.emit.createcode("STA", "ACIACOMMAND")
        # initialize counters and pointers
        self.emit.createcode("LDA", "#0")
        self.emit.createcode("STA", "inbuf_irqptr")
        self.emit.createcode("STA", "inbuf_readptr")
        self.emit.createcode("STA", "inbuf_readcounter")
        self.emit.createcode("RTS")
        #
        # interrupt handler for ACIA RECEIVE INTERRUPTS
        self.emit.createcode("BIT", "ACIASTATUS", "check if irq is on acia", name="aciairqhandler")
        self.emit.createcode("BPL", "inbuf_exitaciairqhandlernopla", "branch to rts if no irq")
        # disable LCD Uptime for some seconds, for dont block inside irq handler (may be not necessary)
        self.emit.createcode("LDA", "#245")
        self.emit.createcode("STA", "lcd_update_statecounter", "disable lcd update for some (255-245) seconds")
        #  insert char into buffer
        self.emit.createcode("LDX", "#20", "loop for waiting if register is empty")
        self.emit.createcode("LDA", "ACIASTATUS", "check bits", name="aciairqwaitforchar")
        self.emit.createcode("TAY")
        self.emit.createcode("AND", "#%00000100", "check for overrun error")
        self.emit.createcode("BNE", "inbuf_exitaciairqhandler_with_overrun", "overrun error detected")
        self.emit.createcode("TYA")
        self.emit.createcode("AND", "#%00000010", "check for framing error")
        self.emit.createcode("BNE", "inbuf_exitaciairqhandler_with_frameing", "framing error detected")
        self.emit.createcode("TYA")
        self.emit.createcode("AND", "#%000000001", "check for parity error")
        self.emit.createcode("BNE", "inbuf_exitaciairqhandler_with_parity", "parity error detected")
        self.emit.createcode("TYA")
        self.emit.createcode("AND", "#%00001000", "check for receiver full")
        self.emit.createcode("BNE", "acia_process_irq_char", "irq was from acia read, char is ready to read")
        self.emit.createcode("DEX", "", "decrement timeout counter, char not ready in acia")
        self.emit.createcode("BEQ", "inbuf_exitaciairqhandler_with_error", "we checked 20 times, with no char ready, something was wrong")
        self.emit.createcode("BRA", "aciairqwaitforchar", "no char in acia, jump to check again")
        # prcess a new char from acia
        self.emit.createcode("INC", "inbuf_readcounter", "one char more in buffer", name="acia_process_irq_char")
        self.emit.createcode("LDA", "ACIADATA", "get char")
        self.emit.createcode("CMP", "#$FF", "if received char is the escape char, then send them twice")
        self.emit.createcode("BNE", "inbuf_escape_char_checked")
        self.emit.createcode("LDX", "inbuf_irqptr")
        self.emit.createcode("STA", "global_inbufacia,X", "store char in buffer")
        self.emit.createcode("INC", "inbuf_irqptr")
        self.emit.createcode("INC", "inbuf_readcounter")
        self.emit.createcode("LDX", "inbuf_irqptr", name="inbuf_escape_char_checked")
        self.emit.createcode("STA", "global_inbufacia,X", "store char in buffer")
        self.emit.createcode("INC", "inbuf_irqptr")
        # exit handler
        self.emit.createcode("RTS", "", "", name="inbuf_exitaciairqhandlernopla")
        # prepare to inject error message, using escape char #$FF followed by error codes P, for parity error,
        # F, for framing error, O, for overrun and I for spurious Interrupt (acia got an IRQ but no char was availiable)
        self.emit.createcode("LDY", "#'P'", "", name="inbuf_exitaciairqhandler_with_parity")
        self.emit.createcode("BRA", "inbuf_exitirqhandler_with_any_error")
        self.emit.createcode("LDY", "#'O'", "", name="inbuf_exitaciairqhandler_with_overrun")
        self.emit.createcode("BRA", "inbuf_exitirqhandler_with_any_error")
        self.emit.createcode("LDY", "#'F'", "", name="inbuf_exitaciairqhandler_with_frameing")
        self.emit.createcode("BRA", "inbuf_exitirqhandler_with_any_error")
        self.emit.createcode("LDY", "#'I'", "", name="inbuf_exitaciairqhandler_with_error")
        #
        self.emit.createcode("LDX", "inbuf_irqptr", "load index for read buffer", name="inbuf_exitirqhandler_with_any_error")
        self.emit.createcode("LDA", "#$FF", "put escape char in buffer")
        self.emit.createcode("STA", "global_inbufacia,X", "store char in buffer")
        self.emit.createcode("INC", "inbuf_irqptr")
        self.emit.createcode("INC", "inbuf_readcounter")
        self.emit.createcode("TYA")
        self.emit.createcode("LDX", "inbuf_irqptr", "load index for read buffer")
        self.emit.createcode("STA", "global_inbufacia,X", "store char in buffer")
        self.emit.createcode("INC", "inbuf_irqptr")
        self.emit.createcode("INC", "inbuf_readcounter")
        self.emit.createcode("LDA", "ACIADATA", "get char from acia only for resetting the irq line")
        self.emit.createcode("RTS")

    def emit_transmittimer(self):
        # configure timer 2 to one shot timer mode for work around the acia6551 transmit bug
        self.emit.createcode("LDA", "VIAACR", "Put Timer 2 into One Shot Mode", name="init_transmittimer")
        self.emit.createcode("AND", "#%11011111", "Put Timer 2 into One Shot Mode")
        self.emit.createcode("STA", "VIAACR")
        self.emit.createcode("LDA", "#%10100000", "Enable Interrupts for Timer 2")
        self.emit.createcode("STA", "VIAIER")
        # init pointer and counter of outputbuffer                                                                                                                                                                                        
        self.emit.createcode("LDA", "#0", "initialize outputbuffer ptrs", name="output_acia_init")
        self.emit.createcode("STA", "outbuf_writeptr")
        self.emit.createcode("STA", "outbuf_irqptr")
        self.emit.createcode("STA", "outbuf_writecounter")
        self.emit.createcode("RTS")
        # start timer with specific timeout
        # Values: 600us = 0x0258, 800us = 0x0320, 1000us = 0x03E8 for 19200 baud
        # Values: 1200us = 0x480, 1600us = 0x0640, 2000us = 0x07d0 for 9600 baud
        self.emit.createcode("LDA", "#$20", "set timer to count parallel to transmit data", name="start_transmittimer")
        self.emit.createcode("STA", "VIAT2CL", "see table above for time")
        self.emit.createcode("LDA", "#$03")
        self.emit.createcode("STA", "VIAT2CH", "write in high order counter, this will start the timer")
        self.emit.createcode("RTS")

    def emit_transmitirqhandler(self):
        # interrupt handler for Timer 2
        self.emit.createcode("BIT", "VIAIFR", "check for general VIA interrupts",name="irq_handler_transmittimer")
        self.emit.createcode("BPL", "end_irq_handler_transmittimer", "branch, if bit 7 is 0, no irq from via")
        self.emit.createcode("LDA", "VIAIFR")
        self.emit.createcode("AND", "#%00100000", "check for bit 5 if IFR")
        self.emit.createcode("BEQ", "end_irq_handler_transmittimer", "IRQ was not from Timer 2")
        # do transmit interrupt as work around for broken ACIA 6551, first reset IRQ for timer 2
        self.emit.createcode("LDA", "VIAT2CH", "read low high register Timer 2, has no meaning at the moment")
        self.emit.createcode("LDA", "VIAT2CL", "read low order register Timer 2, reset the interrupt flag for timer 2")
        # check for chars in buffer
        self.emit.createcode("LDA", "outbuf_writecounter", "check writecounter if char in buffer")
        self.emit.createcode("BEQ", "end_irq_handler_transmittimer", "if not 0, output char in buffer")
        # there are chars in buffer, we need to start another transmission
        self.emit.createcode("LDX", "outbuf_irqptr", "load IRQ Pointer")
        self.emit.createcode("LDA", "global_outbufacia,X", "load byte from outputbuffer")
        self.emit.createcode("STA", "ACIADATA", "send char")
        # start timer 2, remember to adust timing if you change the baud rate
        self.emit.createcode("JSR", "start_transmittimer")
        # correct outputbuffer counter and pointer
        self.emit.createcode("INX")
        self.emit.createcode("STX", "outbuf_irqptr")
        self.emit.createcode("DEC", "outbuf_writecounter", "one char less in buffer")
        self.emit.createcode("RTS", "", "End of tramsmittimer handler", name="end_irq_handler_transmittimer")

    def emit_outputcharwithdelay(self):
        # output a single char including wait for wait until the uart has send, actually this will not be used
        # but in special cases it may be usefull, but you need to check the code, because the code is old ;-)
        self.emit.createcode("STA", "ACIADATA","send char with acia", name="output_single_char_with_wait")
        self.emit.createcode("PHA", "","save A-Register")
        self.emit.createcode("JSR", "output_wait_for_single19200baudchar")
        self.emit.createcode("PLA")
        self.emit.createcode("RTS")
        # wait a char-time in 19200 baud
        self.emit.createcode("PHX", "","save X-Register", name="output_wait_for_single19200baudchar")
        self.emit.createcode("LDX", "#100", "Loop-Count for 19200baud on 1Mhz Clock")
        self.emit.createcode("DEX", "", "decrement X", name="output_wait_for_si_loop")
        self.emit.createcode("BNE", "output_wait_for_si_loop")
        self.emit.createcode("PLX")
        self.emit.createcode("RTS")

    def emit_ClockTimer(self):
        self.emit.createcode("LDA", "VIAACR", "Put Timer 1 into Freerun Mode", name="init_clocktimer")
        self.emit.createcode("ORA", "#%01000000", "Put Timer into Freerun Mode, and disable all others")
        self.emit.createcode("STA", "VIAACR")
        self.emit.createcode("LDA", "#%11000000", "Enable Interrupts for Timer 1")
        self.emit.createcode("STA", "VIAIER")
        self.emit.createcode("LDA", "t1interval_0", "Initialize Timer to 10ms")
        self.emit.createcode("STA", "VIAT1CL")
        self.emit.createcode("LDA", "t1interval_1")
        self.emit.createcode("STA", "VIAT1CH")
        self.emit.createcode("LDA", "#0")
        self.emit.createcode("STA", "global_tickscounter_0")
        self.emit.createcode("STA", "global_tickscounter_1")
        self.emit.createcode("STA", "global_tickscounter_2")
        self.emit.createcode("STA", "global_tickscounter_3")
        # clear uptime counter, the counter itself can be used instead of tickscounter
        self.emit.createcode("STA", "lcd_update_seconds")
        self.emit.createcode("STA", "lcd_update_minutes")
        self.emit.createcode("STA", "lcd_update_hours")
        self.emit.createcode("STA", "lcd_update_days_0")
        self.emit.createcode("STA", "lcd_update_days_1")
        self.emit.createcode("STA", "lcd_update_statecounter")
        self.emit.createcode("RTS", name="end_irq_handler_clocktimer")
        #
        self.emit.createcode("BIT", "VIAIFR", "check for general VIA interrupts",name="irq_handler_clocktimer")
        # check for irq on VIA
        self.emit.createcode("BPL", "end_irq_handler_clocktimer", "branch, if bit 7 is 0, no irq from via")
        # check for irq on timer 1
        self.emit.createcode("BVC", "end_irq_handler_clocktimer", "branch, if bit 6 is 0, no irq from timer 1")
        self.emit.createcode("LDA", "VIAT1CL", "reset interrupt flag")
        self.emit.createcode("LDA", "VIAT1CH")
        if self.lcdenabled:
            self.emit.createcode("LDA", "lcd_update_ticks", "load lowest tick counter, for check for 100 * 10ms")
            self.emit.createcode("CMP", "#100", "check for one second gone, only valid if tickrate is 10ms")
            self.emit.createcode("BNE", "irq_handler_clocktimer_do_normal")
            self.emit.createcode("JSR", "lcd_uptime_counter", "display uptime on lcd")
            self.emit.createcode("INC", "lcd_update_statecounter", "inc statemachine")
            #
            self.emit.createcode("STZ", "lcd_update_ticks", "set ticks counter back to zero", name="irq_handler_clocktimer_dont_update")
            self.emit.createcode("INC", "lcd_update_ticks", "increment ticks counter", name= "irq_handler_clocktimer_do_normal")
            # print uptime on lcd, we have to split writing the elements into pices because writing the whole
            # string take 2ms, this is to much for serial communication with 19200 baud. we lost receiving chars.
            # we build a state machine and write the string in 8 pices, every tick (every 10 ms), writing 
            # the whole string takes ca. 80ms
            self.emit.createcode("LDA", "lcd_update_statecounter", "if state is 0, skip the whole part")
            self.emit.createcode("BEQ", "irq_handler_clocktimer_do_ticks", "if state is none, then do normal operation")
            self.emit.createcode("BMI", "irq_handler_clocktimer_do_ticks", "if negative, then also skip")
            self.emit.createcode("CMP", "#1")
            self.emit.createcode("BNE", "irq_handler_checkfor_state_1")
            self.emit.createcode("LDA", "#2", "set cursor in home position")
            self.emit.createcode("JSR", "lcd_instruction")
            self.emit.createcode("LDA", "lcd_update_days_1")
            self.emit.createcode("JSR", "_OUT_ACCU_LCD", "write decimal value")
            self.emit.createcode("INC", "lcd_update_statecounter", "state finished, switch to next state")
            self.emit.createcode("BRA", "irq_handler_clocktimer_do_ticks")
            #
            self.emit.createcode("CMP", "#2", "check for this state", name="irq_handler_checkfor_state_1")
            self.emit.createcode("BNE", "irq_handler_checkfor_state_2")
            self.emit.createcode("LDA", "lcd_update_days_0")
            self.emit.createcode("JSR", "_OUT_ACCU_LCD", "write decimal value")
            self.emit.createcode("INC", "lcd_update_statecounter", "state finished, switch to next state")
            self.emit.createcode("BRA", "irq_handler_clocktimer_do_ticks")
            #
            self.emit.createcode("CMP", "#3", "check for this state", name="irq_handler_checkfor_state_2")
            self.emit.createcode("BNE", "irq_handler_checkfor_state_3")
            self.emit.createcode("LDA", "#':'")
            self.emit.createcode("JSR", "print_lcdchar", "write ':' ")
            self.emit.createcode("INC", "lcd_update_statecounter", "state finished, switch to next state")
            self.emit.createcode("BRA", "irq_handler_clocktimer_do_ticks")
            #
            self.emit.createcode("CMP", "#4", "check for this state", name="irq_handler_checkfor_state_3")
            self.emit.createcode("BNE", "irq_handler_checkfor_state_4")
            self.emit.createcode("LDA", "lcd_update_hours")
            self.emit.createcode("JSR", "_OUT_ACCU_LCD", "write decimal value")
            self.emit.createcode("INC", "lcd_update_statecounter", "state finished, switch to next state")
            self.emit.createcode("BRA", "irq_handler_clocktimer_do_ticks")
            #
            self.emit.createcode("CMP", "#5", "check for this state", name="irq_handler_checkfor_state_4")
            self.emit.createcode("BNE", "irq_handler_checkfor_state_5")
            self.emit.createcode("LDA", "#':'")
            self.emit.createcode("JSR", "print_lcdchar", "write ':' ")
            self.emit.createcode("INC", "lcd_update_statecounter", "state finished, switch to next state")
            self.emit.createcode("BRA", "irq_handler_clocktimer_do_ticks")
            #
            self.emit.createcode("CMP", "#6", "check for this state", name="irq_handler_checkfor_state_5")
            self.emit.createcode("BNE", "irq_handler_checkfor_state_6")
            self.emit.createcode("LDA", "lcd_update_minutes")
            self.emit.createcode("JSR", "_OUT_ACCU_LCD", "write decimal value")
            self.emit.createcode("INC", "lcd_update_statecounter", "state finished, switch to next state")
            self.emit.createcode("BRA", "irq_handler_clocktimer_do_ticks")
            #
            self.emit.createcode("CMP", "#7", "check for this state", name="irq_handler_checkfor_state_6")
            self.emit.createcode("BNE", "irq_handler_checkfor_state_7")
            self.emit.createcode("LDA", "#':'")
            self.emit.createcode("JSR", "print_lcdchar", "write ':' ")
            self.emit.createcode("INC", "lcd_update_statecounter", "state finished, switch to next state")
            self.emit.createcode("BRA", "irq_handler_clocktimer_do_ticks")
            #
            self.emit.createcode("LDA", "lcd_update_seconds", name="irq_handler_checkfor_state_7")
            self.emit.createcode("JSR", "_OUT_ACCU_LCD", "write decimal value")
            self.emit.createcode("STZ", "lcd_update_statecounter", "all states finished, disable lcd-write")
            #
        self.emit.createcode("INC", "global_tickscounter_0", "count ticks the normal way",name="irq_handler_clocktimer_do_ticks")
        self.emit.createcode("BNE", "end_irq_handler_clocktimer_pla")
        self.emit.createcode("INC", "global_tickscounter_1")
        self.emit.createcode("BNE", "end_irq_handler_clocktimer_pla")
        self.emit.createcode("INC", "global_tickscounter_2")
        self.emit.createcode("BNE", "end_irq_handler_clocktimer_pla")
        self.emit.createcode("INC", "global_tickscounter_3")
        self.emit.createcode("JMP", "(t1calledsubroutine)", "call the user defined ticks routine", name="end_irq_handler_clocktimer_pla")
        self.emit.createcode("RTS", "", "End local Interrupt, Jump back to Main IRQ Handler")
        #
        # called subroutinedummy, this is a dummy for the user defined ticks routine
        self.emit.createcode("NOP", "", "", name="t1calledsubdummy")
        self.emit.createcode("RTS")
        #
        # count up time for display on lcd, this routine will be called every second from the timer irq-handler
        # do everything in decimal mode, beginn with seconds
        self.emit.createcode("SED", "", "calculate uptime with decimal mode of the 6502",  name="lcd_uptime_counter")
        self.emit.createcode("CLC")
        self.emit.createcode("LDA", "lcd_update_seconds")
        self.emit.createcode("ADC", "#1")
        self.emit.createcode("STA", "lcd_update_seconds")
        self.emit.createcode("CMP", "#$60")
        self.emit.createcode("BMI", "lcdcontinueuptime0")
        self.emit.createcode("STZ", "lcd_update_seconds", "set seconds to zero")
        # do minutes
        self.emit.createcode("CLC")
        self.emit.createcode("LDA", "lcd_update_minutes")
        self.emit.createcode("ADC", "#1")
        self.emit.createcode("STA", "lcd_update_minutes")
        self.emit.createcode("CMP", "#$60")
        self.emit.createcode("BMI", "lcdcontinueuptime0")
        self.emit.createcode("STZ", "lcd_update_minutes", "set minutes to zero")
        # do hours
        self.emit.createcode("CLC")
        self.emit.createcode("LDA", "lcd_update_hours")
        self.emit.createcode("ADC", "#1")
        self.emit.createcode("STA", "lcd_update_hours")
        self.emit.createcode("CMP", "#$24")
        self.emit.createcode("BMI", "lcdcontinueuptime0")
        self.emit.createcode("STZ", "lcd_update_hours", "set hours to zero")
        # do days
        self.emit.createcode("CLC")
        self.emit.createcode("LDA", "lcd_update_days_0")
        self.emit.createcode("ADC", "#1")
        self.emit.createcode("STA", "lcd_update_days_0")
        self.emit.createcode("LDA", "lcd_update_days_1")
        self.emit.createcode("ADC", "#0")
        self.emit.createcode("STA", "lcd_update_days_1")
        self.emit.createcode("CLD", "", "clear decimal flag for normal operation", name="lcdcontinueuptime0")
        self.emit.createcode("RTS")

    def emit_LCDbeneater(self):
        E  = "%01000000"
        RW = "%00100000"
        RS = "%00010000"
        # Original Code from Ben Eater (keyboard.s)
        self.emit.createcode("pha","","",name="lcd_wait")
        self.emit.createcode("lda","#%11110000","LCD data is input")
        self.emit.createcode("sta","VIADDRB")
        self.emit.createcode("lda", "#%s" % RW, "", name="lcdbusy")
        self.emit.createcode("sta","VIAORBIRB")
        self.emit.createcode("lda","#(%s | %s)" % (RW,E))
        self.emit.createcode("sta","VIAORBIRB")
        self.emit.createcode("lda","VIAORBIRB", "Read high nibble")
        self.emit.createcode("pha","","and put on stack since it has the busy flag")
        self.emit.createcode("lda","#%s" % RW)
        self.emit.createcode("sta","VIAORBIRB")
        self.emit.createcode("lda","#(%s | %s)" % (RW,E))
        self.emit.createcode("sta","VIAORBIRB")
        self.emit.createcode("lda","VIAORBIRB", "Read low nibble")
        self.emit.createcode("pla","","Get high nibble off stack")
        self.emit.createcode("and","#%00001000")
        self.emit.createcode("bne","lcdbusy")
        self.emit.createcode("lda","#%s" % RW)
        self.emit.createcode("sta","VIAORBIRB")
        self.emit.createcode("lda","#%11111111","LCD data is output")
        self.emit.createcode("sta","VIADDRB")
        self.emit.createcode("pla")
        self.emit.createcode("rts")
        #
        self.emit.createcode("lda","#%11111111","Set all pins on port B to output",name="configure_lcd")
        self.emit.createcode("sta","VIADDRB")
        self.emit.createcode("STA","VIADDRA")
        # set 4 bit mode to switch communication over half a byte
        self.emit.createcode("jsr","lcd_init")
        self.emit.createcode("lda","#%00101000","Set 4-bit mode; 2-line display; 5x8 font")
        self.emit.createcode("jsr","lcd_instruction")
        # send command again, switching to 2-lines mode does not work for me with one instruction 
        # may be because of 4 bit mode?
        self.emit.createcode("lda","#%00101000","Set 4-bit mode; 2-line display; 5x8 font")
        self.emit.createcode("jsr","lcd_instruction")
        self.emit.createcode("lda","#%00001100","Display on; cursor off; blink off")
        # self.emit.createcode("lda","#%00001111","Display on; cursor on; blink on")
        self.emit.createcode("jsr","lcd_instruction")
        self.emit.createcode("lda","#%00000110","Increment and shift cursor; don't shift display")
        self.emit.createcode("jsr","lcd_instruction")
        self.emit.createcode("lda","#%00000001","Clear display")
        self.emit.createcode("jsr","lcd_instruction")
        self.emit.createcode("rts")
        # 
        self.emit.createcode("lda","#%00000010","Set 4-bit mode",name="lcd_init")
        self.emit.createcode("sta","VIAORBIRB")
        self.emit.createcode("ora","#%s" % E)
        self.emit.createcode("sta","VIAORBIRB")
        self.emit.createcode("and","#%00001111")
        self.emit.createcode("sta","VIAORBIRB")
        self.emit.createcode("rts")
        #
        self.emit.createcode("jsr","lcd_wait","",name="lcd_instruction")
        self.emit.createcode("pha")
        self.emit.createcode("lsr")
        self.emit.createcode("lsr")
        self.emit.createcode("lsr")
        self.emit.createcode("lsr", "", "Send high 4 bits")
        self.emit.createcode("sta","VIAORBIRB")
        self.emit.createcode("ora","#%s" % E, "Set E bit to send instruction")
        self.emit.createcode("sta","VIAORBIRB")
        self.emit.createcode("eor","#%s" % E,"Clear E bit")
        self.emit.createcode("sta","VIAORBIRB")
        self.emit.createcode("pla")
        self.emit.createcode("and","#%00001111","Send low 4 bits")
        self.emit.createcode("sta","VIAORBIRB")
        self.emit.createcode("ora","#%s" % E, "Set E bit to send instruction")
        self.emit.createcode("sta","VIAORBIRB")
        self.emit.createcode("eor","#%s" % E, "Clear E bit")
        self.emit.createcode("sta","VIAORBIRB")
        self.emit.createcode("rts")
        #
        self.emit.createcode("jsr","lcd_wait","",name="print_lcdchar")
        self.emit.createcode("pha")
        self.emit.createcode("lsr")
        self.emit.createcode("lsr")
        self.emit.createcode("lsr")
        self.emit.createcode("lsr","","Send high 4 bits")
        self.emit.createcode("ora","#%s" % RS, "Set RS")
        self.emit.createcode("sta","VIAORBIRB")
        self.emit.createcode("ora","#%s" % E, "Set E bit to send instruction")
        self.emit.createcode("sta","VIAORBIRB")
        self.emit.createcode("eor","#%s" % E,"Clear E bit")
        self.emit.createcode("sta","VIAORBIRB")
        self.emit.createcode("pla")
        self.emit.createcode("and","#%00001111","Send low 4 bits")
        self.emit.createcode("ora","#%s" % RS, "Set RS")
        self.emit.createcode("sta","VIAORBIRB")
        self.emit.createcode("ora","#%s" % E, "Set E bit to send instruction")
        self.emit.createcode("sta","VIAORBIRB")
        self.emit.createcode("eor","#%s" % E, "Clear E bit")
        self.emit.createcode("sta","VIAORBIRB")
        self.emit.createcode("rts")
        # output a null terminated string on the lcd, string adr in irqscratchpointer
        self.emit.createcode("LDY", "#0", "set index to 0", name="lcdstring")
        self.emit.createcode("LDA", "(irqscratchpointer),Y", "load char from string in accu", name="lcdstring_loop0")
        self.emit.createcode("BEQ", "lcdstring_endloop0")
        self.emit.createcode("JSR", "print_lcdchar")
        self.emit.createcode("INY")
        self.emit.createcode("BRA", "lcdstring_loop0", "do next character")
        self.emit.createcode("RTS", "", "done", name="lcdstring_endloop0")

    def emit_decimal(self):
        # 64 Bit itoa routine, it is actual only for positive numbers
        # input is _unireg0 and _uniregA combined
        # output is array global_memarea as a null terminated string
        self.emit.createcode("LDA","#0","convert unireg0 to decimal", name="_UNIREG0_DECIMAL")
        self.emit.createcode("STA", "global_memarea", "output will be in global_memarea, so put a terminator char on it")
        self.emit.createcode("LDA", "#0", "initialize the remainder to zero", name="_conv2decimal64")
        self.emit.createcode("LDX", "#7")
        self.emit.createcode("STA", "_scratchregister_0,X", "clear scratchregister", name="_push_clear_scratchreg")
        self.emit.createcode("DEX")
        self.emit.createcode("BPL", "_push_clear_scratchreg")
        self.emit.createcode("CLC")
        self.emit.createcode("LDX", "#64")
        self.emit.createcode("ROL", "_unireg0_0", "original: value", name="_conv2dec_divloop64_long")
        self.emit.createcode("ROL", "_unireg0_1", "original: value + 1")
        self.emit.createcode("ROL", "_unireg0_2")
        self.emit.createcode("ROL", "_unireg0_3")
        self.emit.createcode("ROL", "_uniregA_0")
        self.emit.createcode("ROL", "_uniregA_1")
        self.emit.createcode("ROL", "_uniregA_2")
        self.emit.createcode("ROL", "_uniregA_3")
        self.emit.createcode("ROL", "_scratchregister_0")
        self.emit.createcode("ROL", "_scratchregister_1")
        self.emit.createcode("ROL", "_scratchregister_2")
        self.emit.createcode("ROL", "_scratchregister_3")
        self.emit.createcode("ROL", "_scratchregister_4")
        self.emit.createcode("ROL", "_scratchregister_5")
        self.emit.createcode("ROL", "_scratchregister_6")
        self.emit.createcode("ROL", "_scratchregister_7")
        self.emit.createcode("SEC", "", "a,y - divident - divisor")
        self.emit.createcode("LDA", "_scratchregister_0")
        self.emit.createcode("SBC", "#10")
        self.emit.createcode("STA", "_scratchregister_8", "save low byte in upper half of scratchregister")
        self.emit.createcode("PHP")
        self.emit.createcode("LDY", "#1")
        self.emit.createcode("PLP", "", "save result", name="_conv_subresult")
        self.emit.createcode("LDA", "_scratchregister_0,Y", "save result")
        self.emit.createcode("SBC", "#0")
        self.emit.createcode("PHP")
        self.emit.createcode("STA", "_scratchregister_8,Y")
        self.emit.createcode("INY")
        self.emit.createcode("CPY", "#8")
        self.emit.createcode("BNE","_conv_subresult")
        self.emit.createcode("PLP")
        self.emit.createcode("BCC", "_ignore_calculation64", "branch if dividend < divisor")
        self.emit.createcode("LDY", "#7")
        self.emit.createcode("LDA", "_scratchregister_8,Y", "save positive result", name="_conv_posresult")
        self.emit.createcode("STA", "_scratchregister_0,Y")
        self.emit.createcode("DEY")
        self.emit.createcode("BPL","_conv_posresult")
        self.emit.createcode("DEX","","",name="_ignore_calculation64")
        self.emit.createcode("BNE", "_conv2dec_divloop64")
        self.emit.createcode("ROL", "_unireg0_0", "shift in the last bit of the quotient")
        self.emit.createcode("ROL", "_unireg0_1")
        self.emit.createcode("ROL", "_unireg0_2")
        self.emit.createcode("ROL", "_unireg0_3")
        self.emit.createcode("ROL", "_uniregA_0")
        self.emit.createcode("ROL", "_uniregA_1")
        self.emit.createcode("ROL", "_uniregA_2")
        self.emit.createcode("ROL", "_uniregA_3")
        self.emit.createcode("LDA", "_scratchregister_0")
        self.emit.createcode("CLC")
        self.emit.createcode("ADC", "#'0'")
        self.emit.createcode("JSR", "_push_char", "Append char to beginning of string global_memarea")
        self.emit.createcode("LDA", "_unireg0_0", "if value != 0, then continue dividing")
        self.emit.createcode("ORA", "_unireg0_1")
        self.emit.createcode("ORA", "_unireg0_2")
        self.emit.createcode("ORA", "_unireg0_3")
        self.emit.createcode("ORA", "_uniregA_0")
        self.emit.createcode("ORA", "_uniregA_1")
        self.emit.createcode("ORA", "_uniregA_2")
        self.emit.createcode("ORA", "_uniregA_3")
        self.emit.createcode("BEQ", "_conv2dec_exit", "branch if value zero")
        self.emit.createcode("JMP", "_conv2decimal64")
        self.emit.createcode("JMP", "_conv2dec_divloop64_long", "", name="_conv2dec_divloop64")
        self.emit.createcode("RTS", "", "", name="_conv2dec_exit")

    def emit_decimal_only16bit(self):
        # this is the original itoa routine from Ben Eater, Youtube Video "Binary to decimal can’t be that hard, right?"
        # if you need only a 16 bit routine, this is faster and shorter
        # (uses _unireg1 instead of _scratchregister like the 64bit routine above)
        # there are two routines, one for usermode, one for usage inside interrupt routines
        #
        # the routine is too slow for using in an interrupt handler
        self.emit.createcode("LDA","#0","convert _zpirqscratch0 to decimal", name="_int_zpirqscratch_DECIMAL")
        self.emit.createcode("STA", "global_irqmemarea", "output will be in global_irqmemarea, so put a terminator char on it")
        self.emit.createcode("LDA", "#0", "initialize the remainder to zero", name="_conv2decimal")
        self.emit.createcode("STA", "_zpirqscratch1_0", "original: mod10")
        self.emit.createcode("STA", "_zpirqscratch1_1", "original: mod10 + 1")
        self.emit.createcode("CLC")
        self.emit.createcode("LDX", "#16")
        self.emit.createcode("ROL", "_zpirqscratch0_0", "original: value", name="_conv2dec_divloop")
        self.emit.createcode("ROL", "_zpirqscratch0_1", "original: value + 1")
        self.emit.createcode("ROL", "_zpirqscratch1_0")
        self.emit.createcode("ROL", "_zpirqscratch1_1")
        self.emit.createcode("SEC", "", "a,y - divident - divisor")
        self.emit.createcode("LDA", "_zpirqscratch1_0")
        self.emit.createcode("SBC", "#10")
        self.emit.createcode("TAY", "", "save low byte in Y-Register")
        self.emit.createcode("LDA", "_zpirqscratch1_1")
        self.emit.createcode("SBC", "#0")
        self.emit.createcode("BCC", "_ignore_calculation", "branch if dividend < divisor")
        self.emit.createcode("STY", "_zpirqscratch1_0")
        self.emit.createcode("STA", "_zpirqscratch1_1")
        self.emit.createcode("DEX","","",name="_ignore_calculation")
        self.emit.createcode("BNE", "_conv2dec_divloop")
        self.emit.createcode("ROL", "_zpirqscratch0_0", "shift in the last bit of the quotient")
        self.emit.createcode("ROL", "_zpirqscratch0_1")
        self.emit.createcode("LDA", "_zpirqscratch1_0")
        self.emit.createcode("CLC")
        self.emit.createcode("ADC", "#'0'")
        self.emit.createcode("JSR", "_push_irqchar", "Append char to beginning of string global_irqmemarea")
        self.emit.createcode("LDA", "_zpirqscratch0_0", "if value != 0, then continue dividing")
        self.emit.createcode("ORA", "_zpirqscratch0_1")
        self.emit.createcode("BNE", "_conv2decimal", "branch if value not zero")
        self.emit.createcode("RTS")
        # add a char to global_irqmemarea
        self.emit.createcode("PHA", "", "Push new first char onto stack", name="_push_irqchar")
        self.emit.createcode("LDY", "#0")
        self.emit.createcode("LDA", "global_irqmemarea,y", "Get char on string and put into X", name="_push_irqchar_loop")
        self.emit.createcode("TAX")
        self.emit.createcode("PLA")
        self.emit.createcode("STA", "global_irqmemarea,y", "Pull char off stack and add it to the string")
        self.emit.createcode("INY")
        self.emit.createcode("TXA")
        self.emit.createcode("PHA","","Push char from string onto stack")
        self.emit.createcode("BNE", "_push_irqchar_loop")
        self.emit.createcode("PLA")
        self.emit.createcode("STA", "global_irqmemarea,y", "Pull the null of the stack and add to the end of the string")
        self.emit.createcode("RTS")

    def emit_output_memarea(self):
        # add a char to the beginning of an string, string is "global_memarea"
        self.emit.createcode("PHA", "", "Push new first char onto stack", name="_push_char")
        self.emit.createcode("LDY", "#0")
        self.emit.createcode("LDA", "global_memarea,y", "Get char on string and put into X", name="_push_char_loop")
        self.emit.createcode("TAX")
        self.emit.createcode("PLA")
        self.emit.createcode("STA", "global_memarea,y", "Pull char off stack and add it to the string")
        self.emit.createcode("INY")
        self.emit.createcode("TXA")
        self.emit.createcode("PHA","","Push char from string onto stack")
        self.emit.createcode("BNE", "_push_char_loop")
        self.emit.createcode("PLA")
        self.emit.createcode("STA", "global_memarea,y", "Pull the null of the stack and add to the end of the string")
        self.emit.createcode("RTS")
        # output null terminated string in global_memarea
        self.emit.createcode("LDX", "#0", "print out global_memory with null terminated string", name="_prt_global_memarea")
        self.emit.createcode("LDA", "global_memarea,X", "get char from buffer", name="_prt_global_mem_loop")
        self.emit.createcode("BEQ", "_prt_global_return")
        self.emit.createcode("JSR", "_OUTPUTCHAR")
        self.emit.createcode("INX")
        self.emit.createcode("JMP", "_prt_global_mem_loop")
        self.emit.createcode("RTS", "", "all chars printed", name="_prt_global_return")

    def setuserstackaddress(self, stackstart):
        # set userstack
        self.emit.insertinline("LABEL", "setuserstack", 0)
        us_stoken = self.stokens.get("_userstack")
        self.emit.assignvaluetovariable(us_stoken, "number", stackstart)
        self.emit.insertinline("RTS","",0)

    def emit_HELPERS(self):
        emit = self.emit
        # add 1 to _userstack
        emit.insertinline("LABEL", "incuserstack_todelete", 0)
        emit.insertinline("LDA", "#1", 0)
        emit.insertinline("CLC", "", 0)
        emit.insertinline("ADC", "_userstack_0", 0)
        emit.insertinline("STA", "_userstack_0", 0)
        emit.insertinline("LDA", "#0", 0)
        emit.insertinline("ADC", "_userstack_1", 0)
        emit.insertinline("STA", "_userstack_1", 0)
        emit.insertinline("RTS","",0)
        # add accu to _unireg7
        emit.insertinline("LABEL", "addaccuto_unireg6", 0)
        emit.insertinline("CLC", "", 0)
        emit.insertinline("ADC", "_unireg6_0", 0)
        emit.insertinline("STA", "_unireg6_0", 0)
        emit.insertinline("LDA", "#0", 0)
        emit.insertinline("ADC", "_unireg6_1", 0)
        emit.insertinline("STA", "_unireg6_1", 0)
        emit.insertinline("RTS","",0)
        # add accu to _unireg7
        emit.insertinline("LABEL", "addaccuto_unireg7", 0)
        emit.insertinline("CLC", "", 0)
        emit.insertinline("ADC", "_unireg7_0", 0)
        emit.insertinline("STA", "_unireg7_0", 0)
        emit.insertinline("LDA", "#0", 0)
        emit.insertinline("ADC", "_unireg7_1", 0)
        emit.insertinline("STA", "_unireg7_1", 0)
        emit.insertinline("RTS","",0)
        # subtract 1 from _userstack
        emit.insertinline("LABEL", "decuserstack_todelete", 0)
        emit.insertinline("SEC", "", 0)
        emit.insertinline("LDA", "_userstack", 0)
        emit.insertinline("SBC", "#1", 0)
        emit.insertinline("STA", "_userstack", 0)
        emit.insertinline("LDA", "_userstack_1", 0)
        emit.insertinline("SBC", "#0", 0)
        emit.insertinline("STA", "_userstack_1", 0)
        emit.insertinline("RTS","",0)
        # subtract accu from _unireg7
        emit.insertinline("LABEL", "subaccufrom_unireg7", 0)
        emit.insertinline("SEC", "", 0)
        emit.insertinline("STA", "_scratchregister", 0)
        emit.insertinline("LDA", "_unireg7_0", 0)
        emit.insertinline("SBC", "_scratchregister", 0)
        emit.insertinline("STA", "_unireg7_0", 0)
        emit.insertinline("LDA", "_unireg7_1", 0)
        emit.insertinline("SBC", "#0", 0)
        emit.insertinline("STA", "_unireg7_1", 0)
        emit.insertinline("RTS","",0)
        # set _unireg7 from accu
        emit.insertinline("PHA", "", 0, name="setunireg7fromaccu")
        u7_stoken = self.stokens.get("_unireg7")
        # set all bytes from _unireg7 to 0
        emit.assignvaluetovariable(u7_stoken, "number", 0)
        emit.insertinline("PLA", "", 0)
        emit.insertinline("STA", "_unireg7", 0)
        emit.insertinline("RTS", "", 0)
        # add _unireg7 to _userstack
        emit.insertinline("LABEL", "addu7touserstack", 0)
        emit.insertinline("PHA", "", 0)
        emit.insertinline("CLC", "", 0)
        emit.insertinline("LDA", "_userstack_0", 0)
        emit.insertinline("ADC", "_unireg7_0", 0)
        emit.insertinline("STA", "_userstack", 0)
        emit.insertinline("LDA", "_userstack_1", 0)
        emit.insertinline("ADC", "_unireg7_1", 0)
        emit.insertinline("STA", "_userstack_1", 0)
        emit.insertinline("PLA", "", 0)
        emit.insertinline("RTS","",0)
        # subtract _unireg7 from _userstack
        emit.insertinline("LABEL", "subu7fromuserstack", 0)
        emit.insertinline("PHA", "", 0)
        emit.insertinline("LDA", "_userstack", 0)
        emit.insertinline("SEC", "", 0)
        emit.insertinline("SBC", "_unireg7_0", 0)
        emit.insertinline("STA", "_userstack_0", 0)
        emit.insertinline("LDA", "_userstack_1", 0)
        emit.insertinline("SBC", "_unireg7_1", 0)
        emit.insertinline("STA", "_userstack_1", 0)
        emit.insertinline("PLA", "", 0)
        emit.insertinline("RTS","",0)
        # add _unireg6 to _unireg7
        emit.insertinline("LABEL", "addu6tou7", 0)
        emit.insertinline("PHA", "", 0)
        emit.insertinline("CLC", "", 0)
        emit.insertinline("LDA", "_unireg7_0", 0)
        emit.insertinline("ADC", "_unireg6_0", 0)
        emit.insertinline("STA", "_unireg7_0", 0)
        emit.insertinline("LDA", "_unireg7_1", 0)
        emit.insertinline("ADC", "_unireg6_1", 0)
        emit.insertinline("STA", "_unireg7_1", 0)
        emit.insertinline("PLA", "", 0)
        emit.insertinline("RTS","",0)

    def emit_out_userstack(self):
        # output content of userstack
        self.emit.insertinline("LABEL", "_OUT_USERSTACK", 0)
        self.emit.insertinline("LDA", "_userstack_1",0)
        self.emit.insertinline("JSR", "_OUTHEX", 0)
        self.emit.insertinline("LDA", "_userstack_0",0 )
        self.emit.insertinline("JSR", "_OUTHEX", 0)
        self.emit.insertinline("JSR", "_OUTPUTCRLF",0)
        self.emit.insertinline("RTS","",0)

    def emit_out_framepointer(self):
        # output content of framepointer
        self.emit.insertinline("LABEL", "_OUT_FRAMEPOINTER", 0)
        self.emit.insertinline("LDA", "_framepointer_1",0)
        self.emit.insertinline("JSR", "_OUTHEX", 0)
        self.emit.insertinline("LDA", "_framepointer_0",0 )
        self.emit.insertinline("JSR", "_OUTHEX", 0)
        self.emit.insertinline("RTS","",0)

    def emit_out_uniregN(self, regnumber):
        self.emit.insertinline("LABEL", "_OUT_UNIREG%d" % regnumber, 0)
        for x in [3,2,1,0]:
            if x == 1:
                self.emit.insertinline("LABEL", "_OUT_UNIREG%d_2" % regnumber, 0)
            self.emit.insertinline("LDA", "_unireg%d" % regnumber + '_' + str(x), 0)
            self.emit.insertinline("JSR", "_OUTHEX", 0)
        self.emit.insertinline("RTS", "", 0)

    def emit_out_M1(self):
        self.emit.createcode("LDA", "X1", "Load Value of Exponent of the M1 Register", name="_OUT_M1")
        self.emit.createcode("JSR", "_OUTHEX", "Output Exponent")
        self.emit.createcode("LDA", "#$20")
        self.emit.createcode("JSR", "_OUTPUTCHAR")
        self.emit.createcode("LDA", "M1_2")
        self.emit.createcode("JSR", "_OUTHEX", "Output Mantissa (Hi)")
        self.emit.createcode("LDA", "M1_1")
        self.emit.createcode("JSR", "_OUTHEX", "Output Mantissa (Mid)")
        self.emit.createcode("LDA", "M1_0")
        self.emit.createcode("JSR", "_OUTHEX", "Output Mantissa (Lo)")
        self.emit.createcode("JSR", "_OUTPUTCRLF")
        self.emit.createcode("RTS")

    def emit_out_M2(self):
        self.emit.createcode("LDA", "X2", "Load Value of Exponent of the M1 Register", name="_OUT_M2")
        self.emit.createcode("JSR", "_OUTHEX", "Output Exponent")
        self.emit.createcode("LDA", "#$20")
        self.emit.createcode("JSR", "_OUTPUTCHAR")
        self.emit.createcode("LDA", "M2_2")
        self.emit.createcode("JSR", "_OUTHEX", "Output Mantissa (Hi)")
        self.emit.createcode("LDA", "M2_1")
        self.emit.createcode("JSR", "_OUTHEX", "Output Mantissa (Mid)")
        self.emit.createcode("LDA", "M2_0")
        self.emit.createcode("JSR", "_OUTHEX", "Output Mantissa (Lo)")
        self.emit.createcode("JSR", "_OUTPUTCRLF")
        self.emit.createcode("RTS")

    def emit_out_atframepointer(self):
        out_at_loop = "out_at_loop_frmptr"
        self.emit.createcode("PHA", name="_OUTAT_FRAMEPOINTER")
        self.emit.createcode("TYA")
        self.emit.createcode("PHA")
        self.emit.createcode("JSR", "_OUT_FRAMEPOINTER")
        self.emit.createcode("LDA", "#$20")
        self.emit.createcode("JSR", "_OUTPUTCHAR")
        self.emit.createcode("LDY", "#3")
        self.emit.createcode("LDA", "(_framepointer),Y", name=out_at_loop)
        self.emit.createcode("JSR", "_OUTHEX")
        self.emit.createcode("DEY")
        self.emit.createcode("BPL", out_at_loop)
        self.emit.createcode("JSR", "_OUTPUTCRLF")
        self.emit.createcode("PLA")
        self.emit.createcode("TAY")
        self.emit.createcode("PLA")
        self.emit.insertinline("RTS", "", 0)

    def emit_out_atuniregN(self, regnumber):
        out_at_loop = "out_at_loop_r%d" % regnumber
        self.emit.createcode("PHA", name="_OUTAT_UNIREG%d" % regnumber)
        self.emit.createcode("TYA")
        self.emit.createcode("PHA")
        self.emit.createcode("JSR", "_OUT_UNIREG%d_2" % regnumber)
        self.emit.createcode("LDA", "#$20")
        self.emit.createcode("JSR", "_OUTPUTCHAR")
        self.emit.createcode("LDY", "#3")
        self.emit.createcode("LDA", "(_unireg%d),Y" % regnumber, name=out_at_loop)
        self.emit.createcode("JSR", "_OUTHEX")
        self.emit.createcode("DEY")
        self.emit.createcode("BPL", out_at_loop)
        self.emit.createcode("JSR", "_OUTPUTCRLF")
        self.emit.createcode("PLA")
        self.emit.createcode("TAY")
        self.emit.createcode("PLA")
        self.emit.insertinline("RTS", "", 0)

    def emit_outputscratchregister(self):
        # output content of unireg0
        self.emit.insertinline("LABEL", "_OUT_SCRATCHREGISTER", 0)
        self.emit.insertinline("LDA", "_scratchregister_15",0)
        self.emit.insertinline("JSR", "_OUTHEX", 0)
        self.emit.insertinline("LDA", "_scratchregister_14",0)
        self.emit.insertinline("JSR", "_OUTHEX", 0)
        self.emit.insertinline("LDA", "_scratchregister_13",0)
        self.emit.insertinline("JSR", "_OUTHEX", 0)
        self.emit.insertinline("LDA", "_scratchregister_12",0 )
        self.emit.insertinline("JSR", "_OUTHEX", 0)
        self.emit.insertinline("LDA", "_scratchregister_11",0)
        self.emit.insertinline("JSR", "_OUTHEX", 0)
        self.emit.insertinline("LDA", "_scratchregister_10",0)
        self.emit.insertinline("JSR", "_OUTHEX", 0)
        self.emit.insertinline("LDA", "_scratchregister_9",0)
        self.emit.insertinline("JSR", "_OUTHEX", 0)
        self.emit.insertinline("LDA", "_scratchregister_8",0 )
        self.emit.insertinline("JSR", "_OUTHEX", 0)
        self.emit.insertinline("LDA", "_scratchregister_7",0)
        self.emit.insertinline("JSR", "_OUTHEX", 0)
        self.emit.insertinline("LDA", "_scratchregister_6",0)
        self.emit.insertinline("JSR", "_OUTHEX", 0)
        self.emit.insertinline("LDA", "_scratchregister_5",0)
        self.emit.insertinline("JSR", "_OUTHEX", 0)
        self.emit.insertinline("LDA", "_scratchregister_4",0 )
        self.emit.insertinline("JSR", "_OUTHEX", 0)
        self.emit.insertinline("LDA", "_scratchregister_3",0)
        self.emit.insertinline("JSR", "_OUTHEX", 0)
        self.emit.insertinline("LDA", "_scratchregister_2",0)
        self.emit.insertinline("JSR", "_OUTHEX", 0)
        self.emit.insertinline("LDA", "_scratchregister_1",0)
        self.emit.insertinline("JSR", "_OUTHEX", 0)
        self.emit.insertinline("LDA", "_scratchregister_0",0 )
        self.emit.insertinline("JSR", "_OUTHEX", 0)
        self.emit.insertinline("LDA", "#$20", 0)
        self.emit.insertinline("JSR", "_OUTPUTCHAR", 0)
        self.emit.insertinline("RTS","",0)

    def emit_bintodecimal(self):
        # convert binary data to decimal in scratchregister
        self.emit.createcode("LDA", "#0", "clear resultarea", name="_BIN2BCD")
        self.emit.createcode("LDY", "#127")
        self.emit.createcode("STA", "global_memarea,Y",name="bin2bcdclearloop")
        self.emit.createcode("DEY")
        self.emit.createcode("BNE", "bin2bcdclearloop")
        self.emit.createcode("LDX", "#16", "setup the bit counter")
        self.emit.createcode("SED","","decimal mode")
        self.emit.createcode("ASL", "_scratchregister_0","shift a bit out of the binary",name="bin2bcdconvloop")
        self.emit.createcode("ROL", "_scratchregister_1","...value")
        self.emit.createcode("LDA", "global_memarea+0", "and add it into the result, doubling...")
        self.emit.createcode("ADC", "global_memarea+0", "... it at the same time")
        self.emit.createcode("STA", "global_memarea+0")
        self.emit.createcode("LDA", "global_memarea+1", "and add it into the result, doubling...")
        self.emit.createcode("ADC", "global_memarea+1", "... it at the same time")
        self.emit.createcode("STA", "global_memarea+1")
        self.emit.createcode("LDA", "global_memarea+2", "and add it into the result, doubling...")
        self.emit.createcode("ADC", "global_memarea+2", "... it at the same time")
        self.emit.createcode("STA", "global_memarea+2")
        self.emit.createcode("DEX", "", "do more bits")
        self.emit.createcode("BNE", "bin2bcdconvloop")
        self.emit.createcode("CLD","","switch back to binary mode")
        self.emit.createcode("RTS")

    def emit_outbcd(self):
        self.emit.createcode("PHA", "", "print the bcd value in A as two ASCII digits", name="_OUTBCD")
        self.emit.createcode("LSR", "A", "shift the four most significant bits")
        self.emit.createcode("LSR", "A", "into the four least significant")
        self.emit.createcode("LSR", "A")
        self.emit.createcode("LSR", "A")
        self.emit.createcode("ORA", "#'0'")
        self.emit.createcode("JSR", "_OUTPUTCHAR")
        self.emit.createcode("PLA")
        self.emit.createcode("AND", "#$0F")
        self.emit.createcode("ORA", "#'0'")
        self.emit.createcode("JSR", "_OUTPUTCHAR")
        self.emit.createcode("RTS")

    def emit_outhex(self):
        # output byte value from accu
        self.emit.createcode("PHX","", "output a char in accu, save X+Y-Register", name="_OUTHEX")    
        self.emit.createcode("PHY")
        self.emit.createcode("JSR", "_OUT_ACCU")
        self.emit.createcode("PLY")
        self.emit.createcode("PLX")        
        self.emit.createcode("RTS")

    def getaddressoflocalvar(self):
        # get address of object and return address in _unireg0
        self.emit.createcode("CLC", "", "get address of local object, offset is in accu", name="_GETADDRESSOFLOCALVAR")
        self.emit.createcode("ADC", "_userstack_0", "add lo byte of userstack to accu")
        self.emit.createcode("STA", "_unireg0_0", "store lo byte to _unireg0")
        self.emit.createcode("LDA", "#0")
        self.emit.createcode("STA", "_unireg0_2", "clear upper bytes of long-type")
        self.emit.createcode("STA", "_unireg0_3", "dito")
        self.emit.createcode("ADC", "_userstack_1", "add hi byte of userstock to accu")
        self.emit.createcode("STA", "_unireg0_1", "store hi byte to _unireg0")
        self.emit.createcode("RTS", "", "return, address is in _unireg0")

    def createinternalfunction(self, functionname, functionreturn, subroutine):
        attributes = []
        attributes.append("funcdefinition")
        newtoken = self.stokens.addwithattributes(functionname, functionreturn, attributes)
        newtoken.setnamespace("_INTERNAL")
        newtoken.setbuildin(True)
        newtoken.addattributes(attributes)
        functionobject = funcdef(functionname, functionreturn, newtoken)
        functionobject.addvar(functionname, "_unireg0", "type_void", "global")
        functionobject.addvar(functionname, "_unireg1", "type_void", "global")
        functionobject.addvar(functionname, "_unireg2", "type_void", "global")
        functionobject.setsubroutine(subroutine)
        newtoken.setfuncdata(functionobject)
    
    def definecompilerfunction(self, functionname, functionreturn, argcount=1):
        attributes = []
        attributes.append("internalfunc")
        newtoken = self.stokens.addwithattributes(functionname, functionreturn, attributes)
        newtoken.setnamespace("_INTERNAL")
        newtoken.setbuildin(True)
        newtoken.addattributes(attributes)
        functionobject = funcdef(functionname, functionreturn, newtoken)
        if argcount == 1:
            if functionname == "real" or functionname == "integer" \
                       or functionname == "log" or functionname == "log10" or functionname == "exp":
                functionobject.addvar(functionname, "X1", "type_void", "global")
            else:
                functionobject.addvar(functionname, "_unireg0", "type_void", "global")
        elif argcount == 2:
            functionobject.addvar(functionname, "_unireg0", "type_void", "global")
            functionobject.addvar(functionname, "_unireg1", "type_void", "global")
        else:
            functionobject.addvar(functionname, "_unireg0", "type_void", "global")
            functionobject.addvar(functionname, "_unireg1", "type_void", "global")
            functionobject.addvar(functionname, "_unireg2", "type_void", "global")
        newtoken.setfuncdata(functionobject)

    def wozmon(self):
        debug_wozmon = False
        # define some chars, bit 8 set, because of tricks in wozmon for the apple 1
        self.emit.createcode("=", "$88", name="BS")
        self.emit.createcode("=", "$FF", name="DEL") # is 7f in ascii (del)
        self.emit.createcode("=", "$8D", name="CR")
        self.emit.createcode("=", "$9B", name="ESC")
        self.emit.createcode("=", "$AE", name="DOT")
        self.emit.createcode("=", "$BA", name="COLON")
        self.emit.createcode("=", "$D2", name="RUNLETTER")   # Letter R with set bit 8
        self.emit.createcode("=", "$CA", name="CALLLETTER")  # Letter J
        self.emit.createcode("=", "$CB", name="RTSLETTER")   # Letter K
        # define some zero page vars, will be rewritten
        self.emit.createcode("=", "_zpscratch_0", name="XAML")
        self.emit.createcode("=", "_zpscratch_1", name="XAMH")
        self.emit.createcode("=", "_zpscratch_2", name="STL")
        self.emit.createcode("=", "_zpscratch_3", name="STH")
        self.emit.createcode("=", "_zpscratch_4", name="L")
        self.emit.createcode("=", "_zpscratch_5", name="H")
        self.emit.createcode("=", "_zpscratch_6", name="YSAV")
        self.emit.createcode("=", "_zpscratch_7", name="MODE")
        # initialise system, in wozmon we need to initialiase keyboard io
        # this is done in init on this system
        self.emit.createcode("","","wozmon entry with easy label", name="wozmon")
        self.emit.createcode("JSR", "_OUTPUTCRLF", name="wozmonentrypoint")
        self.emit.createcode("LDY", "#$7f", "workaround because the original loop exits with 7f")
        # getline code
        self.emit.createcode("CMP", "#BS", name="woz_notcr")
        self.emit.createcode("BEQ", "woz_backspace")
        self.emit.createcode("CMP", "#ESC")
        self.emit.createcode("INY")
        self.emit.createcode("BPL", "woz_nextchar")
        self.emit.createcode("LDA", "#'\\'", name="woz_escape")
        self.emit.createcode("JSR", "woz_printchar")
        self.emit.createcode("PHA", name="woz_getline")
        self.emit.createcode("JSR", "_OUTPUTCRLF")
        self.emit.createcode("PLA")
        self.emit.createcode("LDY", "#0+1", "Start a new input line")
        self.emit.createcode("DEY", name="woz_backspace")
        self.emit.createcode("BMI", "woz_getline")
        self.emit.createcode("JSR", "_INPUT_WAIT", name="woz_nextchar")
        if debug_wozmon:
            self.emit.createcode("JSR", "woz_prbyte")
        # convert lower case to upper case
        self.emit.createcode("CMP", "#$60")
        self.emit.createcode("BMI", "woz_isupper")
        self.emit.createcode("SBC", "#$20")
        # end of toupper
        self.emit.createcode("ORA", "#$80", "set 8 bit for apple1", name="woz_isupper")
        self.emit.createcode("STA", "global_memarea,Y")
        self.emit.createcode("JSR", "woz_printchar")
        self.emit.createcode("CMP", "#CR")
        self.emit.createcode("BNE", "woz_notcr", "it's not CR")
        # line received, now let's parse it
        self.emit.createcode("LDY", "#-1", "reset text index")
        self.emit.createcode("LDA", "#0", "default mode is xam")
        self.emit.createcode("TAX")
        self.emit.createcode("ASL", "", "Leaves $78 if setting STOR mode", name="woz_setstor")
        self.emit.createcode("STA", "MODE", "set mode Flags", name="woz_setmode")
        self.emit.createcode("INY", "", "advance text index", name="woz_blskip")
        self.emit.createcode("LDA", "global_memarea,Y", "get character", name="woz_nextitem")
        self.emit.createcode("CMP", "#CR")
        self.emit.createcode("BEQ", "woz_getline")
        self.emit.createcode("CMP", "#DOT")
        self.emit.createcode("BCC", "woz_blskip", "ignore everything below '.'")
        self.emit.createcode("BEQ", "woz_setmode", "set block xam mode ('.' = $AE")
        self.emit.createcode("CMP", "#COLON")
        self.emit.createcode("BEQ", "woz_setstor")
        self.emit.createcode("CMP", "#RUNLETTER")
        self.emit.createcode("BEQ", "woz_run", "run the program! forget the rest")
        self.emit.createcode("CMP", "#RTSLETTER")
        self.emit.createcode("BEQ", "woz_rts", "call the program as a subroutine! forget the rest")
        self.emit.createcode("CMP", "#CALLLETTER")
        self.emit.createcode("BEQ", "woz_jsr", "call the program as a subroutine! forget the rest")
        self.emit.createcode("STX", "L", "clear input value (X=0)")
        self.emit.createcode("STX", "H")
        self.emit.createcode("STY", "YSAV", "Save Y for comparision")
        # here we're trying to parse a new hex value
        self.emit.createcode("LDA", "global_memarea,Y", "get character for hex test", name="woz_nexthex")
        self.emit.createcode("EOR", "#$B0", "map digits to 0-9")
        self.emit.createcode("CMP", "#9+1", " is it a decimal digit?")
        self.emit.createcode("BCC", "woz_dig", "Yes!")
        self.emit.createcode("ADC", "#$88", "Map letter A-F to $FA-FF")
        self.emit.createcode("CMP", "#$FA", "Hex letter ?")
        self.emit.createcode("BCC", "woz_nothex")
        self.emit.createcode("ASL", name="woz_dig")
        self.emit.createcode("ASL")
        self.emit.createcode("ASL")
        self.emit.createcode("ASL")
        self.emit.createcode("LDX", "#4", "Shift count")
        self.emit.createcode("ASL",name="woz_hexshift")
        self.emit.createcode("ROL", "L", "rotate into LSD")
        self.emit.createcode("ROL", "H", "rotate into MSD")
        self.emit.createcode("DEX","","done 4 shifts?")
        self.emit.createcode("BNE", "woz_hexshift", "no, loop")
        self.emit.createcode("INY", "", "advance text index")
        self.emit.createcode("BNE", "woz_nexthex", "always taken")
        self.emit.createcode("CPY", "YSAV", name="woz_nothex")
        self.emit.createcode("BEQ", "woz_escape", "No! Ignore all, start from scratch")
        self.emit.createcode("BIT", "MODE", "test MODE byte")
        self.emit.createcode("BVC", "woz_notstor", "bit 6 = 0 ist STOP, 1 is XA; or BLOCK XAM")
        # STOR mode, save LSD of new hex byte
        self.emit.createcode("LDA", "L", "LSD's of hex data")
        self.emit.createcode("STA", "(STL,X)", "Store current 'store index' (X=0)")
        self.emit.createcode("INC", "STL", "Increment store index")
        self.emit.createcode("BNE", "woz_nextitem", "no carry!")
        self.emit.createcode("INC", "STH", "add carry to store index high")
        self.emit.createcode("JMP", "woz_nextitem", "get next command item", name="woz_tonextitem")
        # run users program from last opened location
        self.emit.createcode("JMP", "(XAML)", name="woz_run")
        # run users program as a subroutine from last opened location
        self.emit.createcode("JSR", "woz_run", name="woz_jsr")
        # return from subroutine, if wozmon is called from another location
        self.emit.createcode("RTS", name="woz_rts")
        # We are not in store mode
        self.emit.createcode("BMI", "woz_xamnext", "B7 = 0 for XAM, 1 for BLOCK XAM", name="woz_notstor")
        # We are in XAM Mode now
        self.emit.createcode("LDX", "#2")
        self.emit.createcode("LDA", "L-1,X", "Copy 2 bytes", name="woz_setadr")
        self.emit.createcode("STA", "STL-1,X", "store index")
        self.emit.createcode("STA", "XAML-1,X", "and to XAM index")
        self.emit.createcode("DEX","", "next of 2 bytes")
        self.emit.createcode("BNE", "woz_setadr")
        # Print address and data from this addresss, fall throug next BNE
        self.emit.createcode("BNE", "woz_prdata", "NE means no address to print", name="woz_nxtprnt")
        self.emit.createcode("JSR", "_OUTPUTCRLF", "Print CR first")
        self.emit.createcode("LDA", "XAMH", "Output high-order byte of address")
        self.emit.createcode("JSR", "_OUTHEX")
        self.emit.createcode("LDA", "XAML", "Output low-order byte of address")
        self.emit.createcode("JSR", "_OUTHEX")
        self.emit.createcode("LDA", "#':'", "Output colon")
        self.emit.createcode("JSR", "woz_printchar")
        self.emit.createcode("LDA", "#' '", "Print space", name="woz_prdata")
        self.emit.createcode("JSR", "woz_printchar")
        self.emit.createcode("LDA", "(XAML,X)", "get data from address (X=0)")
        self.emit.createcode("JSR", "_OUTHEX")
        self.emit.createcode("STX", "MODE", "0 -> MODE (XAM mode)", name="woz_xamnext")
        self.emit.createcode("LDA", "XAML", "See if there is more to print")
        self.emit.createcode("CMP", "L")
        self.emit.createcode("LDA", "XAMH")
        self.emit.createcode("SBC", "H")
        self.emit.createcode("BCS", "woz_tonextitem", "Not Less! No more data to print")
        self.emit.createcode("INC", "XAML", "Increment examine index ")
        self.emit.createcode("BNE", "woz_mod8chk")
        self.emit.createcode("INC", "XAMH")
        self.emit.createcode("LDA", "XAML", "If address MOD 8 = 0 start a new line", name="woz_mod8chk")
        self.emit.createcode("AND", "#%00000111")
        self.emit.createcode("BPL", "woz_nxtprnt")
        # subroutine to print a byte in A in hex form (destructive)
        self.emit.createcode("JSR", "_OUTHEX",name="woz_prbyte")
        self.emit.createcode("RTS")
        # print a wozmon printchar, this will reset bit 8 to print on standard ascii terminals
        self.emit.createcode("PHA",name="woz_printchar")
        self.emit.createcode("AND", "#$7f")
        self.emit.createcode("JSR", "_OUTPUTCHAR")
        self.emit.createcode("PLA")
        self.emit.createcode("RTS")

    def wozfloat(self):
        self.emit.createcode("","","-------------------------------------------------------------------")
        self.emit.createcode("","","-----------------           WOZFLOAT LIBRARY            -----------")
        self.emit.createcode("","","-------------------------------------------------------------------")
        # LOG Entrypoint
        self.emit.createcode("LDA", "M1", name="wozLOG")                                 #
        self.emit.createcode("BEQ","wozERROR")                                           #
        self.emit.createcode("BPL","wozCONT","IF ARG>0 OK")                              #
        self.emit.createcode("BRK", "",name="wozERROR")
        self.emit.createcode("","","*")
        self.emit.createcode("JSR", "wozSWAP","MOVE ARG TO EXP/MANT2", name="wozCONT")   #
        self.emit.createcode("LDA","X2","HOLD EXPONENT")                                 #
        self.emit.createcode("LDY","=$80")                                               #
        self.emit.createcode("STY","X2","SET EXPONENT 2 TO 0 ($80)")                     #
        self.emit.createcode("EOR","=$80","COMPLIMENT SIGN BIT OF ORIGINAL EXPONENT")    #
        self.emit.createcode("STA","M1+1","SET EXPONENT INTO MANTISSA 1 FOR FLOAT")      #
        self.emit.createcode("LDA","=0")                                                 #
        self.emit.createcode("STA","M1","CLEAR MSB OF MANTISSA 1")                       #
        self.emit.createcode("JSR","wozFLOAT", "CONVERT TO FLOATING POINT")              #
        self.emit.createcode("LDX","=3","4 BYTE TRANSFERS")                              #
        self.emit.createcode("LDA","X2,X",name="wozSEXP1")                               #
        self.emit.createcode("STA","Z,X","COPY MANTISSA TO Z")                           #
        self.emit.createcode("LDA","X1,X")                                               #
        self.emit.createcode("STA","SEXP,X","SAVE EXPONENT IN SEXP")                     #
        self.emit.createcode("LDA","R22,X","LOAD EXP/MANT1 WITH SQRT(2)")                #
        self.emit.createcode("STA","X1,X")                                               #
        self.emit.createcode("DEX")                                                      #
        self.emit.createcode("BPL","wozSEXP1")                                           #
        self.emit.createcode("JSR","wozFSUB","Z-SQRT(2)")                                #
        self.emit.createcode("LDX","=3","4 BYTE TRANSFER")                               #
        self.emit.createcode("LDA","X1,X","SAVE EXP/MANT1 AS T",name="wozSAVET")         #
        self.emit.createcode("STA","T,X")                                                #
        self.emit.createcode("LDA","Z,X","LOAD EXP/MANT1 WITH Z")                        #
        self.emit.createcode("STA","X1,X")                                               #
        self.emit.createcode("LDA","R22,X","LOAD EXP/MANT2 WITH SQRT(2)")                #
        self.emit.createcode("STA","X2,X")                                               #
        self.emit.createcode("DEX")                                                      #
        self.emit.createcode("BPL","wozSAVET")                                           #
        self.emit.createcode("JSR","wozFADD","Z+SQRT(2)")                                #
        self.emit.createcode("LDX","=3","4 BYTE TRANSFER")                               #
        self.emit.createcode("LDA","T,X",name="wozTM2")                                  #
        self.emit.createcode("STA","X2,X","LOAD T INTO EXP/MANT2")                       #
        self.emit.createcode("DEX")                                                      #
        self.emit.createcode("BPL","wozTM2")                                             #
        self.emit.createcode("JSR","wozFDIV","T=(Z-SQRT(2))/(Z+SQRT(2))")                #
        self.emit.createcode("LDX","=3","4 BYTE TRANSFER")                               #
        self.emit.createcode("LDA","X1,X",name="wozMIT")                                 #
        self.emit.createcode("STA","T,X","COPY EXP/MANT1 TO T AND")                      #
        self.emit.createcode("STA","X2,X","LOAD EXP/MANT2 WITH T")                       #
        self.emit.createcode("DEX")                                                      #
        self.emit.createcode("BPL","wozMIT")                                             #
        self.emit.createcode("JSR","wozFMUL","T*T")                                      #
        self.emit.createcode("JSR","wozSWAP","MOVE T*T TO EXP/MANT2")                    #
        self.emit.createcode("LDX","=3","4 BYTE TRANSFER")                               #
        self.emit.createcode("LDA","C,X",name="wozMIC")
        self.emit.createcode("STA","X1,X","LOAD EXP/MANT1 WITH C")
        self.emit.createcode("DEX")
        self.emit.createcode("BPL","wozMIC")
        self.emit.createcode("JSR","wozFSUB","T*T-C")
        self.emit.createcode("LDX","=3","4 BYTE TRANSFER")
        self.emit.createcode("LDA","MB,X",name="wozM2MB")
        self.emit.createcode("STA","X2,X","LOAD EXP/MANT2 WITH MB")
        self.emit.createcode("DEX")
        self.emit.createcode("BPL","wozM2MB")
        self.emit.createcode("JSR","wozFDIV","MB/(T*T-C)")
        self.emit.createcode("LDX","=3")
        self.emit.createcode("LDA","A1,X",name="wozM2A1")
        self.emit.createcode("STA","X2,X","LOAD EXP/MANT2 WITH A1")
        self.emit.createcode("DEX")
        self.emit.createcode("BPL","wozM2A1")
        self.emit.createcode("JSR","wozFADD","MB/(T*T-C)+A1")
        self.emit.createcode("LDX","=3","4 BYTE TRANSFER")
        self.emit.createcode("LDA","T,X",name="M2T")
        self.emit.createcode("STA","X2,X","LOAD EXP/MANT2 WITH T")
        self.emit.createcode("DEX")
        self.emit.createcode("BPL","M2T")
        self.emit.createcode("JSR","wozFMUL","(MB/(T*T-C)+A1)*T")
        self.emit.createcode("LDX","=3","4 BYTE TRANSFER")
        self.emit.createcode("LDA","MHLF,X",name="wozM2MHL")
        self.emit.createcode("STA","X2,X","LOAD EXP/MANT2 WITH MHLF (.5)")
        self.emit.createcode("DEX")
        self.emit.createcode("BPL","wozM2MHL")
        self.emit.createcode("JSR","wozFADD","+.5")
        self.emit.createcode("LDX","=3","4 BYTE TRANSFER")
        self.emit.createcode("LDA","SEXP,X",name="wozLDEXP")
        self.emit.createcode("STA","X2,X","LOAD EXP/MANT2 WITH ORIGINAL EXPONENT")
        self.emit.createcode("DEX")
        self.emit.createcode("BPL","wozLDEXP")
        self.emit.createcode("JSR","wozFADD","+EXPN")
        self.emit.createcode("LDX","=3","4 BYTE TRANSFER")
        self.emit.createcode("LDA","LE2,X",name="wozMLE2")
        self.emit.createcode("STA","X2,X","LOAD EXP/MANT2 WITH LN(2)")
        self.emit.createcode("DEX")
        self.emit.createcode("BPL","wozMLE2")
        self.emit.createcode("JSR","wozFMUL","*LN(2)")
        self.emit.createcode("RTS","", "RETURN RESULT IN MANT/EXP1")


        #
        # LOG10
        #
        self.emit.createcode("","","*")
        self.emit.createcode("","","*     COMMON LOG OF MANT/EXP1 RESULT IN MANT/EXP1")
        self.emit.createcode("","","*")
        self.emit.createcode("JSR","wozLOG","COMPUTE NATURAL LOG",name="wozLOG10")
        self.emit.createcode("LDX","=3")
        self.emit.createcode("LDA","LN10,X", name="wozL10")
        self.emit.createcode("STA","X2,X","LOAD EXP/MANT2 WITH 1/LN(10)")
        self.emit.createcode("DEX")
        self.emit.createcode("BPL","wozL10")
        self.emit.createcode("JSR","wozFMUL","LOG10(X)=LN(X)/LN(10)")
        self.emit.createcode("RTS")


        self.emit.createcode("word", "$6F7E", "DCM 0.4342945", name="LN10")
        self.emit.createcode("word", "$ED2D")
        self.emit.createcode("word", "$5A80", "1.4142136   SQRT(2)", name="R22")
        self.emit.createcode("word", "$7A82")
        self.emit.createcode("word", "$587F", "0.69314718  LOG BASE E OF 2", name="LE2")
        self.emit.createcode("word", "$0CB9")
        self.emit.createcode("word", "$5280", "1.2920074", name="A1")
        self.emit.createcode("word", "$40B0")
        self.emit.createcode("word", "$AB81", "-2.6398577", name="MB")
        self.emit.createcode("word", "$4986")
        self.emit.createcode("word", "$6A80", "1.6567626", name="C")
        self.emit.createcode("word", "$6608")
        self.emit.createcode("word", "$407F", "0.5", name="MHLF")
        self.emit.createcode("word", "$0000")


        #self.emit.createcode("DCM","0.4342945",name="wozLN10")
        #self.emit.createcode("DCM","1.4142136","SQRT(2)",name="wozR22")
        #self.emit.createcode("DCM","0.69314718","LOG BASE E OF 2",name="wozLE2")
        #self.emit.createcode("DCM","1.2920074",name="wozA1")
        #self.emit.createcode("DCM","-2.6398577",name="wozMB")
        #self.emit.createcode("DCM","1.6567626",name="wozC")
        #self.emit.createcode("DCM","0.5",name="wozMHLF")
        #
        # EXP   EXP OF MANT/EXP1 RESULT IN MANT/EXP1
        #
        self.emit.createcode("","","*")
        self.emit.createcode("","","       ORG $1E00   STARTING LOCATION FOR EXP")
        self.emit.createcode("","","*")
        self.emit.createcode("","","*     EXP OF MANT/EXP1 RESULT IN MANT/EXP1")
        self.emit.createcode("","","*")
        self.emit.createcode("LDX","=3","4 BYTE TRANSFER",name="wozEXP")
        self.emit.createcode("LDA","L2E,X")
        self.emit.createcode("STA","X2,X","LOAD EXP/MANT2 WITH LOG BASE 2 OF E")
        self.emit.createcode("DEX")
        self.emit.createcode("BPL","wozEXP+2")
        self.emit.createcode("JSR","wozFMUL","LOG2(3)*X")
        self.emit.createcode("LDX","=3","4 BYTE TRANSFER")
        self.emit.createcode("LDA","X1,X",name="wozFSA")
        self.emit.createcode("STA","Z,X","STORE EXP/MANT1 IN Z")
        self.emit.createcode("DEX")
        self.emit.createcode("BPL","wozFSA","SAVE Z=LN(2)*X")
        self.emit.createcode("JSR","wozFIX","CONVERT CONTENTS OF EXP/MANT1 TO AN INTEGER")
        self.emit.createcode("LDA","M1+1")
        self.emit.createcode("STA","INT","SAVE RESULT AS INT")
        self.emit.createcode("SEC","", "SET CARRY FOR SUBTRACTION")
        self.emit.createcode("SBC","=124","INT-124")
        self.emit.createcode("LDA","M1")
        self.emit.createcode("SBC","=0")
        self.emit.createcode("BPL","wozOVFLW","OVERFLOW INT>=124")
        self.emit.createcode("CLC","","CLEAR CARRY FOR ADD")
        self.emit.createcode("LDA","M1+1")
        self.emit.createcode("ADC","=120","ADD 120 TO INT")
        self.emit.createcode("LDA","M1")
        self.emit.createcode("ADC","=0")
        self.emit.createcode("BPL","wozCONTIN","IF RESULT POSITIVE CONTINUE")
        self.emit.createcode("LDA","=0","INT<-120 SET RESULT TO ZERO AND RETURN")
        self.emit.createcode("LDX","=3","4 BYTE MOVE")
        #
        # set EXP/MANT 1 to Zero
        #
        self.emit.createcode("STA","X1,X","SET EXP/MANT1 TO ZERO",name="wozZERO")
        self.emit.createcode("DEX")
        self.emit.createcode("BPL","wozZERO")
        self.emit.createcode("RTS","", "RETURN")

        # stop with overflow
        self.emit.createcode("BRK", "", "overflow",name="wozOVFLW")

        # continue
        self.emit.createcode("JSR","wozFLOAT","FLOAT INT",name="wozCONTIN")
        self.emit.createcode("LDX","=3")
        self.emit.createcode("LDA","Z,X",name="wozENTD")
        self.emit.createcode("STA","X2,X","LOAD EXP/MANT2 WITH Z")
        self.emit.createcode("DEX")
        self.emit.createcode("BPL","wozENTD")
        self.emit.createcode("JSR","wozFSUB","Z*Z-FLOAT(INT)")
        self.emit.createcode("LDX","=3","4 BYTE MOVE")
        self.emit.createcode("LDA","X1,X",name="wozZSAV")
        self.emit.createcode("STA","Z,X","SAVE EXP/MANT1 IN Z")
        self.emit.createcode("STA","X2,X","COPY EXP/MANT1 TO EXP/MANT2")
        self.emit.createcode("DEX")
        self.emit.createcode("BPL","wozZSAV")
        self.emit.createcode("JSR","wozFMUL", "Z*Z")
        self.emit.createcode("LDX","=3","4 BYTE MOVE")
        self.emit.createcode("LDA","A2,X",name="wozLA2")
        self.emit.createcode("STA","X2,X","LOAD EXP/MANT2 WITH A2")
        self.emit.createcode("LDA","X1,X")
        self.emit.createcode("STA","SEXP,X","SAVE EXP/MANT1 AS SEXP")
        self.emit.createcode("DEX")
        self.emit.createcode("BPL","wozLA2")
        self.emit.createcode("JSR","wozFADD","Z*Z+A2")
        self.emit.createcode("LDX","=3","4 BYTE MOVE")
        self.emit.createcode("LDA","B2,X",name="wozLB2")
        self.emit.createcode("STA","X2,X","LOAD EXP/MANT2 WITH B2")
        self.emit.createcode("DEX")
        self.emit.createcode("BPL","wozLB2")
        self.emit.createcode("JSR","wozFDIV","T=B/(Z*Z+A2)")
        self.emit.createcode("LDX","=3","4 BYTE MOVE")
        self.emit.createcode("LDA","X1,X",name="wozDLOAD")
        self.emit.createcode("STA","T,X","SAVE EXP/MANT1 AS T")
        self.emit.createcode("LDA","C2,X")
        self.emit.createcode("STA","X1,X","LOAD EXP/MANT1 WITH C2")
        self.emit.createcode("LDA","SEXP,X")
        self.emit.createcode("STA","X2,X","LOAD EXP/MANT2 WITH SEXP")
        self.emit.createcode("DEX")
        self.emit.createcode("BPL","wozDLOAD")
        self.emit.createcode("JSR","wozFMUL","Z*Z*C2")
        self.emit.createcode("JSR","wozSWAP","MOVE EXP/MANT1 TO EXP/MANT2")
        self.emit.createcode("LDX","=3","4 BYTE TRANSFER")
        self.emit.createcode("LDA","T,X",name="wozLTMP")
        self.emit.createcode("STA","X1,X","LOAD EXP/MANT1 WITH T")
        self.emit.createcode("DEX")
        self.emit.createcode("BPL","wozLTMP")
        self.emit.createcode("JSR","wozFSUB","C2*Z*Z-B2/(Z*Z+A2)")
        self.emit.createcode("LDX","=3","4 BYTE TRANSFER")
        self.emit.createcode("LDA","D,X",name="wozLDD")
        self.emit.createcode("STA","X2,X","LOAD EXP/MANT2 WITH D")
        self.emit.createcode("DEX")
        self.emit.createcode("BPL","wozLDD")
        self.emit.createcode("JSR","wozFADD","D+C2*Z*Z-B2/(Z*Z+A2)")
        self.emit.createcode("JSR","wozSWAP","MOVE EXP/MANT1 TO EXP/MANT2")
        self.emit.createcode("LDX","=3","4 BYTE TRANSFER")
        self.emit.createcode("LDA","Z,X",name="wozLFA")
        self.emit.createcode("STA","X1,X","LOAD EXP/MANT1 WITH Z")
        self.emit.createcode("DEX")
        self.emit.createcode("BPL","wozLFA")
        self.emit.createcode("JSR","wozFSUB","-Z+D+C2*Z*Z-B2/(Z*Z+A2)")
        self.emit.createcode("LDX","=3","4 BYTE TRANSFER")
        self.emit.createcode("LDA","Z,X",name="wozLF3")
        self.emit.createcode("STA","X2,X","LOAD EXP/MANT2 WITH Z")
        self.emit.createcode("DEX")
        self.emit.createcode("BPL","wozLF3")
        self.emit.createcode("JSR","wozFDIV", "Z/(**** )")
        self.emit.createcode("LDX","=3","4 BYTE TRANSFER")
        self.emit.createcode("LDA","MHLF,X",name="wozLD12")
        self.emit.createcode("STA","X2,X","LOAD EXP/MANT2 WITH .5")
        self.emit.createcode("DEX")
        self.emit.createcode("BPL","wozLD12")
        self.emit.createcode("JSR","wozFADD","+Z/(***)+.5")
        self.emit.createcode("SEC","","ADD INT TO EXPONENT WITH CARRY SET")
        self.emit.createcode("LDA","INT","TO MULTIPLY BY")
        self.emit.createcode("ADC","X1","2**(INT+1)")
        self.emit.createcode("STA","X1","RETURN RESULT TO EXPONENT")
        self.emit.createcode("RTS","","RETURN ANS=(.5+Z/(-Z+D+C2*Z*Z-B2/(Z*Z+A2))*2**(INT+1)")
    
        self.emit.createcode("word", "$5C80", "LOG BASE 2 OF E", name="L2E")
        self.emit.createcode("word", "$1E55")
        self.emit.createcode("word", "$5786", "", name="A2")
        self.emit.createcode("word", "$E16A")
        self.emit.createcode("word", "$4D89", "", name="B2")
        self.emit.createcode("word", "$1D3F")
        self.emit.createcode("word", "$467B", "", name="C2")
        self.emit.createcode("word", "$70FA")
        self.emit.createcode("word", "$4F83", "", name="D")
        self.emit.createcode("word", "$03A3")

        #self.emit.createcode("DCM","1.4426950409","LOG BASE 2 OF E",name="wozL2E")
        #self.emit.createcode("DCM","87.417497202",name="wozA2")
        #self.emit.createcode("DCM","617.9722695",name="wozB2")
        #self.emit.createcode("DCM",".03465735903",name="wozC2")
        #self.emit.createcode("DCM","9.9545957821",name="wozD")
        #
        #        BASIC FLOATING POINT ROUTINES
        #
        #
        self.emit.createcode("","","*")
        self.emit.createcode("","","*")
        self.emit.createcode("","","*     BASIC FLOATING POINT ROUTINES")
        self.emit.createcode("","","*")
        self.emit.createcode("","","       ORG $1F00   START OF BASIC FLOATING POINT ROUTINES")
        # start of ADD (not an entry point, use FADD for programming)
        self.emit.createcode("CLC","","CLEAR CARRY",name="wozADD")                                 #
        self.emit.createcode("LDX","=$02", "INDEX FOR 3-BYTE ADD")                                 #
        self.emit.createcode("LDA","M1,X",name="wozADD1")                                          #
        self.emit.createcode("ADC","M2,X","ADD A BYTE OF MANT2 TO MANT1")                          #
        self.emit.createcode("STA","M1,X")                                                         #
        self.emit.createcode("DEX","","ADVANCE INDEX TO NEXT MORE SIGNIF.BYTE")                    #
        self.emit.createcode("BPL","wozADD1","LOOP UNTIL DONE.")                                   #
        self.emit.createcode("RTS","","RETURN")                                                    #
        # entry point of MD1
        self.emit.createcode("ASL","SIGN","CLEAR LSB OF SIGN",name="wozMD1")                       #
        self.emit.createcode("JSR","wozABSWAP","ABS VAL OF MANT1, THEN SWAP MANT2")                   #
        self.emit.createcode("BIT","M1","MANT1 NEG?",name="wozABSWAP")                             #
        self.emit.createcode("BPL","wozABSWP1","NO,SWAP WITH MANT2 AND RETURN")                    #
        self.emit.createcode("JSR","wozFCOMPL","YES, COMPLIMENT IT.")                              #
        self.emit.createcode("INC","SIGN","INCR SIGN, COMPLEMENTING LSB")                          #
        self.emit.createcode("SEC","","SET CARRY FOR RETURN TO MUL/DIV",name="wozABSWP1")             #
        self.emit.createcode("","","*")
        self.emit.createcode("","","*     SWAP EXP/MANT1 WITH EXP/MANT2")
        self.emit.createcode("","","*")
        #
        # SWAP: SWAP A BYTE OF EXP/MANT1 WITH EXP/MANT2 AND LEAVE A COPY OF MANT1 IN E(3BYTES). E+3 USED.
        #
        self.emit.createcode("LDX","=$04","INDEX FOR 4-BYTE SWAP.",name="wozSWAP")                 #
        self.emit.createcode("STY","E-1,X",name="wozSWAP1")                                        #
        self.emit.createcode("LDA","X1-1,X","SWAP A BYTE OF EXP/MANT1 WITH")                       #
        self.emit.createcode("LDY","X2-1,X","EXP/MANT2 AND LEAVEA COPY OF")                        #
        self.emit.createcode("STY","X1-1,X","MANT1 IN E(3BYTES). E+3 USED.")                       #
        self.emit.createcode("STA","X2-1,X")                                                       #
        self.emit.createcode("DEX","","ADVANCE INDEX TO NEXT BYTE")                                #
        self.emit.createcode("BNE","wozSWAP1","LOOP UNTIL DONE.")                                  #
        self.emit.createcode("RTS")                                                                #
        #
        # FLOAT
        #
        self.emit.createcode("","","*")
        self.emit.createcode("","","*")
        self.emit.createcode("","","*")
        self.emit.createcode("","","*     CONVERT 16 BIT INTEGER IN M1(HIGH) AND M1+1(LOW) TO F.P.")
        self.emit.createcode("","","*     RESULT IN EXP/MANT1.  EXP/MANT2 UNEFFECTED")
        self.emit.createcode("","","*")
        self.emit.createcode("","","*")
        self.emit.createcode("LDA","=$8E",name="wozFLOAT")
        self.emit.createcode("STA","X1","SET EXPN TO 14 DEC")
        self.emit.createcode("LDA","=0", "CLEAR LOW ORDER BYTE")
        self.emit.createcode("STA","M1+2")
        self.emit.createcode("BEQ","wozNORM","NORMALIZE RESULT")
        #
        # NORM Normalize Value in FP1 (EXP/MANT1) Value in FP1 is normalized on exit
        #
        self.emit.createcode("DEC","X1","DECREMENT EXP1",name="wozNORM1")
        self.emit.createcode("ASL","M1+2")
        self.emit.createcode("ROL","M1+1","SHIFT MANT1 (3 BYTES) LEFT")
        self.emit.createcode("ROL","M1")
        self.emit.createcode("LDA","M1","HIGH ORDER MANT1 BYTE",name="wozNORM")
        self.emit.createcode("ASL","","UPPER TWO BITS UNEQUAL?")
        self.emit.createcode("EOR","M1")
        self.emit.createcode("BMI","wozRTS1","YES,RETURN WITH MANT1 NORMALIZED")
        self.emit.createcode("LDA","X1","EXP1 ZERO?")
        self.emit.createcode("BNE","wozNORM1","NO, CONTINUE NORMALIZING")
        self.emit.createcode("RTS","","RETURN",name="wozRTS1")
        #
        #
        # FSUB               EXP/MANT2-EXP/MANT1 RESULT IN EXP/MANT1"
        #
        self.emit.createcode("","","*")
        self.emit.createcode("","","*")
        self.emit.createcode("","","*     EXP/MANT2-EXP/MANT1 RESULT IN EXP/MANT1")
        self.emit.createcode("","","*")
        #
        self.emit.createcode("JSR","wozFCOMPL","CMPL MANT1 CLEARS CARRY UNLESS ZERO",name="wozFSUB")
        self.emit.createcode("JSR","wozALGNSW","RIGHT SHIFT MANT1 OR SWAP WITH MANT2 ON CARRY",name="wozSWPALG") #
        #
        #  FADD               EXP/MANT2-EXP/MANT1 RESULT IN EXP/MANT1"
        #
        self.emit.createcode("","","*")
        self.emit.createcode("","","*     ADD EXP/MANT1 AND EXP/MANT2 RESULT IN EXP/MANT1")
        self.emit.createcode("","","*")
        self.emit.createcode("LDA","X2",name="wozFADD")                                                          #
        self.emit.createcode("CMP","X1","COMPARE EXP1 WITH EXP2")                                                #
        self.emit.createcode("BNE","wozSWPALG","IF UNEQUAL, SWAP ADDENDS OR ALIGN MANTISSAS")                    #
        self.emit.createcode("JSR","wozADD","ADD ALIGNED MANTISSAS")                                             #
        self.emit.createcode("BVC","wozNORM","NO OVERFLOW, NORMALIZE RESULTS",name="wozADDEND")                  #
        self.emit.createcode("BVS","wozRTLOG","OV: SHIFT MANT1 RIGHT. NOTE CARRY IS CORRECT SIGN")               #
        self.emit.createcode("BCC","wozSWAP","SWAP IF CARRY CLEAR, ELSE SHIFT RIGHT ARITH.",name="wozALGNSW")    #
        self.emit.createcode("LDA","M1","SIGN OF MANT1 INTO CARRY FOR",name="wozRTAR")                           #
        self.emit.createcode("ASL","","RIGHT ARITH SHIFT")
        self.emit.createcode("INC","X1","INCR EXP1 TO COMPENSATE FOR RT SHIFT",name="wozRTLOG")
        self.emit.createcode("BEQ","wozOVFL","EXP1 OUT OF RANGE.")
        self.emit.createcode("LDX","=$FA", "INDEX FOR 6 BYTE RIGHT SHIFT",name="wozRTLOG1")
        self.emit.createcode("LDA", "=$80", name="wozROR1")
        self.emit.createcode("BCS","wozROR2")
        self.emit.createcode("ASL")
        self.emit.createcode("LSR","E+3,X","SIMULATE ROR E+3,X", name="wozROR2")
        self.emit.createcode("ORA","E+3,X")
        self.emit.createcode("STA","E+3,X")
        self.emit.createcode("INX","","NEXT BYTE OF SHIFT")
        self.emit.createcode("BNE","wozROR1","LOOP UNTIL DONE")
        self.emit.createcode("RTS","", "RETURN")
        self.emit.createcode("","","*")
        self.emit.createcode("","","*")
        self.emit.createcode("","","*     EXP/MANT1 X EXP/MANT2 RESULT IN EXP/MANT1")
        self.emit.createcode("","","*")
        #
        # FMUL
        #
        self.emit.createcode("JSR","wozMD1","ABS. VAL OF MANT1, MANT2",name="wozFMUL")                       #
        self.emit.createcode("ADC","X1","ADD EXP1 TO EXP2 FOR PRODUCT EXPONENT")                             #
        self.emit.createcode("JSR","wozMD2","CHECK PRODUCT EXP AND PREPARE FOR MUL")                         #
        self.emit.createcode("CLC","","CLEAR CARRY")                                                         #
        self.emit.createcode("JSR","wozRTLOG1","MANT1 AND E RIGHT.(PRODUCT AND MPLIER)",name="wozMUL1")      #
        self.emit.createcode("BCC","wozMUL2","IF CARRY CLEAR, SKIP PARTIAL PRODUCT")                         #
        self.emit.createcode("JSR","wozADD","ADD MULTIPLICAN TO PRODUCT")                                    #
        self.emit.createcode("DEY","", "NEXT MUL ITERATION",name="wozMUL2")                                  #
        self.emit.createcode("BPL","wozMUL1","LOOP UNTIL DONE")                                              #
        self.emit.createcode("LSR","SIGN","TEST SIGN (EVEN/ODD)",name="wozMDEND")                            #
        self.emit.createcode("BCC","wozNORM","IF EXEN, NORMALIZE PRODUCT, ELSE COMPLEMENT",name="wozNORMX")  #
        self.emit.createcode("SEC","","SET CARRY FOR SUBTRACT",name="wozFCOMPL")                             #
        self.emit.createcode("LDX","=$03","INDEX FOR 3 BYTE SUBTRACTION")                                    #
        self.emit.createcode("LDA", "=$00","CLEAR A",name="wozCOMPL1")                                       #
        self.emit.createcode("SBC", "X1,X","SUBTRACT BYTE OF EXP1")                                          #
        self.emit.createcode("STA", "X1,X", "RESTORE IT")                                                    #
        self.emit.createcode("DEX","","NEXT MORE SIGNIFICANT BYTE")                                          #
        self.emit.createcode("BNE","wozCOMPL1","LOOP UNTIL DONE")                                            #
        self.emit.createcode("BEQ","wozADDEND","NORMALIZE (OR SHIFT RIGHT IF OVERFLOW)")                     #
        self.emit.createcode("","","*")
        self.emit.createcode("","","*")
        self.emit.createcode("","","*     EXP/MANT2 / EXP/MANT1 RESULT IN EXP/MANT1")
        self.emit.createcode("","","*")
        #
        # FDIV
        #
        self.emit.createcode("JSR","wozMD1","TAKE ABS VAL OF MANT1, MANT2",name="wozFDIV")
        self.emit.createcode("SBC","X1","SUBTRACT EXP1 FROM EXP2")
        self.emit.createcode("JSR","wozMD2","SAVE AS QUOTIENT EXP")
        self.emit.createcode("SEC","","SET CARRY FOR SUBTRACT",name="wozDIV1")
        self.emit.createcode("LDX","=$02","INDEX FOR 3-BYTE INSTRUCTION")
        self.emit.createcode("LDA","M2,X",name="wozDIV2")
        self.emit.createcode("SBC","E,X","SUBTRACT A BYTE OF E FROM MANT2")
        self.emit.createcode("PHA","","SAVE ON STACK")
        self.emit.createcode("DEX","","NEXT MORE SIGNIF BYTE")
        self.emit.createcode("BPL","wozDIV2","LOOP UNTIL DONE")
        self.emit.createcode("LDX","=$FD","INDEX FOR 3-BYTE CONDITIONAL MOVE")
        self.emit.createcode("PLA","","PULL A BYTE OF DIFFERENCE OFF STACK",name="wozDIV3")
        self.emit.createcode("BCC","wozDIV4","IF MANT2<E THEN DONT RESTORE MANT2")
        self.emit.createcode("STA","M2+3,X")
        self.emit.createcode("INX","","NEXT LESS SIGNIF BYTE",name="wozDIV4")
        self.emit.createcode("BNE","wozDIV3","LOOP UNTIL DONE")
        self.emit.createcode("ROL","M1+2")
        self.emit.createcode("ROL","M1+1","ROLL QUOTIENT LEFT, CARRY INTO LSB")
        self.emit.createcode("ROL","M1")
        self.emit.createcode("ASL","M2+2")
        self.emit.createcode("ROL","M2+1","SHIFT DIVIDEND LEFT")
        self.emit.createcode("ROL","M2")
        self.emit.createcode("BCS","wozOVFL","OVERFLOW IS DUE TO UNNORMALIZED DIVISOR")
        self.emit.createcode("DEY","","NEXT DIVIDE ITERATION")
        self.emit.createcode("BNE","wozDIV1","LOOP UNTIL DONE 23 ITERATIONS")
        self.emit.createcode("BEQ","wozMDEND","NORMALIZE QUOTIENT AND CORRECT SIGN")
        self.emit.createcode("STX","M1+2",name="wozMD2")
        self.emit.createcode("STX","M1+1","CLR MANT1 (3 BYTES) FOR MUL/DIV")
        self.emit.createcode("STX","M1")
        self.emit.createcode("BCS","wozOVCHK","IF EXP CALC SET CARRY, CHECK FOR OVFL")
        self.emit.createcode("BMI","wozMD3","IF NEG NO UNDERFLOW")
        self.emit.createcode("PLA","","POP ONE")
        self.emit.createcode("PLA","","RETURN LEVEL")
        self.emit.createcode("BCC","wozNORMX","CLEAR X1 AND RETURN")
        self.emit.createcode("EOR","=$80","COMPLIMENT SIGN BIT OF EXP",name="wozMD3")
        self.emit.createcode("STA","X1","STORE IT")
        self.emit.createcode("LDY","=$17","COUNT FOR 24 MUL OR 23 DIV ITERATIONS")
        self.emit.createcode("RTS","","RETURN")
        self.emit.createcode("BPL","wozMD3","IF POS EXP THEN NO OVERFLOW",name="wozOVCHK")
        self.emit.createcode("BRK",name="wozOVFL")
        #
        # FIX
        #
        self.emit.createcode("","","*")
        self.emit.createcode("","","*")
        self.emit.createcode("","","*     CONVERT EXP/MANT1 TO INTEGER IN M1 (HIGH) AND M1+1(LOW)")
        self.emit.createcode("","","*      EXP/MANT2 UNEFFECTED")
        self.emit.createcode("","","*")
        self.emit.createcode("JSR", "wozRTAR", "SHIFT MANT1 RT AND INCREMENT EXPNT",name="wozfixloop1")
        self.emit.createcode("LDA", "X1", "CHECK EXPONENT",name="wozFIX")
        self.emit.createcode("CMP", "=$8E", "IS EXPONENT 14?")
        self.emit.createcode("BNE", "wozfixloop1", "NO, SHIFT")
        self.emit.createcode("RTS", "", "RETURN", name="wozRTRN")

    def endasm(self):
        self.emit.insertinline("LABEL", "LASTBYTEINPROG", 0)
        self.emit.insertinline(".ASCIIZ","\"ENDPROGRAM\"",0,name="endofprogram")
        self.emit.insertinline("word", "$EDFE", 0)
        self.emit.insertinline("word", "$DEC0", 0)
        self.emit.insertinline("org", "$FFFA", 0)
        self.emit.insertinline("LABEL", "pNMIstart", 0)
        self.emit.insertinline("word", "NMIstart", 0)
        self.emit.insertinline("LABEL", "pProgstart",0)
        self.emit.insertinline("word", "programstart", 0)
        self.emit.insertinline("LABEL", "pIRQstart", 0)
        self.emit.insertinline("word", "IRQstart", 0)

    def kimath(self):
        self.emit.createcode("","","")
        self.emit.createcode("","","")
        self.emit.createcode("","","   kimath routines -- 6502 assembler source code for MOS Technology")
        self.emit.createcode("","","                   floating point package.")
        self.emit.createcode("","","")
        self.emit.createcode("","","")
        self.emit.createcode("","","                   .title KIMATH ROUTINES, MOS Technology")
        self.emit.createcode("=", "17", "#len .equ 17", name="kima_len")
        self.emit.createcode("=", "1", "#xy  .equ $01", name="kima_xy")
        self.emit.createcode("=", "2", "#xz  .equ $02", name="kima_xz")
        self.emit.createcode("=", "3", "#xm  .equ $03", name="kima_xm")
        self.emit.createcode("=", "4", "#xn  .equ $04", name="kima_xn")
        self.emit.createcode("=", "$10", "#yx  .equ $10", name="kima_yx")
        self.emit.createcode("=", "$12", "#yz  .equ $12", name="kima_yz")
        self.emit.createcode("=", "$13", "#ym  .equ $13", name="kima_ym")
        self.emit.createcode("=", "$14", "#yn  .equ $14", name="kima_yn")
        self.emit.createcode("=", "$20", "#zx  .equ $20", name="kima_zx")
        self.emit.createcode("=", "$21", "#zy  .equ $21", name="kima_zy")
        self.emit.createcode("=", "$23", "#zm  .equ $23", name="kima_zm")
        self.emit.createcode("=", "$24", "#zn  .equ $24", name="kima_zn")
        self.emit.createcode("=", "$30", "#mx  .equ $30", name="kima_mx")
        self.emit.createcode("=", "$31", "#my  .equ $31", name="kima_my")
        self.emit.createcode("=", "$32", "#mz  .equ $32", name="kima_mz")
        self.emit.createcode("=", "$34", "#mn  .equ $34", name="kima_mn")
        self.emit.createcode("=", "$40", "#nx  .equ $40", name="kima_nx")
        self.emit.createcode("=", "$41", "#ny  .equ $41", name="kima_ny")
        self.emit.createcode("=", "$42", "#nz  .equ $42", name="kima_nz")
        self.emit.createcode("=", "$43", "#nm  .equ $43", name="kima_nm")
        self.emit.createcode("","","    .org $0")
        if not self.kimathzeropage:
            self.emit.createcode("=","_scratchregister_0",  "n       .ds 1",name="kima_n")
            self.emit.createcode("=","_scratchregister_1",  "nkon    .ds 1",name="kima_nkon")
            self.emit.createcode("=","_scratchregister_2",  "j       .ds 1",name="kima_j")
            self.emit.createcode("=","_scratchregister_3",  "cnt     .ds 1",name="kima_cnt")
            self.emit.createcode("=","_scratchregister_4",  "length    *=*",name="kima_length")
            self.emit.createcode("=","_scratchregister_4",  "cnta    .ds 1",name="kima_cnta")
            self.emit.createcode("=","_scratchregister_5",  "deg     .ds 1",name="kima_deg")
            self.emit.createcode("=","_scratchregister_6",  "argxl   .ds 1",name="kima_argxl")
            self.emit.createcode("=","_scratchregister_7",  "argxh   .ds 1",name="kima_argxh")
            self.emit.createcode("=","_scratchregister_8",  "argyl   .ds 1",name="kima_argyl")
            self.emit.createcode("=","_scratchregister_9",  "argyh   .ds 1",name="kima_argyh")
            self.emit.createcode("=","_scratchregister_10", "res     .ds 1",name="kima_res")
            self.emit.createcode("=","_scratchregister_10", "resl    .ds 1",name="kima_resl")
            self.emit.createcode("=","_scratchregister_11", "resh    .ds 1",name="kima_resh")
            self.emit.createcode("=","_scratchregister_12", "ptr     .ds 2",name="kima_ptr")
            self.emit.createcode("=","_scratchregister_14", "kon     .ds 1", name="kima_kon")
            self.emit.createcode("=","_scratchregister_14", "konl    .equ kon", name="kima_konl")
            self.emit.createcode("=","_scratchregister_15", "konh    .ds 1", name="kima_konh")
            self.emit.createcode("=","_zpscratch_0", "prec    .ds 1", name="kima_prec")
            self.emit.createcode("=","_zpscratch_1", "extra   .ds 1", name="kima_extra")
            self.emit.createcode("=","_zpscratch_2", "temp    .ds 1", name="kima_temp")
            self.emit.createcode("=","_zpscratch_3", "temp1   .ds 1", name="kima_temp1")
            self.emit.createcode("=","_zpscratch_4", "overr   .ds 1", name="kima_overr")
            self.emit.createcode("=","_zpscratch_5", "tmpx    .ds 1", name="kima_tmpx")
            self.emit.createcode("=","_zpscratch_6", "tmpy    .ds 1", name="kima_tmpy")
        self.emit.createcode("","","    #    .org $200")
        # the following definitions are made at the beginning during creating zero-page, and normal, variables
        #ra      .ds len+1
        #rb      .ds len+1
        #rq      .ds len
        #rx      .ds len
        #sx      .equ rx
        #ex      .ds 1
        #ry      .ds len
        #sy      .equ ry
        #ey      .ds 1
        #rz      .ds len
        #sz      .equ rz
        #ez      .ds 1
        #rm      .ds len+1
        #rn      .ds len+1
        #ramcod  .ds 3
        #rama    .ds 3
        #ramb    .ds 5
        # starting code section from here, this code is automatically converted from kimath.asm with the python
        # routine "convert_asm.py" here. See the code in convert_asm.py for more information.
        self.emit.createcode("","","    .org $f800")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Floating point add/subtract routine.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("lda", "kima_sy", "sub     lda sy", name="kima_sub")
        self.emit.createcode("eor", "#$80", "        eor #$80")
        self.emit.createcode("sta", "kima_sy", "        sta sy")
        self.emit.createcode("lda", "kima_sx", "add     lda sx", name="kima_add")
        self.emit.createcode("eor", "kima_sy", "        eor sy")
        self.emit.createcode("sta", "kima_temp", "        sta temp")
        self.emit.createcode("sed", "", "        sed")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Clear working storage.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("jsr", "kima_clear", "        jsr clear")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Test rx for zero.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("jsr", "kima_xztst", "        jsr xztst")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Test ry for zero.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("beq", "kima_add2", "        beq add2")
        self.emit.createcode("jsr", "kima_yztst", "        jsr yztst")
        self.emit.createcode("beq", "kima_add3", "        beq add3")
        self.emit.createcode("bit", "kima_temp", "        bit temp")
        self.emit.createcode("bvc", "kima_add6", "        bvc add6")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   If the signs of the exponents")
        self.emit.createcode("", "", ";   differ then swap rx and ry.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("bit", "kima_sx", "add1    bit sx", name="kima_add1")
        self.emit.createcode("bvc", "kima_add3", "        bvc add3")
        self.emit.createcode("jsr", "kima_xsy", "add2    jsr xsy", name="kima_add2")
        self.emit.createcode("sed", "", "add3    sed", name="kima_add3")
        self.emit.createcode("bit", "kima_temp", "        bit temp")
        self.emit.createcode("bvs", "kima_add31", "        bvs add31")
        self.emit.createcode("jmp", "kima_add9", "        jmp add9")
        self.emit.createcode("lda", "kima_ex", "add31   lda ex", name="kima_add31")
        self.emit.createcode("clc", "", "        clc")
        self.emit.createcode("adc", "kima_ey", "        adc ey")
        self.emit.createcode("bcs", "kima_add5", "        bcs add5")
        self.emit.createcode("sta", "kima_cnt", "add4    sta cnt", name="kima_add4")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Compute the hex value of the")
        self.emit.createcode("", "", ";   bcd difference of the exponents.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("jsr", "kima_dechex", "        jsr dechex")
        self.emit.createcode("cmp", "kima_n", "        cmp n")
        self.emit.createcode("bcs", "kima_add5", "        bcs add5")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Move ry to rb.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("jsr", "kima_rbery", "        jsr rbery")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Align decimal points.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("jsr", "kima_rsbcnt", "        jsr rsbcnt")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Round rb off.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("jsr", "kima_rboff", "        jsr rboff")
        self.emit.createcode("lda", "kima_ex", "add5    lda ex", name="kima_add5")
        self.emit.createcode("sta", "kima_ez", "        sta ez")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Move rx to ra.")
        self.emit.createcode("", "", ";       ")
        self.emit.createcode("jsr", "kima_raerx", "        jsr raerx")
        self.emit.createcode("bit", "kima_temp", "        bit temp")
        self.emit.createcode("bmi", "kima_add13", "        bmi add13")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Add rb to ra.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("jsr", "kima_raprb", "        jsr raprb")
        self.emit.createcode("lda", "kima_ra", "        lda ra")
        self.emit.createcode("beq", "kima_add120", "        beq add120")
        self.emit.createcode("jsr", "kima_rsra", "        jsr rsra")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Correct sign and exponent")
        self.emit.createcode("", "", ";")
        self.emit.createcode("lda", "kima_ex", "        lda ex")
        self.emit.createcode("sec", "", "        sec")
        self.emit.createcode("bit", "kima_sx", "        bit sx")
        self.emit.createcode("bvc", "kima_add110", "        bvc add110")
        self.emit.createcode("sbc", "#1", "        sbc #1")
        self.emit.createcode("sta", "kima_ez", "        sta ez")
        self.emit.createcode("bne", "kima_add120", "        bne add120")
        self.emit.createcode("lda", "#$bf", "        lda #$bf")
        self.emit.createcode("and", "kima_sx", "        and sx")
        self.emit.createcode("jmp", "kima_add12", "        jmp add12")
        self.emit.createcode("lda", "kima_sx", "add120  lda sx", name="kima_add120")
        self.emit.createcode("sta", "kima_sz", "add12   sta sz", name="kima_add12")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Move ra to rz.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("jsr", "kima_rzera", "add121  jsr rzera", name="kima_add121")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("adc", "#0", "add110  adc #0", name="kima_add110")
        self.emit.createcode("sta", "kima_ez", "        sta ez")
        self.emit.createcode("bcc", "kima_add120", "        bcc add120")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Set rz = 9.9...9e99")
        self.emit.createcode("", "", ";")
        self.emit.createcode("jsr", "kima_infin", "        jsr infin")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Compare abs(rx) to abs(ry)")
        self.emit.createcode("", "", ";")
        self.emit.createcode("jsr", "kima_compxy", "add6    jsr compxy", name="kima_add6")
        self.emit.createcode("lda", "kima_cnta", "        lda cnta")
        self.emit.createcode("beq", "kima_add8", "        beq add8")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Swap rx and ry,")
        self.emit.createcode("", "", ";   so that rx has the")
        self.emit.createcode("", "", ";   largest abs. value.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("jsr", "kima_xsy", "add7    jsr xsy", name="kima_add7")
        self.emit.createcode("lda", "kima_ex", "add8    lda ex", name="kima_add8")
        self.emit.createcode("cmp", "kima_ey", "        cmp ey")
        self.emit.createcode("beq", "kima_add81", "        beq add81")
        self.emit.createcode("bcc", "kima_add7", "        bcc add7")
        self.emit.createcode("jmp", "kima_add1", "        jmp add1")
        self.emit.createcode("jmp", "kima_add3", "add81   jmp add3", name="kima_add81")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Compute the absolute value")
        self.emit.createcode("", "", ";   of the signed difference of")
        self.emit.createcode("", "", ";   the exponents.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("sec", "", "add9    sec", name="kima_add9")
        self.emit.createcode("bit", "kima_sx", "        bit sx")
        self.emit.createcode("bvs", "kima_add10", "        bvs add10")
        self.emit.createcode("lda", "kima_ex", "        lda ex")
        self.emit.createcode("sbc", "kima_ey", "        sbc ey")
        self.emit.createcode("jmp", "kima_add4", "        jmp add4")
        self.emit.createcode("lda", "kima_ey", "add10   lda ey", name="kima_add10")
        self.emit.createcode("sbc", "kima_ex", "        sbc ex")
        self.emit.createcode("jmp", "kima_add4", "        jmp add4")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Subtract rb from ra.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("jsr", "kima_ramrb", "add13   jsr ramrb", name="kima_add13")
        self.emit.createcode("lda", "kima_ex", "        lda ex")
        self.emit.createcode("sta", "kima_ez", "        sta ez")
        self.emit.createcode("lda", "kima_sx", "        lda sx")
        self.emit.createcode("sta", "kima_sz", "        sta sz")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Test ra for zero.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("jsr", "kima_aztst", "        jsr aztst")
        self.emit.createcode("beq", "kima_add18", "        beq add18")
        self.emit.createcode("lda", "kima_ra+1", "add15   lda ra+1", name="kima_add15")
        self.emit.createcode("bne", "kima_add121", "        bne add121")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   If ra+1 is zero then")
        self.emit.createcode("", "", ";   left shift ra one digit.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("jsr", "kima_lsra", "        jsr lsra")
        self.emit.createcode("bit", "kima_sz", "add17   bit sz", name="kima_add17")
        self.emit.createcode("sec", "", "        sec")
        self.emit.createcode("lda", "kima_ez", "        lda ez")
        self.emit.createcode("bvc", "kima_add20", "        bvc add20")
        self.emit.createcode("adc", "#0", "        adc #0")
        self.emit.createcode("sta", "kima_ez", "        sta ez")
        self.emit.createcode("bcc", "kima_add15", "        bcc add15")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Set rz equal to zero.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("jsr", "kima_clrz", "add18   jsr clrz", name="kima_add18")
        self.emit.createcode("rts", "", "add19   rts", name="kima_add19")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Adjust sign and exponent")
        self.emit.createcode("", "", ";   of the answer.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("sbc", "#1", "add20   sbc #1", name="kima_add20")
        self.emit.createcode("sta", "kima_ez", "        sta ez")
        self.emit.createcode("", "", "")
        self.emit.createcode("bcs", "kima_add15", "        bcs add15")
        self.emit.createcode("lda", "#1", "        lda #1")
        self.emit.createcode("sta", "kima_ez", "        sta ez")
        self.emit.createcode("lda", "#$40", "        lda #$40")
        self.emit.createcode("ora", "kima_sz", "        ora sz")
        self.emit.createcode("sta", "kima_sz", "        sta sz")
        self.emit.createcode("jmp", "kima_add15", "        jmp add15")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Floating point product routine.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("sed", "", "mltply  sed", name="kima_mltply")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Clear working storage.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("jsr", "kima_clear", "        jsr clear")
        self.emit.createcode("lda", "#0", "        lda #0")
        self.emit.createcode("sta", "kima_cnt", "        sta cnt")
        self.emit.createcode("sta", "kima_temp1", "        sta temp1")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Test ra for zero.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("jsr", "kima_xztst", "        jsr xztst")
        self.emit.createcode("beq", "kima_mult1", "        beq mult1")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Test ry for zero.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("jsr", "kima_yztst", "        jsr yztst")
        self.emit.createcode("bne", "kima_mult3", "        bne mult3")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Set rz equal to zero.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("jsr", "kima_clrz", "mult1   jsr clrz", name="kima_mult1")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Move ra to rz")
        self.emit.createcode("", "", ";")
        self.emit.createcode("jsr", "kima_rzera", "mult2   jsr rzera", name="kima_mult2")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Move ry to rb.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("jsr", "kima_rbery", "mult3   jsr rbery", name="kima_mult3")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Move rx to rq.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("jsr", "kima_rqerx", "        jsr rqerx")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Form product of mantissas")
        self.emit.createcode("", "", ";")
        self.emit.createcode("jsr", "kima_mlt", "        jsr mlt")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Figure the sign and exponent of")
        self.emit.createcode("", "", ";   of the answer for the multiply")
        self.emit.createcode("", "", ";   and divide routines.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("lda", "kima_sy", "mult4   lda sy", name="kima_mult4")
        self.emit.createcode("eor", "kima_sx", "        eor sx")
        self.emit.createcode("sta", "kima_temp", "        sta temp")
        self.emit.createcode("bit", "kima_temp", "        bit temp")
        self.emit.createcode("lda", "kima_ex", "        lda ex")
        self.emit.createcode("bvs", "kima_md100", "        bvs md100")
        self.emit.createcode("clc", "", "md1     clc", name="kima_md1")
        self.emit.createcode("adc", "kima_ey", "        adc ey")
        self.emit.createcode("bcc", "kima_md2", "        bcc md2")
        self.emit.createcode("bne", "kima_md59", "        bne md59")
        self.emit.createcode("lda", "kima_temp1", "        lda temp1")
        self.emit.createcode("beq", "kima_mdov2", "        beq mdov2")
        self.emit.createcode("bit", "kima_sx", "        bit sx")
        self.emit.createcode("bvs", "kima_md7", "        bvs md7")
        self.emit.createcode("lda", "kima_cnta", "        lda cnta")
        self.emit.createcode("beq", "kima_md61", "        beq md61")
        self.emit.createcode("lda", "#0", "        lda #0")
        self.emit.createcode("sta", "kima_cnta", "        sta cnta")
        self.emit.createcode("lda", "#$99", "mdov1   lda #$99", name="kima_mdov1")
        self.emit.createcode("jmp", "kima_md2", "        jmp md2")
        self.emit.createcode("jmp", "kima_md10", "md100   jmp md10", name="kima_md100")
        self.emit.createcode("bit", "kima_sx", "mdov2   bit sx", name="kima_mdov2")
        self.emit.createcode("bvc", "kima_md61", "        bvc md61")
        self.emit.createcode("lda", "kima_ra", "        lda ra")
        self.emit.createcode("beq", "kima_mdov1", "        beq mdov1")
        self.emit.createcode("jsr", "kima_rsra", "        jsr rsra")
        self.emit.createcode("jmp", "kima_mdov1", "        jmp mdov1")
        self.emit.createcode("sta", "kima_ez", "md2     sta ez", name="kima_md2")
        self.emit.createcode("bne", "kima_md11", "        bne md11")
        self.emit.createcode("lda", "kima_sx", "        lda sx")
        self.emit.createcode("and", "#$bf", "        and #$bf")
        self.emit.createcode("sta", "kima_sz", "md3     sta sz", name="kima_md3")
        self.emit.createcode("lda", "kima_temp", "md4     lda temp", name="kima_md4")
        self.emit.createcode("bmi", "kima_md8", "        bmi md8")
        self.emit.createcode("lda", "#$7f", "        lda #$7f")
        self.emit.createcode("and", "kima_sz", "        and sz")
        self.emit.createcode("sta", "kima_sz", "md5     sta sz", name="kima_md5")
        self.emit.createcode("lda", "kima_temp1", "        lda temp1")
        self.emit.createcode("bne", "kima_divext", "        bne divext")
        self.emit.createcode("lda", "kima_ra", "        lda ra")
        self.emit.createcode("beq", "kima_md51", "        beq md51")
        self.emit.createcode("jsr", "kima_rsra", "        jsr rsra")
        self.emit.createcode("lda", "kima_ez", "        lda ez")
        self.emit.createcode("bit", "kima_sz", "        bit sz")
        self.emit.createcode("bvs", "kima_md9", "        bvs md9")
        self.emit.createcode("clc", "", "        clc")
        self.emit.createcode("adc", "#1", "        adc #1")
        self.emit.createcode("beq", "kima_md6", "        beq md6")
        self.emit.createcode("sta", "kima_ez", "        sta ez")
        self.emit.createcode("jmp", "kima_mult2", "md51    jmp mult2", name="kima_md51")
        self.emit.createcode("lda", "kima_sx", "md59    lda sx", name="kima_md59")
        self.emit.createcode("sta", "kima_sz", "        sta sz")
        self.emit.createcode("bit", "kima_sz", "md6     bit sz", name="kima_md6")
        self.emit.createcode("bvs", "kima_md7", "        bvs md7")
        self.emit.createcode("jsr", "kima_infin", "md61    jsr infin", name="kima_md61")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("jsr", "kima_clrz", "md7     jsr clrz", name="kima_md7")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("lda", "#$80", "md8     lda #$80", name="kima_md8")
        self.emit.createcode("ora", "kima_sz", "        ora sz")
        self.emit.createcode("jmp", "kima_md5", "        jmp md5")
        self.emit.createcode("sec", "", "md10    sec", name="kima_md10")
        self.emit.createcode("sbc", "kima_ey", "        sbc ey")
        self.emit.createcode("bcs", "kima_md2", "        bcs md2")
        self.emit.createcode("sec", "", "        sec")
        self.emit.createcode("lda", "kima_ey", "        lda ey")
        self.emit.createcode("sbc", "kima_ex", "        sbc ex")
        self.emit.createcode("sta", "kima_ez", "        sta ez")
        self.emit.createcode("lda", "kima_sy", "        lda sy")
        self.emit.createcode("jmp", "kima_md3", "        jmp md3")
        self.emit.createcode("lda", "kima_sx", "md11    lda sx", name="kima_md11")
        self.emit.createcode("jmp", "kima_md3", "        jmp md3")
        self.emit.createcode("lda", "kima_cnta", "divext  lda cnta", name="kima_divext")
        self.emit.createcode("beq", "kima_md51", "        beq md51")
        self.emit.createcode("bit", "kima_sz", "dvext0  bit sz", name="kima_dvext0")
        self.emit.createcode("lda", "kima_ez", "        lda ez")
        self.emit.createcode("sec", "", "        sec")
        self.emit.createcode("bvc", "kima_dvext2", "        bvc dvext2")
        self.emit.createcode("adc", "#0", "        adc #0")
        self.emit.createcode("beq", "kima_md6", "        beq md6")
        self.emit.createcode("sta", "kima_ez", "dvext1  sta ez", name="kima_dvext1")
        self.emit.createcode("jmp", "kima_mult2", "        jmp mult2")
        self.emit.createcode("beq", "kima_dvext3", "dvext2  beq dvext3", name="kima_dvext2")
        self.emit.createcode("sbc", "#1", "        sbc #1")
        self.emit.createcode("jmp", "kima_dvext1", "        jmp dvext1")
        self.emit.createcode("lda", "kima_sz", "dvext3  lda sz", name="kima_dvext3")
        self.emit.createcode("ora", "#$40", "        ora #$40")
        self.emit.createcode("sta", "kima_sz", "        sta sz")
        self.emit.createcode("jmp", "kima_dvext0", "        jmp dvext0")
        self.emit.createcode("sec", "", "md9     sec", name="kima_md9")
        self.emit.createcode("sbc", "#1", "        sbc #1")
        self.emit.createcode("beq", "kima_md22", "        beq md22")
        self.emit.createcode("sta", "kima_ez", "        sta ez")
        self.emit.createcode("jmp", "kima_mult2", "        jmp mult2")
        self.emit.createcode("jmp", "kima_md2", "md22    jmp md2", name="kima_md22")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Floating point divide routine")
        self.emit.createcode("", "", ";")
        self.emit.createcode("sed", "", "divide  sed", name="kima_divide")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Test ry for zero.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("jsr", "kima_yztst", "        jsr yztst")
        self.emit.createcode("beq", "kima_md61", "        beq md61")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Test rx for zero.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("jsr", "kima_xztst", "        jsr xztst")
        self.emit.createcode("beq", "kima_md7", "        beq md7")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Clear working storage.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("jsr", "kima_clear", "        jsr clear")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Move rx to ra.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("jsr", "kima_raerx", "        jsr raerx")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   move ry to rb.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("jsr", "kima_rbery", "        jsr rbery")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Compare rx to ry")
        self.emit.createcode("", "", ";")
        self.emit.createcode("jsr", "kima_compxy", "        jsr compxy")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Form quotient.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("jsr", "kima_div", "        jsr div")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Compute sign and exponent of answer.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("lda", "#1", "div6    lda #1", name="kima_div6")
        self.emit.createcode("sta", "kima_temp1", "        sta temp1")
        self.emit.createcode("lda", "kima_sy", "        lda sy")
        self.emit.createcode("eor", "#$40", "        eor #$40")
        self.emit.createcode("sta", "kima_sy", "        sta sy")
        self.emit.createcode("jsr", "kima_raerq", "        jsr raerq")
        self.emit.createcode("lda", "kima_ra+1", "        lda ra+1")
        self.emit.createcode("bne", "kima_div7", "        bne div7")
        self.emit.createcode("jsr", "kima_lsra", "        jsr lsra")
        self.emit.createcode("jsr", "kima_mult4", "div7    jsr mult4", name="kima_div7")
        self.emit.createcode("lda", "kima_sy", "        lda sy")
        self.emit.createcode("eor", "#$40", "        eor #$40")
        self.emit.createcode("sta", "kima_sy", "        sta sy")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   This routine computes the")
        self.emit.createcode("", "", ";   product of the mantissas")
        self.emit.createcode("", "", ";   of the arguments by repeated")
        self.emit.createcode("", "", ";   addition. The result is built")
        self.emit.createcode("", "", ";   in ra.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("lda", "kima_n", "mlt     lda n", name="kima_mlt")
        self.emit.createcode("sta", "kima_j", "        sta j")
        self.emit.createcode("dec", "kima_j", "        dec j")
        self.emit.createcode("ldx", "kima_j", "mlt0    ldx j", name="kima_mlt0")
        self.emit.createcode("lda", "kima_rq,x", "        lda rq,x")
        self.emit.createcode("sta", "kima_cnt", "        sta cnt")
        self.emit.createcode("dec", "kima_cnt", "mlt1    dec cnt", name="kima_mlt1")
        self.emit.createcode("bmi", "kima_mlt2", "        bmi mlt2")
        self.emit.createcode("jsr", "kima_raprb", "        jsr raprb")
        self.emit.createcode("jmp", "kima_mlt1", "        jmp mlt1")
        self.emit.createcode("jsr", "kima_rsra", "mlt2    jsr rsra", name="kima_mlt2")
        self.emit.createcode("dec", "kima_j", "        dec j")
        self.emit.createcode("bpl", "kima_mlt0", "        bpl mlt0")
        self.emit.createcode("jsr", "kima_lsra", "        jsr lsra")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   This routine computes the")
        self.emit.createcode("", "", ";   quotient of ra and rb by")
        self.emit.createcode("", "", ";   repeated subtraction. The")
        self.emit.createcode("", "", ";   result is built in rq.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("lda", "#0", "div     lda #0", name="kima_div")
        self.emit.createcode("sta", "kima_j", "        sta j")
        self.emit.createcode("lda", "#0", "div0    lda #0", name="kima_div0")
        self.emit.createcode("sta", "kima_cnt", "        sta cnt")
        self.emit.createcode("jsr", "kima_ramrb", "div1    jsr ramrb", name="kima_div1")
        self.emit.createcode("bcc", "kima_div2", "        bcc div2")
        self.emit.createcode("inc", "kima_cnt", "        inc cnt")
        self.emit.createcode("bne", "kima_div1", "        bne div1")
        self.emit.createcode("jsr", "kima_raprb", "div2    jsr raprb", name="kima_div2")
        self.emit.createcode("jsr", "kima_lsra", "        jsr lsra")
        self.emit.createcode("ldx", "kima_j", "        ldx j")
        self.emit.createcode("lda", "kima_cnt", "        lda cnt")
        self.emit.createcode("sta", "kima_rq,x", "        sta rq,x")
        self.emit.createcode("inc", "kima_j", "        inc j")
        self.emit.createcode("lda", "kima_j", "        lda j")
        self.emit.createcode("cmp", "kima_n", "        cmp n")
        self.emit.createcode("beq", "kima_div0", "        beq div0")
        self.emit.createcode("bcc", "kima_div0", "        bcc div0")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   This routine computes the")
        self.emit.createcode("", "", ";   square root of a floating point")
        self.emit.createcode("", "", ";   number between 1 and 100 by")
        self.emit.createcode("", "", ";   Heron's method.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("lda", "#7", "sqrt    lda #7", name="kima_sqrt")
        self.emit.createcode("sta", "kima_nkon", "        sta nkon")
        self.emit.createcode("jsr", "kima_mvxn", "        jsr mvxn")
        self.emit.createcode("jsr", "kima_clrz", "        jsr clrz")
        self.emit.createcode("lda", "#7", "        lda #7")
        self.emit.createcode("sta", "kima_rz+1", "        sta rz+1")
        self.emit.createcode("lda", "#8", "        lda #8")
        self.emit.createcode("sta", "kima_rz+2", "        sta rz+2")
        self.emit.createcode("jsr", "kima_mvzm", "        jsr mvzm")
        self.emit.createcode("jsr", "kima_mvmy", "sqrt0   jsr mvmy", name="kima_sqrt0")
        self.emit.createcode("jsr", "kima_mvnx", "        jsr mvnx")
        self.emit.createcode("jsr", "kima_divide", "        jsr divide")
        self.emit.createcode("jsr", "kima_mvzy", "        jsr mvzy")
        self.emit.createcode("jsr", "kima_mvmx", "        jsr mvmx")
        self.emit.createcode("jsr", "kima_add", "        jsr add")
        self.emit.createcode("jsr", "kima_mvzx", "        jsr mvzx")
        self.emit.createcode("jsr", "kima_clry", "        jsr clry")
        self.emit.createcode("lda", "#$40", "        lda #$40")
        self.emit.createcode("sta", "kima_ry", "        sta ry")
        self.emit.createcode("lda", "#5", "        lda #5")
        self.emit.createcode("sta", "kima_ry+1", "        sta ry+1")
        self.emit.createcode("lda", "#1", "        lda #1")
        self.emit.createcode("sta", "kima_ey", "        sta ey")
        self.emit.createcode("jsr", "kima_mltply", "        jsr mltply")
        self.emit.createcode("jsr", "kima_mvzm", "        jsr mvzm")
        self.emit.createcode("dec", "kima_nkon", "        dec nkon")
        self.emit.createcode("bpl", "kima_sqrt0", "        bpl sqrt0")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   This routine computes the")
        self.emit.createcode("", "", ";   common log of a floating point")
        self.emit.createcode("", "", ";   number between sqrt(.1) and sqrt(10).")
        self.emit.createcode("", "", ";")
        self.emit.createcode("lda", "#14", "log     lda #14", name="kima_log")
        self.emit.createcode("sta", "kima_n", "        sta n")
        self.emit.createcode("jsr", "kima_setkon", "        jsr setkon")
        self.emit.createcode("jsr", "kima_mvxn", "        jsr mvxn")
        self.emit.createcode("jsr", "kima_clry", "        jsr clry")
        self.emit.createcode("lda", "#1", "        lda #1")
        self.emit.createcode("sta", "kima_ry+1", "        sta ry+1")
        self.emit.createcode("jsr", "kima_sub", "        jsr sub")
        self.emit.createcode("jsr", "kima_mvnx", "        jsr mvnx")
        self.emit.createcode("jsr", "kima_clry", "        jsr clry")
        self.emit.createcode("lda", "#1", "        lda #1")
        self.emit.createcode("sta", "kima_ry+1", "        sta ry+1")
        self.emit.createcode("jsr", "kima_mvzn", "        jsr mvzn")
        self.emit.createcode("jsr", "kima_add", "        jsr add")
        self.emit.createcode("jsr", "kima_mvzy", "        jsr mvzy")
        self.emit.createcode("jsr", "kima_mvnx", "        jsr mvnx")
        self.emit.createcode("jsr", "kima_divide", "        jsr divide")
        self.emit.createcode("jsr", "kima_mvzn", "        jsr mvzn")
        self.emit.createcode("jsr", "kima_mvzx", "        jsr mvzx")
        self.emit.createcode("jsr", "kima_mvzy", "        jsr mvzy")
        self.emit.createcode("jsr", "kima_mltply", "        jsr mltply")
        self.emit.createcode("lda", "#4", "        lda #4")
        self.emit.createcode("sta", "kima_deg", "        sta deg")
        self.emit.createcode("lda", "#0", "        lda #0")
        self.emit.createcode("sta", "kima_nkon", "logend  sta nkon", name="kima_logend")
        self.emit.createcode("jsr", "kima_poly", "        jsr poly")
        self.emit.createcode("jsr", "kima_mvny", "        jsr mvny")
        self.emit.createcode("jsr", "kima_mvzx", "lgnd0   jsr mvzx", name="kima_lgnd0")
        self.emit.createcode("jsr", "kima_mltply", "        jsr mltply")
        self.emit.createcode("lda", "#0", "chop    lda #0", name="kima_chop")
        self.emit.createcode("ldx", "#kima_len/2-1", "        ldx #len/2-1")
        self.emit.createcode("sta", "kima_rz+9,x", "chop0   sta rz+9,x", name="kima_chop0")
        self.emit.createcode("dex", "", "        dex")
        self.emit.createcode("bpl", "kima_chop0", "        bpl chop0")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   This routine computes the")
        self.emit.createcode("", "", ";   common anti-log of a floating")
        self.emit.createcode("", "", ";   point number between 0 and 1.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("lda", "#12", "tenx    lda #12", name="kima_tenx")
        self.emit.createcode("sta", "kima_n", "        sta n")
        self.emit.createcode("jsr", "kima_setkon", "        jsr setkon")
        self.emit.createcode("jsr", "kima_mvxz", "        jsr mvxz")
        self.emit.createcode("lda", "#6", "        lda #6")
        self.emit.createcode("sta", "kima_deg", "        sta deg")
        self.emit.createcode("lda", "#46", "        lda #46")
        self.emit.createcode("sta", "kima_nkon", "        sta nkon")
        self.emit.createcode("jsr", "kima_poly", "        jsr poly")
        self.emit.createcode("jsr", "kima_mvzy", "        jsr mvzy")
        self.emit.createcode("jmp", "kima_lgnd0", "        jmp lgnd0")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   This routine computes the")
        self.emit.createcode("", "", ";   tangent of a floating point number")
        self.emit.createcode("", "", ";   between 0 and pi/4. NOTE: argument is angle*(4/pi): 0 < arg < 1.0")
        self.emit.createcode("", "", ";")
        self.emit.createcode("lda", "#14", "tanx    lda #14", name="kima_tanx")
        self.emit.createcode("sta", "kima_n", "        sta n")
        self.emit.createcode("jsr", "kima_setkon", "        jsr setkon")
        self.emit.createcode("jsr", "kima_mvxn", "        jsr mvxn")
        self.emit.createcode("jsr", "kima_mvxy", "        jsr mvxy")
        self.emit.createcode("jsr", "kima_mltply", "        jsr mltply")
        self.emit.createcode("jsr", "kima_chop", "        jsr chop")
        self.emit.createcode("lda", "#5", "        lda #5")
        self.emit.createcode("sta", "kima_deg", "        sta deg")
        self.emit.createcode("lda", "#100", "        lda #100")
        self.emit.createcode("jmp", "kima_logend", "        jmp logend")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   This routine computes the")
        self.emit.createcode("", "", ";   arctangent of a floating point number")
        self.emit.createcode("", "", ";   between 0 and 1.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("lda", "#14", "atanx   lda #14", name="kima_atanx")
        self.emit.createcode("sta", "kima_n", "        sta n")
        self.emit.createcode("jsr", "kima_setkon", "        jsr setkon")
        self.emit.createcode("jsr", "kima_mvxn", "        jsr mvxn")
        self.emit.createcode("jsr", "kima_mvxy", "        jsr mvxy")
        self.emit.createcode("jsr", "kima_mltply", "        jsr mltply")
        self.emit.createcode("lda", "#7", "        lda #7")
        self.emit.createcode("sta", "kima_deg", "        sta deg")
        self.emit.createcode("lda", "#156", "        lda #156")
        self.emit.createcode("jmp", "kima_logend", "        jmp logend")
        self.emit.createcode("", "", "         ")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Left shift ra one digit.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("ldx", "#0", "lsra    ldx #0", name="kima_lsra")
        self.emit.createcode("lda", "kima_ra+1,x", "lsra0   lda ra+1,x", name="kima_lsra0")
        self.emit.createcode("sta", "kima_ra,x", "        sta ra,x")
        self.emit.createcode("inx", "", "        inx")
        self.emit.createcode("cpx", "kima_n", "        cpx n")
        self.emit.createcode("bcc", "kima_lsra0", "        bcc lsra0")
        self.emit.createcode("", "", "")
        self.emit.createcode("beq", "kima_lsra0", "        beq lsra0")
        self.emit.createcode("lda", "#0", "        lda #0")
        self.emit.createcode("sta", "kima_ra,x", "        sta ra,x")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Right shift ra one digit.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("ldx", "kima_n", "rsra    ldx n", name="kima_rsra")
        self.emit.createcode("dex", "", "        dex")
        self.emit.createcode("lda", "kima_ra,x", "rsra0   lda ra,x", name="kima_rsra0")
        self.emit.createcode("sta", "kima_ra+1,x", "        sta ra+1,x")
        self.emit.createcode("dex", "", "        dex")
        self.emit.createcode("bpl", "kima_rsra0", "        bpl rsra0")
        self.emit.createcode("lda", "#0", "        lda #0")
        self.emit.createcode("sta", "kima_ra", "        sta ra")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Clear working storage.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("ldx", "#kima_len*3+1", "clear   ldx #len*3+1", name="kima_clear")
        self.emit.createcode("lda", "#0", "        lda #0")
        self.emit.createcode("sta", "kima_ra,x", "az0     sta ra,x", name="kima_az0")
        self.emit.createcode("dex", "", "        dex")
        self.emit.createcode("bpl", "kima_az0", "        bpl az0")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Convert the contents of cnt")
        self.emit.createcode("", "", ";   from bcd to hex and store the")
        self.emit.createcode("", "", ";   result in cnt.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("sed", "", "dechex  sed", name="kima_dechex")
        self.emit.createcode("ldx", "#0", "        ldx #0")
        self.emit.createcode("sec", "", "        sec")
        self.emit.createcode("lda", "kima_cnt", "dhcnv1  lda cnt", name="kima_dhcnv1")
        self.emit.createcode("sbc", "#$16", "        sbc #$16")
        self.emit.createcode("bcc", "kima_dhcnv2", "        bcc dhcnv2")
        self.emit.createcode("sta", "kima_cnt", "        sta cnt")
        self.emit.createcode("inx", "", "        inx")
        self.emit.createcode("jmp", "kima_dhcnv1", "        jmp dhcnv1")
        self.emit.createcode("cld", "", "dhcnv2  cld", name="kima_dhcnv2")
        self.emit.createcode("lda", "kima_cnt", "        lda cnt")
        self.emit.createcode("cmp", "#$0a", "        cmp #$0a")
        self.emit.createcode("bcc", "kima_dhcnv3", "        bcc dhcnv3")
        self.emit.createcode("and", "#$0f", "        and #$0f")
        self.emit.createcode("adc", "#$09", "        adc #$09")
        self.emit.createcode("stx", "kima_cnt", "dhcnv3  stx cnt", name="kima_dhcnv3")
        self.emit.createcode("asl", "kima_cnt", "        asl cnt")
        self.emit.createcode("asl", "kima_cnt", "        asl cnt")
        self.emit.createcode("asl", "kima_cnt", "        asl cnt")
        self.emit.createcode("asl", "kima_cnt", "        asl cnt")
        self.emit.createcode("ora", "kima_cnt", "        ora cnt")
        self.emit.createcode("sta", "kima_cnt", "        sta cnt")
        self.emit.createcode("sed", "", "        sed")
        self.emit.createcode("rts", "", "dhcnve  rts", name="kima_dhcnve")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Right shift rb cnt times.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("lda", "kima_cnt", "rsbcnt  lda cnt", name="kima_rsbcnt")
        self.emit.createcode("beq", "kima_rbofe", "        beq rbofe")
        self.emit.createcode("ldx", "kima_n", "        ldx n")
        self.emit.createcode("lda", "kima_rb,x", "rsbc    lda rb,x", name="kima_rsbc")
        self.emit.createcode("sta", "kima_rb+1,x", "        sta rb+1,x")
        self.emit.createcode("dex", "", "        dex")
        self.emit.createcode("bpl", "kima_rsbc", "        bpl rsbc")
        self.emit.createcode("lda", "#0", "        lda #0")
        self.emit.createcode("sta", "kima_rb", "        sta rb")
        self.emit.createcode("dec", "kima_cnt", "        dec cnt")
        self.emit.createcode("bne", "kima_rsbcnt", "        bne rsbcnt")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Round rb off.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("ldx", "kima_n", "rboff   ldx n", name="kima_rboff")
        self.emit.createcode("lda", "kima_rb+1,x", "        lda rb+1,x")
        self.emit.createcode("cmp", "#5", "        cmp #5")
        self.emit.createcode("lda", "kima_rb,x", "rbof    lda rb,x", name="kima_rbof")
        self.emit.createcode("adc", "#$90", "        adc #$90")
        self.emit.createcode("and", "#$0f", "        and #$0f")
        self.emit.createcode("sta", "kima_rb,x", "        sta rb,x")
        self.emit.createcode("dex", "", "        dex")
        self.emit.createcode("bpl", "kima_rbof", "        bpl rbof")
        self.emit.createcode("rts", "", "rbofe   rts", name="kima_rbofe")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Move ry to rb.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("ldx", "kima_n", "rbery   ldx n", name="kima_rbery")
        self.emit.createcode("dex", "", "        dex")
        self.emit.createcode("lda", "kima_ry+1,x", "rbry    lda ry+1,x", name="kima_rbry")
        self.emit.createcode("sta", "kima_rb+1,x", "        sta rb+1,x")
        self.emit.createcode("dex", "", "        dex")
        self.emit.createcode("bpl", "kima_rbry", "        bpl rbry")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Move rx to ra.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("ldx", "kima_n", "raerx   ldx n", name="kima_raerx")
        self.emit.createcode("dex", "", "        dex")
        self.emit.createcode("lda", "kima_rx+1,x", "rarx0   lda rx+1,x", name="kima_rarx0")
        self.emit.createcode("sta", "kima_ra+1,x", "        sta ra+1,x")
        self.emit.createcode("dex", "", "        dex")
        self.emit.createcode("bpl", "kima_rarx0", "        bpl rarx0")
        self.emit.createcode("rts", "", "rarxe   rts", name="kima_rarxe")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Move rx to rq.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("ldx", "kima_n", "rqerx   ldx n", name="kima_rqerx")
        self.emit.createcode("dex", "", "        dex")
        self.emit.createcode("lda", "kima_rx+1,x", "rqrx    lda rx+1,x", name="kima_rqrx")
        self.emit.createcode("sta", "kima_rq,x", "        sta rq,x")
        self.emit.createcode("dex", "", "        dex")
        self.emit.createcode("bpl", "kima_rqrx", "        bpl rqrx")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Move rq to ra.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("ldx", "kima_n", "raerq   ldx n", name="kima_raerq")
        self.emit.createcode("lda", "kima_rq,x", "rarq    lda rq,x", name="kima_rarq")
        self.emit.createcode("sta", "kima_ra+1,x", "        sta ra+1,x")
        self.emit.createcode("dex", "", "        dex")
        self.emit.createcode("bpl", "kima_rarq", "        bpl rarq")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Move ra to rz.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("ldx", "kima_n", "rzera   ldx n", name="kima_rzera")
        self.emit.createcode("dex", "", "        dex")
        self.emit.createcode("lda", "kima_ra+1,x", "rzra0   lda ra+1,x", name="kima_rzra0")
        self.emit.createcode("sta", "kima_rz+1,x", "        sta rz+1,x")
        self.emit.createcode("dex", "", "        dex")
        self.emit.createcode("bpl", "kima_rzra0", "        bpl rzra0")
        self.emit.createcode("rts", "", "rzrae   rts", name="kima_rzrae")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Add rb to ra.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("ldx", "kima_n", "raprb   ldx n", name="kima_raprb")
        self.emit.createcode("clc", "", "        clc")
        self.emit.createcode("lda", "kima_ra,x", "apb     lda ra,x", name="kima_apb")
        self.emit.createcode("adc", "kima_rb,x", "        adc rb,x")
        self.emit.createcode("adc", "#$90", "        adc #$90")
        self.emit.createcode("and", "#$0f", "        and #$0f")
        self.emit.createcode("sta", "kima_ra,x", "        sta ra,x")
        self.emit.createcode("dex", "", "        dex")
        self.emit.createcode("bpl", "kima_apb", "        bpl apb")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Subtract rb from ra.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("ldx", "kima_n", "ramrb   ldx n", name="kima_ramrb")
        self.emit.createcode("sec", "", "        sec")
        self.emit.createcode("lda", "kima_ra,x", "amb     lda ra,x", name="kima_amb")
        self.emit.createcode("sbc", "kima_rb,x", "        sbc rb,x")
        self.emit.createcode("and", "#$0f", "        and #$0f")
        self.emit.createcode("sta", "kima_ra,x", "        sta ra,x")
        self.emit.createcode("dex", "", "        dex")
        self.emit.createcode("bpl", "kima_amb", "        bpl amb")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Compare rx to ry.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("lda", "#0", "compxy  lda #0", name="kima_compxy")
        self.emit.createcode("sta", "kima_cnta", "        sta cnta")
        self.emit.createcode("ldx", "kima_n", "        ldx n")
        self.emit.createcode("dex", "", "        dex")
        self.emit.createcode("sec", "", "        sec")
        self.emit.createcode("lda", "kima_rx+1,x", "com1    lda rx+1,x", name="kima_com1")
        self.emit.createcode("sbc", "kima_ry+1,x", "        sbc ry+1,x")
        self.emit.createcode("dex", "", "        dex")
        self.emit.createcode("bpl", "kima_com1", "        bpl com1")
        self.emit.createcode("bcc", "kima_com2", "        bcc com2")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("inc", "kima_cnta", "com2    inc cnta", name="kima_com2")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Test ra for zero.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("ldx", "kima_n", "aztst   ldx n", name="kima_aztst")
        self.emit.createcode("inx", "", "        inx")
        self.emit.createcode("lda", "kima_ra,x", "aztst0  lda ra,x", name="kima_aztst0")
        self.emit.createcode("bne", "kima_xztst1", "        bne xztst1")
        self.emit.createcode("dex", "", "        dex")
        self.emit.createcode("bpl", "kima_aztst0", "        bpl aztst0")
        self.emit.createcode("bmi", "kima_xztst2", "        bmi xztst2")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Test rx for zero.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("ldx", "kima_n", "xztst   ldx n", name="kima_xztst")
        self.emit.createcode("lda", "kima_rx,x", "xztst0  lda rx,x", name="kima_xztst0")
        self.emit.createcode("bne", "kima_xztst1", "        bne xztst1")
        self.emit.createcode("dex", "", "        dex")
        self.emit.createcode("bpl", "kima_xztst0", "        bpl xztst0")
        self.emit.createcode("lda", "#0", "xztst2  lda #0", name="kima_xztst2")
        self.emit.createcode("rts", "", "xztst1  rts", name="kima_xztst1")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Test ry for zero.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("ldx", "kima_n", "yztst   ldx n", name="kima_yztst")
        self.emit.createcode("lda", "kima_ry,x", "yztst0  lda ry,x", name="kima_yztst0")
        self.emit.createcode("bne", "kima_xztst1", "        bne xztst1")
        self.emit.createcode("dex", "", "        dex")
        self.emit.createcode("bpl", "kima_yztst0", "        bpl yztst0      ; *** NOTE: Change 'bpl' to 'bne' ***")
        self.emit.createcode("bmi", "kima_xztst2", "        bmi xztst2      ; *** NOTE: Change 'bmi' to 'beq' ***")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Swap rx and ry.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("ldx", "#kima_len", "xsy     ldx #len", name="kima_xsy")
        self.emit.createcode("lda", "kima_rx,x", "xsy1    lda rx,x", name="kima_xsy1")
        self.emit.createcode("ldy", "kima_ry,x", "        ldy ry,x")
        self.emit.createcode("sta", "kima_ry,x", "        sta ry,x")
        self.emit.createcode("tya", "", "        tya")
        self.emit.createcode("sta", "kima_rx,x", "        sta rx,x")
        self.emit.createcode("dex", "", "        dex")
        self.emit.createcode("bpl", "kima_xsy1", "        bpl xsy1")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Set rz=9.9...9e99 and overr=1.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("ldx", "kima_n", "infin   ldx n", name="kima_infin")
        self.emit.createcode("dex", "", "        dex")
        self.emit.createcode("lda", "#9", "        lda #9")
        self.emit.createcode("sta", "kima_rz+1,x", "inf0    sta rz+1,x", name="kima_inf0")
        self.emit.createcode("dex", "", "        dex")
        self.emit.createcode("bpl", "kima_inf0", "        bpl inf0")
        self.emit.createcode("lda", "#$99", "        lda #$99")
        self.emit.createcode("sta", "kima_ez", "        sta ez")
        self.emit.createcode("lda", "#0", "        lda #0")
        self.emit.createcode("sta", "kima_sz", "        sta sz")
        self.emit.createcode("lda", "#1", "        lda #1")
        self.emit.createcode("sta", "kima_overr", "        sta overr")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   The following routines are used")
        self.emit.createcode("", "", ";   to move the contents from one")
        self.emit.createcode("", "", ";   register to another, the names are")
        self.emit.createcode("", "", ";   of the form mvsd, where s stands")
        self.emit.createcode("", "", ";   for source and d for destination.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("lda", "#kima_xy", "mvxy    lda #xy", name="kima_mvxy")
        self.emit.createcode("bne", "kima_mvtr", "        bne mvtr")
        self.emit.createcode("lda", "#kima_xz", "mvxz    lda #xz", name="kima_mvxz")
        self.emit.createcode("bne", "kima_mvtr", "        bne mvtr")
        self.emit.createcode("lda", "#kima_xm", "mvxm    lda #xm", name="kima_mvxm")
        self.emit.createcode("bne", "kima_mvtr", "        bne mvtr")
        self.emit.createcode("lda", "#kima_xn", "mvxn    lda #xn", name="kima_mvxn")
        self.emit.createcode("bne", "kima_mvtr", "        bne mvtr")
        self.emit.createcode("lda", "#kima_yx", "mvyx    lda #yx", name="kima_mvyx")
        self.emit.createcode("bne", "kima_mvtr", "        bne mvtr")
        self.emit.createcode("lda", "#kima_yz", "mvyz    lda #yz", name="kima_mvyz")
        self.emit.createcode("bne", "kima_mvtr", "        bne mvtr")
        self.emit.createcode("lda", "#kima_ym", "mvym    lda #ym", name="kima_mvym")
        self.emit.createcode("bne", "kima_mvtr", "        bne mvtr")
        self.emit.createcode("lda", "#kima_yn", "mvyn    lda #yn", name="kima_mvyn")
        self.emit.createcode("bne", "kima_mvtr", "        bne mvtr")
        self.emit.createcode("lda", "#kima_zx", "mvzx    lda #zx", name="kima_mvzx")
        self.emit.createcode("bne", "kima_mvtr", "        bne mvtr")
        self.emit.createcode("lda", "#kima_zy", "mvzy    lda #zy", name="kima_mvzy")
        self.emit.createcode("bne", "kima_mvtr", "        bne mvtr")
        self.emit.createcode("lda", "#kima_zm", "mvzm    lda #zm", name="kima_mvzm")
        self.emit.createcode("bne", "kima_mvtr", "        bne mvtr")
        self.emit.createcode("lda", "#kima_zn", "mvzn    lda #zn", name="kima_mvzn")
        self.emit.createcode("bne", "kima_mvtr", "        bne mvtr")
        self.emit.createcode("lda", "#kima_mx", "mvmx    lda #mx", name="kima_mvmx")
        self.emit.createcode("bne", "kima_mvtr", "        bne mvtr")
        self.emit.createcode("lda", "#kima_my", "mvmy    lda #my", name="kima_mvmy")
        self.emit.createcode("bne", "kima_mvtr", "        bne mvtr")
        self.emit.createcode("lda", "#kima_mz", "mvmz    lda #mz", name="kima_mvmz")
        self.emit.createcode("bne", "kima_mvtr", "        bne mvtr")
        self.emit.createcode("lda", "#kima_mn", "mvmn    lda #mn", name="kima_mvmn")
        self.emit.createcode("bne", "kima_mvtr", "        bne mvtr")
        self.emit.createcode("lda", "#kima_nx", "mvnx    lda #nx", name="kima_mvnx")
        self.emit.createcode("bne", "kima_mvtr", "        bne mvtr")
        self.emit.createcode("lda", "#kima_ny", "mvny    lda #ny", name="kima_mvny")
        self.emit.createcode("bne", "kima_mvtr", "        bne mvtr")
        self.emit.createcode("lda", "#kima_nz", "mvnz    lda #nz", name="kima_mvnz")
        self.emit.createcode("bne", "kima_mvtr", "        bne mvtr")
        self.emit.createcode("lda", "#kima_nm", "mvnm    lda #nm", name="kima_mvnm")
        self.emit.createcode("pha", "", "mvtr    pha", name="kima_mvtr")
        self.emit.createcode("ldx", "#11", "        ldx #11")
        self.emit.createcode("lda", "kima_movr,x", "mvtr0   lda movr,x", name="kima_mvtr0")
        self.emit.createcode("sta", "kima_ramcod,x", "        sta ramcod,x")
        self.emit.createcode("dex", "", "        dex")
        self.emit.createcode("bpl", "kima_mvtr0", "        bpl mvtr0")
        self.emit.createcode("pla", "", "        pla")
        self.emit.createcode("pha", "", "        pha")
        self.emit.createcode("and", "#$0f", "        and #$0f")
        self.emit.createcode("tax", "", "        tax")
        self.emit.createcode("lda", "kima_tab,x", "        lda tab,x")
        self.emit.createcode("sta", "kima_ramb", "        sta ramb")
        self.emit.createcode("pla", "", "        pla")
        self.emit.createcode("lsr", "", "        lsr")
        self.emit.createcode("lsr", "", "        lsr")
        self.emit.createcode("lsr", "", "        lsr")
        self.emit.createcode("lsr", "", "        lsr")
        self.emit.createcode("tax", "", "        tax")
        self.emit.createcode("lda", "kima_tab,x", "        lda tab,x")
        self.emit.createcode("sta", "kima_rama", "        sta rama")
        self.emit.createcode("jmp", "kima_ramcod", "        jmp ramcod")
        self.emit.createcode("", "", "")
        self.emit.createcode(".byte", "$35,$47,$59,$6b,$7d", "tab     .byte $35,$47,$59,$6b,$7d", name="kima_tab")
        self.emit.createcode("", "", "")
        self.emit.createcode("ldx", "#kima_len", "movr    ldx #len", name="kima_movr")
        self.emit.createcode("lda", "kima_rx,x", "movr0   lda rx,x", name="kima_movr0")
        self.emit.createcode("sta", "kima_ry,x", "        sta ry,x")
        self.emit.createcode("dex", "", "        dex")
        self.emit.createcode("bpl", "kima_movr0", "        bpl movr0")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Set rx equal to zero.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("ldx", "#kima_len", "clrx    ldx #len", name="kima_clrx")
        self.emit.createcode("lda", "#0", "        lda #0")
        self.emit.createcode("sta", "kima_rx,x", "clrx0   sta rx,x", name="kima_clrx0")
        self.emit.createcode("dex", "", "        dex")
        self.emit.createcode("bpl", "kima_clrx0", "        bpl clrx0")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Set ry equal to zero.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("ldx", "#kima_len", "clry    ldx #len", name="kima_clry")
        self.emit.createcode("lda", "#0", "        lda #0")
        self.emit.createcode("sta", "kima_ry,x", "clry0   sta ry,x", name="kima_clry0")
        self.emit.createcode("dex", "", "        dex")
        self.emit.createcode("bpl", "kima_clry0", "        bpl clry0")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Set rz equal to zero.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("ldx", "#kima_len", "clrz    ldx #len", name="kima_clrz")
        self.emit.createcode("lda", "#0", "        lda #0")
        self.emit.createcode("sta", "kima_rz,x", "clrz0   sta rz,x", name="kima_clrz0")
        self.emit.createcode("dex", "", "        dex")
        self.emit.createcode("bpl", "kima_clrz0", "        bpl clrz0")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   This routine is used to look up")
        self.emit.createcode("", "", ";   the coefficients of the poly-")
        self.emit.createcode("", "", ";   nomials used in the approximations")
        self.emit.createcode("", "", ";   of the transcendental functions.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("jsr", "kima_clry", "lookup  jsr clry", name="kima_lookup")
        self.emit.createcode("ldx", "#0", "        ldx #0")
        self.emit.createcode("ldy", "kima_nkon", "        ldy nkon")
        self.emit.createcode("lda", "(kima_kon),y", "        lda (kon),y")
        self.emit.createcode("sta", "kima_sy", "        sta sy")
        self.emit.createcode("iny", "", "lkp0    iny", name="kima_lkp0")
        self.emit.createcode("lda", "(kima_kon),y", "        lda (kon),y")
        self.emit.createcode("cmp", "#$f0", "        cmp #$f0")
        self.emit.createcode("bcs", "kima_lkp1", "        bcs lkp1")
        self.emit.createcode("pha", "", "        pha")
        self.emit.createcode("and", "#$0f", "        and #$0f")
        self.emit.createcode("sta", "kima_ry+2,x", "        sta ry+2,x")
        self.emit.createcode("pla", "", "        pla")
        self.emit.createcode("lsr", "", "        lsr")
        self.emit.createcode("lsr", "", "        lsr")
        self.emit.createcode("lsr", "", "        lsr")
        self.emit.createcode("lsr", "", "        lsr")
        self.emit.createcode("sta", "kima_ry+1,x", "        sta ry+1,x")
        self.emit.createcode("inx", "", "        inx")
        self.emit.createcode("inx", "", "        inx")
        self.emit.createcode("jmp", "kima_lkp0", "        jmp lkp0")
        self.emit.createcode("and", "#$0f", "lkp1    and #$0f", name="kima_lkp1")
        self.emit.createcode("sta", "kima_ey", "        sta ey")
        self.emit.createcode("iny", "", "        iny")
        self.emit.createcode("sty", "kima_nkon", "        sty nkon")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   This routine evaluates polynomials")
        self.emit.createcode("", "", ";   by means of the nested multiplication")
        self.emit.createcode("", "", ";   algorithm.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("jsr", "kima_mvzm", "poly    jsr mvzm", name="kima_poly")
        self.emit.createcode("jsr", "kima_mvzx", "        jsr mvzx")
        self.emit.createcode("jsr", "kima_lookup", "        jsr lookup")
        self.emit.createcode("jsr", "kima_mltply", "poly0   jsr mltply", name="kima_poly0")
        self.emit.createcode("jsr", "kima_lookup", "        jsr lookup")
        self.emit.createcode("jsr", "kima_mvzx", "        jsr mvzx")
        self.emit.createcode("jsr", "kima_add", "        jsr add")
        self.emit.createcode("jsr", "kima_mvmx", "        jsr mvmx")
        self.emit.createcode("jsr", "kima_mvzy", "        jsr mvzy")
        self.emit.createcode("dec", "kima_deg", "        dec deg")
        self.emit.createcode("bpl", "kima_poly0", "        bpl poly0")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   This routine unpacks an argument")
        self.emit.createcode("", "", ";   and stores the result in rz.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("ldx", "#0", "pgtarg  ldx #0", name="kima_pgtarg")
        self.emit.createcode("ldy", "#0", "        ldy #0")
        self.emit.createcode("lda", "(kima_ptr),y", "        lda (ptr),y")
        self.emit.createcode("sta", "kima_sz", "        sta sz")
        self.emit.createcode("iny", "", "pgtrg0  iny", name="kima_pgtrg0")
        self.emit.createcode("cpy", "kima_length", "        cpy length")
        self.emit.createcode("beq", "kima_pgtrg1", "        beq pgtrg1")
        self.emit.createcode("lda", "(kima_ptr),y", "        lda (ptr),y")
        self.emit.createcode("pha", "", "        pha")
        self.emit.createcode("and", "#$0f", "        and #$0f")
        self.emit.createcode("sta", "kima_rz+2,x", "        sta rz+2,x")
        self.emit.createcode("pla", "", "        pla")
        self.emit.createcode("lsr", "", "        lsr")
        self.emit.createcode("lsr", "", "        lsr")
        self.emit.createcode("lsr", "", "        lsr")
        self.emit.createcode("lsr", "", "        lsr")
        self.emit.createcode("sta", "kima_rz+1,x", "        sta rz+1,x")
        self.emit.createcode("inx", "", "        inx")
        self.emit.createcode("inx", "", "        inx")
        self.emit.createcode("jmp", "kima_pgtrg0", "        jmp pgtrg0")
        self.emit.createcode("lda", "(kima_ptr),y", "pgtrg1  lda (ptr),y", name="kima_pgtrg1")
        self.emit.createcode("sta", "kima_ez", "        sta ez")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   This routine unpacks an argument")
        self.emit.createcode("", "", ";   located at (argxl,argxh) and stores")
        self.emit.createcode("", "", ";   the results in rz and rx.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("lda", "kima_argxl", "ploadx  lda argxl", name="kima_ploadx")
        self.emit.createcode("sta", "kima_ptr", "        sta ptr")
        self.emit.createcode("lda", "kima_argxh", "        lda argxh")
        self.emit.createcode("sta", "kima_ptr+1", "        sta ptr+1")
        self.emit.createcode("lda", "kima_prec", "        lda prec")
        self.emit.createcode("lsr", "", "        lsr")
        self.emit.createcode("adc", "#1", "        adc #1")
        self.emit.createcode("sta", "kima_length", "        sta length")
        self.emit.createcode("jsr", "kima_clrz", "        jsr clrz")
        self.emit.createcode("jsr", "kima_pgtarg", "        jsr pgtarg")
        self.emit.createcode("jsr", "kima_mvzx", "        jsr mvzx")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   This routine unpacks an argument")
        self.emit.createcode("", "", ";   located at (argyl,argyh) and stores")
        self.emit.createcode("", "", ";   the results in ry and rz.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("lda", "kima_argyl", "ploady  lda argyl", name="kima_ploady")
        self.emit.createcode("sta", "kima_ptr", "        sta ptr")
        self.emit.createcode("lda", "kima_argyh", "        lda argyh")
        self.emit.createcode("sta", "kima_ptr+1", "        sta ptr+1")
        self.emit.createcode("lda", "kima_prec", "        lda prec")
        self.emit.createcode("lsr", "", "        lsr")
        self.emit.createcode("adc", "#1", "        adc #1")
        self.emit.createcode("sta", "kima_length", "        sta length")
        self.emit.createcode("jsr", "kima_clrz", "        jsr clrz")
        self.emit.createcode("jsr", "kima_pgtarg", "        jsr pgtarg")
        self.emit.createcode("jsr", "kima_mvzy", "        jsr mvzy")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   This routine packs the contents")
        self.emit.createcode("", "", ";   of rz into the locations starting")
        self.emit.createcode("", "", ";   with address (res,res+1).")
        self.emit.createcode("", "", ";")
        self.emit.createcode("ldx", "#0", "pstres  ldx #0", name="kima_pstres")
        self.emit.createcode("ldy", "#0", "        ldy #0")
        self.emit.createcode("lda", "kima_sz", "        lda sz")
        self.emit.createcode("sta", "(kima_res),y", "        sta (res),y")
        self.emit.createcode("iny", "", "        iny")
        self.emit.createcode("lda", "kima_rz+1,x", "ptres   lda rz+1,x", name="kima_ptres")
        self.emit.createcode("asl", "", "        asl")
        self.emit.createcode("asl", "", "        asl")
        self.emit.createcode("asl", "", "        asl")
        self.emit.createcode("asl", "", "        asl")
        self.emit.createcode("ora", "kima_rz+2,x", "        ora rz+2,x")
        self.emit.createcode("sta", "(kima_res),y", "        sta (res),y")
        self.emit.createcode("iny", "", "        iny")
        self.emit.createcode("inx", "", "        inx")
        self.emit.createcode("inx", "", "        inx")
        self.emit.createcode("cpx", "kima_prec", "        cpx prec")
        self.emit.createcode("bcc", "kima_ptres", "        bcc ptres")
        self.emit.createcode("lda", "kima_ez", "        lda ez")
        self.emit.createcode("sta", "(kima_res),y", "        sta (res),y")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   This routine converts an argument")
        self.emit.createcode("", "", ";   from ASCII format to computational")
        self.emit.createcode("", "", ";   format and stores the result in rz.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("ldy", "#0", "ugtarg  ldy #0", name="kima_ugtarg")
        self.emit.createcode("lda", "(kima_ptr),y", "        lda (ptr),y")
        self.emit.createcode("sta", "kima_sz", "        sta sz")
        self.emit.createcode("iny", "", "ugtar0  iny", name="kima_ugtar0")
        self.emit.createcode("cpy", "kima_length", "        cpy length")
        self.emit.createcode("beq", "kima_ugtar1", "        beq ugtar1")
        self.emit.createcode("lda", "(kima_ptr),y", "        lda (ptr),y")
        self.emit.createcode("and", "#$0f", "        and #$0f")
        self.emit.createcode("sta", "kima_rz,y", "        sta rz,y")
        self.emit.createcode("jmp", "kima_ugtar0", "        jmp ugtar0")
        self.emit.createcode("lda", "(kima_ptr),y", "ugtar1  lda (ptr),y", name="kima_ugtar1")
        self.emit.createcode("asl", "", "        asl")
        self.emit.createcode("asl", "", "        asl")
        self.emit.createcode("asl", "", "        asl")
        self.emit.createcode("asl", "", "        asl")
        self.emit.createcode("sta", "kima_ez", "        sta ez")
        self.emit.createcode("iny", "", "        iny")
        self.emit.createcode("lda", "(kima_ptr),y", "        lda (ptr),y")
        self.emit.createcode("and", "#$0f", "        and #$0f")
        self.emit.createcode("ora", "kima_ez", "        ora ez")
        self.emit.createcode("sta", "kima_ez", "        sta ez")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   This routine converts an argument")
        self.emit.createcode("", "", ";   from ASCII format to comp. format.")
        self.emit.createcode("", "", ";   The address of the arg. is found in")
        self.emit.createcode("", "", ";   (argxl,argxh) and the result is stored")
        self.emit.createcode("", "", ";   in rz and rx.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("lda", "kima_argxl", "uloadx  lda argxl", name="kima_uloadx")
        self.emit.createcode("sta", "kima_ptr", "        sta ptr")
        self.emit.createcode("lda", "kima_argxh", "        lda argxh")
        self.emit.createcode("sta", "kima_ptr+1", "        sta ptr+1")
        self.emit.createcode("lda", "kima_prec", "        lda prec")
        self.emit.createcode("sta", "kima_length", "        sta length")
        self.emit.createcode("inc", "kima_length", "        inc length")
        self.emit.createcode("jsr", "kima_clrz", "        jsr clrz")
        self.emit.createcode("jsr", "kima_ugtarg", "        jsr ugtarg")
        self.emit.createcode("jsr", "kima_mvzx", "        jsr mvzx")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   This routine converts an argument")
        self.emit.createcode("", "", ";   from ASCII format to comp. format.")
        self.emit.createcode("", "", ";   The address of the arg. is found in")
        self.emit.createcode("", "", ";   (argyl,argyh) and the result is")
        self.emit.createcode("", "", ";   stored in rz and ry.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("lda", "kima_argyl", "uloady  lda argyl", name="kima_uloady")
        self.emit.createcode("sta", "kima_ptr", "        sta ptr")
        self.emit.createcode("lda", "kima_argyh", "        lda argyh")
        self.emit.createcode("sta", "kima_ptr+1", "        sta ptr+1")
        self.emit.createcode("lda", "kima_prec", "        lda prec")
        self.emit.createcode("sta", "kima_length", "        sta length")
        self.emit.createcode("inc", "kima_length", "        inc length")
        self.emit.createcode("jsr", "kima_clrz", "        jsr clrz")
        self.emit.createcode("jsr", "kima_ugtarg", "        jsr ugtarg")
        self.emit.createcode("jsr", "kima_mvzy", "        jsr mvzy")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   This routine converts the contents")
        self.emit.createcode("", "", ";   of rz to ASCII format while moving")
        self.emit.createcode("", "", ";   them to the address specified by")
        self.emit.createcode("", "", ";   (res,res+1).")
        self.emit.createcode("", "", ";")
        self.emit.createcode("ldy", "#0", "ustres  ldy #0", name="kima_ustres")
        self.emit.createcode("lda", "kima_sz", "        lda sz")
        self.emit.createcode("sta", "(kima_res),y", "        sta (res),y")
        self.emit.createcode("iny", "", "ustrs0  iny", name="kima_ustrs0")
        self.emit.createcode("cpy", "kima_prec", "        cpy prec")
        self.emit.createcode("beq", "kima_ustrs1", "        beq ustrs1")
        self.emit.createcode("bcs", "kima_ustrs2", "        bcs ustrs2")
        self.emit.createcode("lda", "kima_rz,y", "ustrs1  lda rz,y", name="kima_ustrs1")
        self.emit.createcode("ora", "#$30", "        ora #$30")
        self.emit.createcode("sta", "(kima_res),y", "        sta (res),y")
        self.emit.createcode("bne", "kima_ustrs0", "        bne ustrs0")
        self.emit.createcode("iny", "", "ustrs2  iny", name="kima_ustrs2")
        self.emit.createcode("lda", "kima_ez", "        lda ez")
        self.emit.createcode("lsr", "", "        lsr")
        self.emit.createcode("lsr", "", "        lsr")
        self.emit.createcode("lsr", "", "        lsr")
        self.emit.createcode("lsr", "", "        lsr")
        self.emit.createcode("ora", "#$30", "        ora #$30")
        self.emit.createcode("sta", "(kima_res),y", "        sta (res),y")
        self.emit.createcode("iny", "", "        iny")
        self.emit.createcode("lda", "kima_ez", "        lda ez")
        self.emit.createcode("and", "#$0f", "        and #$0f")
        self.emit.createcode("ora", "#$30", "        ora #$30")
        self.emit.createcode("sta", "(kima_res),y", "        sta (res),y")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   This routine computes the")
        self.emit.createcode("", "", ";   internal precision n from")
        self.emit.createcode("", "", ";   prec and extra. The add is")
        self.emit.createcode("", "", ";   a binary add (unsigned).")
        self.emit.createcode("", "", ";")
        self.emit.createcode("clc", "", "iprec   clc", name="kima_iprec")
        self.emit.createcode("lda", "kima_prec", "        lda prec")
        self.emit.createcode("adc", "kima_extra", "        adc extra")
        self.emit.createcode("sta", "kima_n", "        sta n")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Save the processor index registers.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("stx", "kima_tmpx", "savxy   stx tmpx", name="kima_savxy")
        self.emit.createcode("sty", "kima_tmpy", "        sty tmpy")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   Recall the processor index registers.")
        self.emit.createcode("", "", ";")
        self.emit.createcode("ldx", "kima_tmpx", "rclxy   ldx tmpx", name="kima_rclxy")
        self.emit.createcode("ldy", "kima_tmpy", "        ldy tmpy")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", "")
        self.emit.createcode(".word", "kima_konst", "kaddr   .word konst", name="kima_kaddr")
        self.emit.createcode("lda", "kima_kaddr", "setkon  lda kaddr", name="kima_setkon")
        self.emit.createcode("sta", "kima_kon", "        sta kon")
        self.emit.createcode("lda", "kima_kaddr+1", "        lda kaddr+1")
        self.emit.createcode("sta", "kima_konh", "        sta konh")
        self.emit.createcode("rts", "", "        rts")
        self.emit.createcode("", "", ";")
        self.emit.createcode("", "", ";   These are the coefficients used")
        self.emit.createcode("", "", ";   in the evaluation of the transcendental")
        self.emit.createcode("", "", ";   functions.")
        self.emit.createcode(".byte", "$40,$18,$20,$91,$29,$97,$f1", "konst   .byte $40,$18,$20,$91,$29,$97,$f1", name="kima_konst")
        self.emit.createcode(".byte", "$40,$55,$34,$27,$38,$70,$f2", "        .byte $40,$55,$34,$27,$38,$70,$f2")
        self.emit.createcode(".byte", "$40,$13,$13,$69,$01,$12,$10,$f1", "        .byte $40,$13,$13,$69,$01,$12,$10,$f1")
        self.emit.createcode(".byte", "$40,$17,$31,$09,$55,$17,$f1", "        .byte $40,$17,$31,$09,$55,$17,$f1")
        self.emit.createcode(".byte", "$40,$28,$95,$51,$13,$02,$67,$f1", "        .byte $40,$28,$95,$51,$13,$02,$67,$f1")
        self.emit.createcode(".byte", "$40,$86,$85,$88,$74,$83,$40,$50,$f1", "        .byte $40,$86,$85,$88,$74,$83,$40,$50,$f1")
        self.emit.createcode(".byte", "$40,$93,$26,$42,$67,$f4", "        .byte $40,$93,$26,$42,$67,$f4")
        self.emit.createcode(".byte", "$40,$25,$54,$91,$79,$60,$f3", "        .byte $40,$25,$54,$91,$79,$60,$f3")
        self.emit.createcode(".byte", "$40,$17,$42,$11,$19,$88,$f2", "        .byte $40,$17,$42,$11,$19,$88,$f2")
        self.emit.createcode(".byte", "$40,$72,$95,$17,$36,$66,$f2", "        .byte $40,$72,$95,$17,$36,$66,$f2")
        self.emit.createcode(".byte", "$40,$25,$43,$93,$57,$48,$40,$f1", "        .byte $40,$25,$43,$93,$57,$48,$40,$f1")
        self.emit.createcode(".byte", "$40,$66,$27,$30,$88,$42,$90,$f1", "        .byte $40,$66,$27,$30,$88,$42,$90,$f1")
        self.emit.createcode(".byte", "$00,$11,$51,$29,$27,$76,$03,$f0", "        .byte $00,$11,$51,$29,$27,$76,$03,$f0")
        self.emit.createcode(".byte", "$00,$10,$f0", "        .byte $00,$10,$f0")
        self.emit.createcode(".byte", "$40,$41,$09,$74,$19,$48,$f4", "        .byte $40,$41,$09,$74,$19,$48,$f4")
        self.emit.createcode(".byte", "$40,$20,$31,$17,$10,$84,$f4", "        .byte $40,$20,$31,$17,$10,$84,$f4")
        self.emit.createcode(".byte", "$40,$27,$97,$43,$35,$03,$70,$f3", "        .byte $40,$27,$97,$43,$35,$03,$70,$f3")
        self.emit.createcode(".byte", "$40,$98,$34,$59,$45,$39,$30,$f3", "        .byte $40,$98,$34,$59,$45,$39,$30,$f3")
        self.emit.createcode(".byte", "$40,$39,$86,$59,$10,$47,$05,$f2", "        .byte $40,$39,$86,$59,$10,$47,$05,$f2")
        self.emit.createcode(".byte", "$40,$16,$14,$89,$77,$76,$17,$40,$f1", "        .byte $40,$16,$14,$89,$77,$76,$17,$40,$f1")
        self.emit.createcode(".byte", "$40,$78,$53,$98,$17,$62,$29,$10,$f1", "        .byte $40,$78,$53,$98,$17,$62,$29,$10,$f1")
        self.emit.createcode(".byte", "$40,$28,$49,$88,$96,$20,$80,$f3", "        .byte $40,$28,$49,$88,$96,$20,$80,$f3")
        self.emit.createcode(".byte", "$c0,$16,$06,$86,$28,$96,$04,$f2", "        .byte $c0,$16,$06,$86,$28,$96,$04,$f2")
        self.emit.createcode(".byte", "$40,$42,$69,$15,$19,$27,$11,$f2", "        .byte $40,$42,$69,$15,$19,$27,$11,$f2")
        self.emit.createcode(".byte", "$c0,$75,$04,$29,$45,$38,$89,$f2", "        .byte $c0,$75,$04,$29,$45,$38,$89,$f2")
        self.emit.createcode(".byte", "$40,$10,$64,$09,$34,$02,$53,$f1", "        .byte $40,$10,$64,$09,$34,$02,$53,$f1")
        self.emit.createcode(".byte", "$c0,$14,$20,$36,$44,$46,$65,$20,$f1", "        .byte $c0,$14,$20,$36,$44,$46,$65,$20,$f1")
        self.emit.createcode(".byte", "$40,$19,$99,$26,$19,$39,$16,$60,$f1", "        .byte $40,$19,$99,$26,$19,$39,$16,$60,$f1")
        self.emit.createcode(".byte", "$c0,$33,$33,$30,$73,$34,$50,$50,$f1", "        .byte $c0,$33,$33,$30,$73,$34,$50,$50,$f1")
        self.emit.createcode(".byte", "$40,$99,$99,$99,$98,$47,$65,$70,$f1", "        .byte $40,$99,$99,$99,$98,$47,$65,$70,$f1")
        self.emit.createcode("", "", "    .end")

    def kimathmathpack(self):
        self.emit.createcode("jsr", "kima_clry",      "packer  jsr clry        ;routine to load  ra", name="kimpack_packer")
