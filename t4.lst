Sections:
00: "seg200" (200-1B18)
01: "segfffa" (FFFA-0)


Source: "t4.s"
                        	     1: VIAORBIRB                     =         $7800                    ;Output- Inputregister - B
                        	     2: VIAORAIRA                     =         $7801                    ;Output- Inputregister - A
                        	     3: VIADDRB                       =         $7802                    ;Data Direction Register B
                        	     4: VIADDRA                       =         $7803                    ;Data Direction Register A
                        	     5: VIAT1CL                       =         $7804                    ;Timer 1 Low Latches / Timer 1 Low Order Counter
                        	     6: VIAT1CH                       =         $7805                    ;Timer 1 High Order Counter
                        	     7: VIAT1LL                       =         $7806                    ;Timer 1 Low Order Latches
                        	     8: VIAT1LH                       =         $7807                    ;Timer 1 High Order Latches
                        	     9: VIAT2CL                       =         $7808                    ;Timer 2 Low Latches / Timer 1 Low Order Counter
                        	    10: VIAT2CH                       =         $7809                    ;Timer 2 High Order Counter
                        	    11: VIASR                         =         $780A                    ;Shift Register
                        	    12: VIAACR                        =         $780B                    ;Auxililary Control Register
                        	    13: VIAPCR                        =         $780C                    ;Peripheral Control Register
                        	    14: VIAIFR                        =         $780D                    ;Interrupt Flag Register
                        	    15: VIAIER                        =         $780E                    ;Interrupt Enable Register
                        	    16: VIAORAIRANH                   =         $780F                    ;Output- Inputregister - A No Handshake
                        	    17: ACIADATA                      =         $7810                    ;Output- Inputregister
                        	    18: ACIASTATUS                    =         $7811                    ;Status Register
                        	    19: ACIACOMMAND                   =         $7812                    ;Command Register
                        	    20: ACIACONTROL                   =         $7813                    ;Control Register
                        	    21: _unireg0                      =         $0000                    ;define var long = _unireg0 sizeof(4) with cpuregister
                        	    22: _unireg0_0                    =         $0000                    ;define var long = _unireg0 sizeof(4) with cpuregister
                        	    23: _unireg0_1                    =         $0001                    ;define var name:_unireg0 sizeof(4) baseadress:$   0
                        	    24: _unireg0_2                    =         $0002                    ;define var name:_unireg0 sizeof(4) baseadress:$   0
                        	    25: _unireg0_3                    =         $0003                    ;define var name:_unireg0 sizeof(4) baseadress:$   0
                        	    26: _uniregA                      =         $0004                    ;define var long = _uniregA sizeof(4) with cpuregister
                        	    27: _uniregA_0                    =         $0004                    ;define var long = _uniregA sizeof(4) with cpuregister
                        	    28: _uniregA_1                    =         $0005                    ;define var name:_uniregA sizeof(4) baseadress:$   4
                        	    29: _uniregA_2                    =         $0006                    ;define var name:_uniregA sizeof(4) baseadress:$   4
                        	    30: _uniregA_3                    =         $0007                    ;define var name:_uniregA sizeof(4) baseadress:$   4
                        	    31: _unireg1                      =         $0008                    ;define var long = _unireg1 sizeof(4) with cpuregister
                        	    32: _unireg1_0                    =         $0008                    ;define var long = _unireg1 sizeof(4) with cpuregister
                        	    33: _unireg1_1                    =         $0009                    ;define var name:_unireg1 sizeof(4) baseadress:$   8
                        	    34: _unireg1_2                    =         $000a                    ;define var name:_unireg1 sizeof(4) baseadress:$   8
                        	    35: _unireg1_3                    =         $000b                    ;define var name:_unireg1 sizeof(4) baseadress:$   8
                        	    36: _uniregB                      =         $000c                    ;define var long = _uniregB sizeof(4) with cpuregister
                        	    37: _uniregB_0                    =         $000c                    ;define var long = _uniregB sizeof(4) with cpuregister
                        	    38: _uniregB_1                    =         $000d                    ;define var name:_uniregB sizeof(4) baseadress:$   c
                        	    39: _uniregB_2                    =         $000e                    ;define var name:_uniregB sizeof(4) baseadress:$   c
                        	    40: _uniregB_3                    =         $000f                    ;define var name:_uniregB sizeof(4) baseadress:$   c
                        	    41: _unireg2                      =         $0010                    ;define var long = _unireg2 sizeof(4) with cpuregister
                        	    42: _unireg2_0                    =         $0010                    ;define var long = _unireg2 sizeof(4) with cpuregister
                        	    43: _unireg2_1                    =         $0011                    ;define var name:_unireg2 sizeof(4) baseadress:$  10
                        	    44: _unireg2_2                    =         $0012                    ;define var name:_unireg2 sizeof(4) baseadress:$  10
                        	    45: _unireg2_3                    =         $0013                    ;define var name:_unireg2 sizeof(4) baseadress:$  10
                        	    46: _uniregC                      =         $0014                    ;define var long = _uniregC sizeof(4) with cpuregister
                        	    47: _uniregC_0                    =         $0014                    ;define var long = _uniregC sizeof(4) with cpuregister
                        	    48: _uniregC_1                    =         $0015                    ;define var name:_uniregC sizeof(4) baseadress:$  14
                        	    49: _uniregC_2                    =         $0016                    ;define var name:_uniregC sizeof(4) baseadress:$  14
                        	    50: _uniregC_3                    =         $0017                    ;define var name:_uniregC sizeof(4) baseadress:$  14
                        	    51: _unireg3                      =         $0018                    ;define var long = _unireg3 sizeof(4) with cpuregister
                        	    52: _unireg3_0                    =         $0018                    ;define var long = _unireg3 sizeof(4) with cpuregister
                        	    53: _unireg3_1                    =         $0019                    ;define var name:_unireg3 sizeof(4) baseadress:$  18
                        	    54: _unireg3_2                    =         $001a                    ;define var name:_unireg3 sizeof(4) baseadress:$  18
                        	    55: _unireg3_3                    =         $001b                    ;define var name:_unireg3 sizeof(4) baseadress:$  18
                        	    56: _uniregD                      =         $001c                    ;define var long = _uniregD sizeof(4) with cpuregister
                        	    57: _uniregD_0                    =         $001c                    ;define var long = _uniregD sizeof(4) with cpuregister
                        	    58: _uniregD_1                    =         $001d                    ;define var name:_uniregD sizeof(4) baseadress:$  1c
                        	    59: _uniregD_2                    =         $001e                    ;define var name:_uniregD sizeof(4) baseadress:$  1c
                        	    60: _uniregD_3                    =         $001f                    ;define var name:_uniregD sizeof(4) baseadress:$  1c
                        	    61: _unireg4                      =         $0020                    ;define var long = _unireg4 sizeof(4) with cpuregister
                        	    62: _unireg4_0                    =         $0020                    ;define var long = _unireg4 sizeof(4) with cpuregister
                        	    63: _unireg4_1                    =         $0021                    ;define var name:_unireg4 sizeof(4) baseadress:$  20
                        	    64: _unireg4_2                    =         $0022                    ;define var name:_unireg4 sizeof(4) baseadress:$  20
                        	    65: _unireg4_3                    =         $0023                    ;define var name:_unireg4 sizeof(4) baseadress:$  20
                        	    66: _uniregE                      =         $0024                    ;define var long = _uniregE sizeof(4) with cpuregister
                        	    67: _uniregE_0                    =         $0024                    ;define var long = _uniregE sizeof(4) with cpuregister
                        	    68: _uniregE_1                    =         $0025                    ;define var name:_uniregE sizeof(4) baseadress:$  24
                        	    69: _uniregE_2                    =         $0026                    ;define var name:_uniregE sizeof(4) baseadress:$  24
                        	    70: _uniregE_3                    =         $0027                    ;define var name:_uniregE sizeof(4) baseadress:$  24
                        	    71: _unireg5                      =         $0028                    ;define var long = _unireg5 sizeof(4) with cpuregister
                        	    72: _unireg5_0                    =         $0028                    ;define var long = _unireg5 sizeof(4) with cpuregister
                        	    73: _unireg5_1                    =         $0029                    ;define var name:_unireg5 sizeof(4) baseadress:$  28
                        	    74: _unireg5_2                    =         $002a                    ;define var name:_unireg5 sizeof(4) baseadress:$  28
                        	    75: _unireg5_3                    =         $002b                    ;define var name:_unireg5 sizeof(4) baseadress:$  28
                        	    76: _uniregF                      =         $002c                    ;define var long = _uniregF sizeof(4) with cpuregister
                        	    77: _uniregF_0                    =         $002c                    ;define var long = _uniregF sizeof(4) with cpuregister
                        	    78: _uniregF_1                    =         $002d                    ;define var name:_uniregF sizeof(4) baseadress:$  2c
                        	    79: _uniregF_2                    =         $002e                    ;define var name:_uniregF sizeof(4) baseadress:$  2c
                        	    80: _uniregF_3                    =         $002f                    ;define var name:_uniregF sizeof(4) baseadress:$  2c
                        	    81: _unireg6                      =         $0030                    ;define var long = _unireg6 sizeof(4) with cpuregister
                        	    82: _unireg6_0                    =         $0030                    ;define var long = _unireg6 sizeof(4) with cpuregister
                        	    83: _unireg6_1                    =         $0031                    ;define var name:_unireg6 sizeof(4) baseadress:$  30
                        	    84: _unireg6_2                    =         $0032                    ;define var name:_unireg6 sizeof(4) baseadress:$  30
                        	    85: _unireg6_3                    =         $0033                    ;define var name:_unireg6 sizeof(4) baseadress:$  30
                        	    86: _uniregG                      =         $0034                    ;define var long = _uniregG sizeof(4) with cpuregister
                        	    87: _uniregG_0                    =         $0034                    ;define var long = _uniregG sizeof(4) with cpuregister
                        	    88: _uniregG_1                    =         $0035                    ;define var name:_uniregG sizeof(4) baseadress:$  34
                        	    89: _uniregG_2                    =         $0036                    ;define var name:_uniregG sizeof(4) baseadress:$  34
                        	    90: _uniregG_3                    =         $0037                    ;define var name:_uniregG sizeof(4) baseadress:$  34
                        	    91: _unireg7                      =         $0038                    ;define var long = _unireg7 sizeof(4) with cpuregister
                        	    92: _unireg7_0                    =         $0038                    ;define var long = _unireg7 sizeof(4) with cpuregister
                        	    93: _unireg7_1                    =         $0039                    ;define var name:_unireg7 sizeof(4) baseadress:$  38
                        	    94: _unireg7_2                    =         $003a                    ;define var name:_unireg7 sizeof(4) baseadress:$  38
                        	    95: _unireg7_3                    =         $003b                    ;define var name:_unireg7 sizeof(4) baseadress:$  38
                        	    96: _uniregH                      =         $003c                    ;define var long = _uniregH sizeof(4) with cpuregister
                        	    97: _uniregH_0                    =         $003c                    ;define var long = _uniregH sizeof(4) with cpuregister
                        	    98: _uniregH_1                    =         $003d                    ;define var name:_uniregH sizeof(4) baseadress:$  3c
                        	    99: _uniregH_2                    =         $003e                    ;define var name:_uniregH sizeof(4) baseadress:$  3c
                        	   100: _uniregH_3                    =         $003f                    ;define var name:_uniregH sizeof(4) baseadress:$  3c
                        	   101: _userstack                    =         $0040                    ;define var pointer = _userstack sizeof(2) with cpureg
                        	   102: _userstack_0                  =         $0040                    ;define var pointer = _userstack sizeof(2) with cpureg
                        	   103: _userstack_1                  =         $0041                    ;define var name:_userstack sizeof(2) baseadress:$  40
                        	   104: _systemstack                  =         $0042                    ;define var pointer = _systemstack sizeof(2) with cpur
                        	   105: _systemstack_0                =         $0042                    ;define var pointer = _systemstack sizeof(2) with cpur
                        	   106: _systemstack_1                =         $0043                    ;define var name:_systemstack sizeof(2) baseadress:$  
                        	   107: _framepointer                 =         $0044                    ;define var pointer = _framepointer sizeof(2) with cpu
                        	   108: _framepointer_0               =         $0044                    ;define var pointer = _framepointer sizeof(2) with cpu
                        	   109: _framepointer_1               =         $0045                    ;define var name:_framepointer sizeof(2) baseadress:$ 
                        	   110: _scratchregister              =         $0046                    ;define var superlong = _scratchregister sizeof(16) wi
                        	   111: _scratchregister_0            =         $0046                    ;define var superlong = _scratchregister sizeof(16) wi
                        	   112: _scratchregister_1            =         $0047                    ;define var name:_scratchregister sizeof(16) baseadres
                        	   113: _scratchregister_2            =         $0048                    ;define var name:_scratchregister sizeof(16) baseadres
                        	   114: _scratchregister_3            =         $0049                    ;define var name:_scratchregister sizeof(16) baseadres
                        	   115: _scratchregister_4            =         $004a                    ;define var name:_scratchregister sizeof(16) baseadres
                        	   116: _scratchregister_5            =         $004b                    ;define var name:_scratchregister sizeof(16) baseadres
                        	   117: _scratchregister_6            =         $004c                    ;define var name:_scratchregister sizeof(16) baseadres
                        	   118: _scratchregister_7            =         $004d                    ;define var name:_scratchregister sizeof(16) baseadres
                        	   119: _scratchregister_8            =         $004e                    ;define var name:_scratchregister sizeof(16) baseadres
                        	   120: _scratchregister_9            =         $004f                    ;define var name:_scratchregister sizeof(16) baseadres
                        	   121: _scratchregister_10           =         $0050                    ;define var name:_scratchregister sizeof(16) baseadres
                        	   122: _scratchregister_11           =         $0051                    ;define var name:_scratchregister sizeof(16) baseadres
                        	   123: _scratchregister_12           =         $0052                    ;define var name:_scratchregister sizeof(16) baseadres
                        	   124: _scratchregister_13           =         $0053                    ;define var name:_scratchregister sizeof(16) baseadres
                        	   125: _scratchregister_14           =         $0054                    ;define var name:_scratchregister sizeof(16) baseadres
                        	   126: _scratchregister_15           =         $0055                    ;define var name:_scratchregister sizeof(16) baseadres
                        	   127: _zpscratch                    =         $0056                    ;define var longlong = _zpscratch sizeof(8) with cpure
                        	   128: _zpscratch_0                  =         $0056                    ;define var longlong = _zpscratch sizeof(8) with cpure
                        	   129: _zpscratch_1                  =         $0057                    ;define var name:_zpscratch sizeof(8) baseadress:$  56
                        	   130: _zpscratch_2                  =         $0058                    ;define var name:_zpscratch sizeof(8) baseadress:$  56
                        	   131: _zpscratch_3                  =         $0059                    ;define var name:_zpscratch sizeof(8) baseadress:$  56
                        	   132: _zpscratch_4                  =         $005a                    ;define var name:_zpscratch sizeof(8) baseadress:$  56
                        	   133: _zpscratch_5                  =         $005b                    ;define var name:_zpscratch sizeof(8) baseadress:$  56
                        	   134: _zpscratch_6                  =         $005c                    ;define var name:_zpscratch sizeof(8) baseadress:$  56
                        	   135: _zpscratch_7                  =         $005d                    ;define var name:_zpscratch sizeof(8) baseadress:$  56
                        	   136: global_tickscounter           =         $005e                    ;define var long = tickscounter sizeof(4) with type_lo
                        	   137: global_tickscounter_0         =         $005e                    ;define var long = tickscounter sizeof(4) with type_lo
                        	   138: global_tickscounter_1         =         $005f                    ;define var name:tickscounter sizeof(4) baseadress:$  
                        	   139: global_tickscounter_2         =         $0060                    ;define var name:tickscounter sizeof(4) baseadress:$  
                        	   140: global_tickscounter_3         =         $0061                    ;define var name:tickscounter sizeof(4) baseadress:$  
                        	   141: irq_vector                    =         $0062                    ;define var pointer = irq_vector sizeof(2) with cpureg
                        	   142: irq_vector_0                  =         $0062                    ;define var pointer = irq_vector sizeof(2) with cpureg
                        	   143: irq_vector_1                  =         $0063                    ;define var name:irq_vector sizeof(2) baseadress:$  62
                        	   144: t1calledsubroutine            =         $0064                    ;define var pointer = t1calledsubroutine sizeof(2) wit
                        	   145: t1calledsubroutine_0          =         $0064                    ;define var pointer = t1calledsubroutine sizeof(2) wit
                        	   146: t1calledsubroutine_1          =         $0065                    ;define var name:t1calledsubroutine sizeof(2) baseadre
                        	   147: irqscratchpointer             =         $0066                    ;define var pointer = irqscratchpointer sizeof(2) with
                        	   148: irqscratchpointer_0           =         $0066                    ;define var pointer = irqscratchpointer sizeof(2) with
                        	   149: irqscratchpointer_1           =         $0067                    ;define var name:irqscratchpointer sizeof(2) baseadres
                        	   150: global_sevensegmentptr        =         $0068                    ;define var pointer = sevensegmentptr sizeof(2) with t
                        	   151: global_sevensegmentptr_0      =         $0068                    ;define var pointer = sevensegmentptr sizeof(2) with t
                        	   152: global_sevensegmentptr_1      =         $0069                    ;define var name:sevensegmentptr sizeof(2) baseadress:
                        	   153: _sevensegment0                =         $006a                    ;define var int = _sevensegment0 sizeof(2) with cpureg
                        	   154: _sevensegment0_0              =         $006a                    ;define var int = _sevensegment0 sizeof(2) with cpureg
                        	   155: _sevensegment0_1              =         $006b                    ;define var name:_sevensegment0 sizeof(2) baseadress:$
                        	   156: _sevensegment1                =         $006c                    ;define var int = _sevensegment1 sizeof(2) with cpureg
                        	   157: _sevensegment1_0              =         $006c                    ;define var int = _sevensegment1 sizeof(2) with cpureg
                        	   158: _sevensegment1_1              =         $006d                    ;define var name:_sevensegment1 sizeof(2) baseadress:$
                        	   159: _sevensegment3                =         $006e                    ;define var int = _sevensegment3 sizeof(2) with cpureg
                        	   160: _sevensegment3_0              =         $006e                    ;define var int = _sevensegment3 sizeof(2) with cpureg
                        	   161: _sevensegment3_1              =         $006f                    ;define var name:_sevensegment3 sizeof(2) baseadress:$
                        	   162: _sevenindex                   =         $0070                    ;define var byte = _sevenindex sizeof(1) with cpuregis
                        	   163: _sevenindex_0                 =         $0070                    ;define var byte = _sevenindex sizeof(1) with cpuregis
                        	   164: SIGN                          =         $0071                    ;define var byte = SIGN sizeof(1) with cpuregister,var
                        	   165: SIGN_0                        =         $0071                    ;define var byte = SIGN sizeof(1) with cpuregister,var
                        	   166: X2                            =         $0072                    ;define var byte = X2 sizeof(1) with cpuregister,varde
                        	   167: X2_0                          =         $0072                    ;define var byte = X2 sizeof(1) with cpuregister,varde
                        	   168: M2                            =         $0073                    ;define var byte = M2 sizeof(3) with cpuregister,varde
                        	   169: M2_0                          =         $0073                    ;define var byte = M2 sizeof(3) with cpuregister,varde
                        	   170: M2_1                          =         $0074                    ;define var name:M2 sizeof(3) baseadress:$  73
                        	   171: M2_2                          =         $0075                    ;define var name:M2 sizeof(3) baseadress:$  73
                        	   172: X1                            =         $0076                    ;define var byte = X1 sizeof(1) with cpuregister,varde
                        	   173: X1_0                          =         $0076                    ;define var byte = X1 sizeof(1) with cpuregister,varde
                        	   174: M1                            =         $0077                    ;define var byte = M1 sizeof(3) with cpuregister,varde
                        	   175: M1_0                          =         $0077                    ;define var byte = M1 sizeof(3) with cpuregister,varde
                        	   176: M1_1                          =         $0078                    ;define var name:M1 sizeof(3) baseadress:$  77
                        	   177: M1_2                          =         $0079                    ;define var name:M1 sizeof(3) baseadress:$  77
                        	   178: E                             =         $007a                    ;define var long = E sizeof(4) with cpuregister,vardef
                        	   179: E_0                           =         $007a                    ;define var long = E sizeof(4) with cpuregister,vardef
                        	   180: E_1                           =         $007b                    ;define var name:E sizeof(4) baseadress:$  7a
                        	   181: E_2                           =         $007c                    ;define var name:E sizeof(4) baseadress:$  7a
                        	   182: E_3                           =         $007d                    ;define var name:E sizeof(4) baseadress:$  7a
                        	   183: Z                             =         $007e                    ;define var long = Z sizeof(4) with cpuregister,vardef
                        	   184: Z_0                           =         $007e                    ;define var long = Z sizeof(4) with cpuregister,vardef
                        	   185: Z_1                           =         $007f                    ;define var name:Z sizeof(4) baseadress:$  7e
                        	   186: Z_2                           =         $0080                    ;define var name:Z sizeof(4) baseadress:$  7e
                        	   187: Z_3                           =         $0081                    ;define var name:Z sizeof(4) baseadress:$  7e
                        	   188: T                             =         $0082                    ;define var long = T sizeof(4) with cpuregister,vardef
                        	   189: T_0                           =         $0082                    ;define var long = T sizeof(4) with cpuregister,vardef
                        	   190: T_1                           =         $0083                    ;define var name:T sizeof(4) baseadress:$  82
                        	   191: T_2                           =         $0084                    ;define var name:T sizeof(4) baseadress:$  82
                        	   192: T_3                           =         $0085                    ;define var name:T sizeof(4) baseadress:$  82
                        	   193: SEXP                          =         $0086                    ;define var long = SEXP sizeof(4) with cpuregister,var
                        	   194: SEXP_0                        =         $0086                    ;define var long = SEXP sizeof(4) with cpuregister,var
                        	   195: SEXP_1                        =         $0087                    ;define var name:SEXP sizeof(4) baseadress:$  86
                        	   196: SEXP_2                        =         $0088                    ;define var name:SEXP sizeof(4) baseadress:$  86
                        	   197: SEXP_3                        =         $0089                    ;define var name:SEXP sizeof(4) baseadress:$  86
                        	   198: INT                           =         $008a                    ;define var byte = INT sizeof(1) with cpuregister,vard
                        	   199: INT_0                         =         $008a                    ;define var byte = INT sizeof(1) with cpuregister,vard
                        	   200: kima_n                        =         $008b                    ;define var byte = kima_n sizeof(1) with cpuregister,v
                        	   201: kima_n_0                      =         $008b                    ;define var byte = kima_n sizeof(1) with cpuregister,v
                        	   202: kima_nkon                     =         $008c                    ;define var byte = kima_nkon sizeof(1) with cpuregiste
                        	   203: kima_nkon_0                   =         $008c                    ;define var byte = kima_nkon sizeof(1) with cpuregiste
                        	   204: kima_j                        =         $008d                    ;define var byte = kima_j sizeof(1) with cpuregister,v
                        	   205: kima_j_0                      =         $008d                    ;define var byte = kima_j sizeof(1) with cpuregister,v
                        	   206: kima_cnt                      =         $008e                    ;define var byte = kima_cnt sizeof(1) with cpuregister
                        	   207: kima_cnt_0                    =         $008e                    ;define var byte = kima_cnt sizeof(1) with cpuregister
                        	   208: kima_cnta                     =         $008f                    ;define var byte = kima_cnta sizeof(1) with cpuregiste
                        	   209: kima_cnta_0                   =         $008f                    ;define var byte = kima_cnta sizeof(1) with cpuregiste
                        	   210: kima_length                   =         kima_cnta                ;res     .ds 1
                        	   211: kima_deg                      =         $0090                    ;define var byte = kima_deg sizeof(1) with cpuregister
                        	   212: kima_deg_0                    =         $0090                    ;define var byte = kima_deg sizeof(1) with cpuregister
                        	   213: kima_argxl                    =         $0091                    ;define var byte = kima_argxl sizeof(1) with cpuregist
                        	   214: kima_argxl_0                  =         $0091                    ;define var byte = kima_argxl sizeof(1) with cpuregist
                        	   215: kima_argxh                    =         $0092                    ;define var byte = kima_argxh sizeof(1) with cpuregist
                        	   216: kima_argxh_0                  =         $0092                    ;define var byte = kima_argxh sizeof(1) with cpuregist
                        	   217: kima_argyl                    =         $0093                    ;define var byte = kima_argyl sizeof(1) with cpuregist
                        	   218: kima_argyl_0                  =         $0093                    ;define var byte = kima_argyl sizeof(1) with cpuregist
                        	   219: kima_argyh                    =         $0094                    ;define var byte = kima_argyh sizeof(1) with cpuregist
                        	   220: kima_argyh_0                  =         $0094                    ;define var byte = kima_argyh sizeof(1) with cpuregist
                        	   221: kima_resl                     =         $0095                    ;define var byte = kima_resl sizeof(1) with cpuregiste
                        	   222: kima_resl_0                   =         $0095                    ;define var byte = kima_resl sizeof(1) with cpuregiste
                        	   223: kima_resh                     =         $0096                    ;define var byte = kima_resh sizeof(1) with cpuregiste
                        	   224: kima_resh_0                   =         $0096                    ;define var byte = kima_resh sizeof(1) with cpuregiste
                        	   225: kima_res                      =         kima_resl                ;res     .ds 1
                        	   226: kima_ptrl                     =         $0097                    ;define var byte = kima_ptrl sizeof(1) with cpuregiste
                        	   227: kima_ptrl_0                   =         $0097                    ;define var byte = kima_ptrl sizeof(1) with cpuregiste
                        	   228: kima_ptrh                     =         $0098                    ;define var byte = kima_ptrh sizeof(1) with cpuregiste
                        	   229: kima_ptrh_0                   =         $0098                    ;define var byte = kima_ptrh sizeof(1) with cpuregiste
                        	   230: kima_ptr                      =         kima_ptrl                ;res     .ds 1
                        	   231: kima_konl                     =         $0099                    ;define var byte = kima_konl sizeof(1) with cpuregiste
                        	   232: kima_konl_0                   =         $0099                    ;define var byte = kima_konl sizeof(1) with cpuregiste
                        	   233: kima_konh                     =         $009a                    ;define var byte = kima_konh sizeof(1) with cpuregiste
                        	   234: kima_konh_0                   =         $009a                    ;define var byte = kima_konh sizeof(1) with cpuregiste
                        	   235: kima_kon                      =         kima_konl                ;res     .ds 1
                        	   236: kima_prec                     =         $009b                    ;define var byte = kima_prec sizeof(1) with cpuregiste
                        	   237: kima_prec_0                   =         $009b                    ;define var byte = kima_prec sizeof(1) with cpuregiste
                        	   238: kima_extra                    =         $009c                    ;define var byte = kima_extra sizeof(1) with cpuregist
                        	   239: kima_extra_0                  =         $009c                    ;define var byte = kima_extra sizeof(1) with cpuregist
                        	   240: kima_temp                     =         $009d                    ;define var byte = kima_temp sizeof(1) with cpuregiste
                        	   241: kima_temp_0                   =         $009d                    ;define var byte = kima_temp sizeof(1) with cpuregiste
                        	   242: kima_temp1                    =         $009e                    ;define var byte = kima_temp1 sizeof(1) with cpuregist
                        	   243: kima_temp1_0                  =         $009e                    ;define var byte = kima_temp1 sizeof(1) with cpuregist
                        	   244: kima_overr                    =         $009f                    ;define var byte = kima_overr sizeof(1) with cpuregist
                        	   245: kima_overr_0                  =         $009f                    ;define var byte = kima_overr sizeof(1) with cpuregist
                        	   246: kima_tmpx                     =         $00a0                    ;define var byte = kima_tmpx sizeof(1) with cpuregiste
                        	   247: kima_tmpx_0                   =         $00a0                    ;define var byte = kima_tmpx sizeof(1) with cpuregiste
                        	   248: kima_tmpy                     =         $00a1                    ;define var byte = kima_tmpy sizeof(1) with cpuregiste
                        	   249: kima_tmpy_0                   =         $00a1                    ;define var byte = kima_tmpy sizeof(1) with cpuregiste
                        	   250: t1interval                    =         $6000                    ;define var int = t1interval sizeof(2) with cpuregiste
                        	   251: t1interval_0                  =         $6000                    ;define var int = t1interval sizeof(2) with cpuregiste
                        	   252: t1interval_1                  =         $6001                    ;define var name:t1interval sizeof(2) baseadress:$6000
                        	   253: kima_ra                       =         $6002                    ;define var byte = kima_ra sizeof(18) with cpuregister
                        	   254: kima_ra_0                     =         $6002                    ;define var byte = kima_ra sizeof(18) with cpuregister
                        	   255: kima_rb                       =         $6014                    ;define var byte = kima_rb sizeof(18) with cpuregister
                        	   256: kima_rb_0                     =         $6014                    ;define var byte = kima_rb sizeof(18) with cpuregister
                        	   257: kima_rq                       =         $6026                    ;define var byte = kima_rq sizeof(17) with cpuregister
                        	   258: kima_rq_0                     =         $6026                    ;define var byte = kima_rq sizeof(17) with cpuregister
                        	   259: kima_rx                       =         $6037                    ;define var byte = kima_rx sizeof(17) with cpuregister
                        	   260: kima_rx_0                     =         $6037                    ;define var byte = kima_rx sizeof(17) with cpuregister
                        	   261: kima_sx                       =         $6037                    ;define var byte = kima_sx sizeof(17) with cpuregister
                        	   262: kima_sx_0                     =         $6037                    ;define var byte = kima_sx sizeof(17) with cpuregister
                        	   263: kima_ex                       =         $6048                    ;define var byte = kima_ex sizeof(1) with cpuregister,
                        	   264: kima_ex_0                     =         $6048                    ;define var byte = kima_ex sizeof(1) with cpuregister,
                        	   265: kima_ry                       =         $6049                    ;define var byte = kima_ry sizeof(17) with cpuregister
                        	   266: kima_ry_0                     =         $6049                    ;define var byte = kima_ry sizeof(17) with cpuregister
                        	   267: kima_sy                       =         $6049                    ;define var byte = kima_sy sizeof(17) with cpuregister
                        	   268: kima_sy_0                     =         $6049                    ;define var byte = kima_sy sizeof(17) with cpuregister
                        	   269: kima_ey                       =         $605a                    ;define var byte = kima_ey sizeof(1) with cpuregister,
                        	   270: kima_ey_0                     =         $605a                    ;define var byte = kima_ey sizeof(1) with cpuregister,
                        	   271: kima_rz                       =         $605b                    ;define var byte = kima_rz sizeof(17) with cpuregister
                        	   272: kima_rz_0                     =         $605b                    ;define var byte = kima_rz sizeof(17) with cpuregister
                        	   273: kima_sz                       =         $605b                    ;define var byte = kima_sz sizeof(17) with cpuregister
                        	   274: kima_sz_0                     =         $605b                    ;define var byte = kima_sz sizeof(17) with cpuregister
                        	   275: kima_ez                       =         $606c                    ;define var byte = kima_ez sizeof(1) with cpuregister,
                        	   276: kima_ez_0                     =         $606c                    ;define var byte = kima_ez sizeof(1) with cpuregister,
                        	   277: kima_rm                       =         $606d                    ;define var byte = kima_rm sizeof(18) with cpuregister
                        	   278: kima_rm_0                     =         $606d                    ;define var byte = kima_rm sizeof(18) with cpuregister
                        	   279: kima_rn                       =         $607f                    ;define var byte = kima_rn sizeof(18) with cpuregister
                        	   280: kima_rn_0                     =         $607f                    ;define var byte = kima_rn sizeof(18) with cpuregister
                        	   281: kima_ramcod                   =         $6091                    ;define var byte = kima_ramcod sizeof(3) with cpuregis
                        	   282: kima_ramcod_0                 =         $6091                    ;define var byte = kima_ramcod sizeof(3) with cpuregis
                        	   283: kima_ramcod_1                 =         $6092                    ;define var name:kima_ramcod sizeof(3) baseadress:$609
                        	   284: kima_ramcod_2                 =         $6093                    ;define var name:kima_ramcod sizeof(3) baseadress:$609
                        	   285: kima_rama                     =         $6094                    ;define var byte = kima_rama sizeof(3) with cpuregiste
                        	   286: kima_rama_0                   =         $6094                    ;define var byte = kima_rama sizeof(3) with cpuregiste
                        	   287: kima_rama_1                   =         $6095                    ;define var name:kima_rama sizeof(3) baseadress:$6094
                        	   288: kima_rama_2                   =         $6096                    ;define var name:kima_rama sizeof(3) baseadress:$6094
                        	   289: kima_ramb                     =         $6097                    ;define var byte = kima_ramb sizeof(5) with cpuregiste
                        	   290: kima_ramb_0                   =         $6097                    ;define var byte = kima_ramb sizeof(5) with cpuregiste
                        	   291: kima_ramb_1                   =         $6098                    ;define var name:kima_ramb sizeof(5) baseadress:$6097
                        	   292: kima_ramb_2                   =         $6099                    ;define var name:kima_ramb sizeof(5) baseadress:$6097
                        	   293: kima_ramb_3                   =         $609a                    ;define var name:kima_ramb sizeof(5) baseadress:$6097
                        	   294: kima_ramb_4                   =         $609b                    ;define var name:kima_ramb sizeof(5) baseadress:$6097
                        	   295: global_memarea                =         $609c                    ;define var chararray = memarea sizeof(256) with type_
                        	   296: global_memarea_0              =         $609c                    ;define var chararray = memarea sizeof(256) with type_
                        	   297: global_outbufacia             =         $619c                    ;define var chararray = outbufacia sizeof(256) with ty
                        	   298: global_outbufacia_0           =         $619c                    ;define var chararray = outbufacia sizeof(256) with ty
                        	   299: outbuf_irqptr                 =         $629c                    ;define var byte = outbuf_irqptr sizeof(1) with cpureg
                        	   300: outbuf_irqptr_0               =         $629c                    ;define var byte = outbuf_irqptr sizeof(1) with cpureg
                        	   301: outbuf_writeptr               =         $629d                    ;define var byte = outbuf_writeptr sizeof(1) with cpur
                        	   302: outbuf_writeptr_0             =         $629d                    ;define var byte = outbuf_writeptr sizeof(1) with cpur
                        	   303: outbuf_writecounter           =         $629e                    ;define var byte = outbuf_writecounter sizeof(1) with 
                        	   304: outbuf_writecounter_0         =         $629e                    ;define var byte = outbuf_writecounter sizeof(1) with 
                        	   305: global_inbufacia              =         $629f                    ;define var chararray = inbufacia sizeof(256) with typ
                        	   306: global_inbufacia_0            =         $629f                    ;define var chararray = inbufacia sizeof(256) with typ
                        	   307: inbuf_irqptr                  =         $639f                    ;define var byte = inbuf_irqptr sizeof(1) with cpuregi
                        	   308: inbuf_irqptr_0                =         $639f                    ;define var byte = inbuf_irqptr sizeof(1) with cpuregi
                        	   309: inbuf_readptr                 =         $63a0                    ;define var byte = inbuf_readptr sizeof(1) with cpureg
                        	   310: inbuf_readptr_0               =         $63a0                    ;define var byte = inbuf_readptr sizeof(1) with cpureg
                        	   311: inbuf_readcounter             =         $63a1                    ;define var byte = inbuf_readcounter sizeof(1) with cp
                        	   312: inbuf_readcounter_0           =         $63a1                    ;define var byte = inbuf_readcounter sizeof(1) with cp
                        	   313: global_errno                  =         $63a2                    ;define var int = errno sizeof(2) with type_integer,va
                        	   314: global_errno_0                =         $63a2                    ;define var int = errno sizeof(2) with type_integer,va
                        	   315: global_errno_1                =         $63a3                    ;define var name:errno sizeof(2) baseadress:$63a2
                        	   316: lcd_update_statecounter       =         $63a4                    ;define var byte = lcd_update_statecounter sizeof(1) w
                        	   317: lcd_update_statecounter_0     =         $63a4                    ;define var byte = lcd_update_statecounter sizeof(1) w
                        	   318: lcd_update_ticks              =         $63a5                    ;define var byte = lcd_update_ticks sizeof(1) with cpu
                        	   319: lcd_update_ticks_0            =         $63a5                    ;define var byte = lcd_update_ticks sizeof(1) with cpu
                        	   320: lcd_update_seconds            =         $63a6                    ;define var byte = lcd_update_seconds sizeof(1) with c
                        	   321: lcd_update_seconds_0          =         $63a6                    ;define var byte = lcd_update_seconds sizeof(1) with c
                        	   322: lcd_update_minutes            =         $63a7                    ;define var byte = lcd_update_minutes sizeof(1) with c
                        	   323: lcd_update_minutes_0          =         $63a7                    ;define var byte = lcd_update_minutes sizeof(1) with c
                        	   324: lcd_update_hours              =         $63a8                    ;define var byte = lcd_update_hours sizeof(1) with cpu
                        	   325: lcd_update_hours_0            =         $63a8                    ;define var byte = lcd_update_hours sizeof(1) with cpu
                        	   326: lcd_update_days               =         $63a9                    ;define var int = lcd_update_days sizeof(2) with cpure
                        	   327: lcd_update_days_0             =         $63a9                    ;define var int = lcd_update_days sizeof(2) with cpure
                        	   328: lcd_update_days_1             =         $63aa                    ;define var name:lcd_update_days sizeof(2) baseadress:
                        	   329:                               ORG       $0200                    ;inline assembler from souceline:0
00:0200 8002            	   330:                               BRA       programstart             ;
00:0202 F91A            	   331:                               WORD      subroutinetable          ;
00:0204 78              	   332: programstart                  SEI                                ;inline assembler from souceline:0
00:0205 D8              	   333:                               CLD                                ;inline assembler from souceline:0
00:0206 A200            	   334:                               LDX       #0                       ;
00:0208 9E0001          	   335: _init_6502_stack_memory       STZ       $100,X                   ;clear stack-memory
00:020B E8              	   336:                               INX                                ;
00:020C D0FA            	   337:                               BNE       _init_6502_stack_memory  ;
00:020E A2FF            	   338:                               LDX       #$FF                     ;
00:0210 9A              	   339:                               TXS                                ;
00:0211 200704          	   340:                               JSR       setuserstack             ;
00:0214 A998            	   341:                               LDA       #<IRQhandler             ;load low byte of irq-startaddress
00:0216 8562            	   342:                               STA       irq_vector_0             ;
00:0218 A902            	   343:                               LDA       #>IRQhandler             ;load high byte of irq-startaddress
00:021A 8563            	   344:                               STA       irq_vector_1             ;
00:021C A9DB            	   345:                               LDA       #<t1calledsubdummy       ;
00:021E 8564            	   346:                               STA       t1calledsubroutine_0     ;
00:0220 A907            	   347:                               LDA       #>t1calledsubdummy       ;
00:0222 8565            	   348:                               STA       t1calledsubroutine_1     ;
00:0224 A90E            	   349:                               LDA       #$0e                     ;Initialize Timer to 10ms
00:0226 8D0060          	   350:                               STA       t1interval_0             ;
00:0229 A927            	   351:                               LDA       #$27                     ;
00:022B 8D0160          	   352:                               STA       t1interval_1             ;
00:022E 20BD08          	   353:                               JSR       init_transmittimer       ;inline assembler from souceline:0
00:0231 202208          	   354:                               JSR       init_aciaserial          ;inline assembler from souceline:0
00:0234 207607          	   355:                               JSR       init_clocktimer          ;inline assembler from souceline:0
00:0237 58              	   356:                               CLI                                ;inline assembler from souceline:0
00:0238 9CA263          	   357:                               STZ       global_errno_0           ;
00:023B 9CA363          	   358:                               STZ       global_errno_1           ;
00:023E 201316          	   359:                               JSR       main                     ;call the c main function without any argument
00:0241 A900            	   360:                               LDA       #0                       ;
00:0243 8504            	   361:                               STA       _uniregA_0               ;
00:0245 8505            	   362:                               STA       _uniregA_1               ;
00:0247 8506            	   363:                               STA       _uniregA_2               ;
00:0249 8507            	   364:                               STA       _uniregA_3               ;
00:024B 20E804          	   365:                               JSR       _OUT_UNIREG0             ;inline assembler from souceline:0
00:024E A92C            	   366:                               LDA       #','                     ;inline assembler from souceline:0
00:0250 209A03          	   367:                               JSR       _OUTPUTCHAR              ;inline assembler from souceline:0
00:0253 20C606          	   368:                               JSR       _UNIREG0_DECIMAL         ;inline assembler from souceline:0
00:0256 206707          	   369:                               JSR       _prt_global_memarea      ;inline assembler from souceline:0
00:0259 4C0C09          	   370: _dowozmanentrypoint           JMP       wozmonentrypoint         ;inline assembler from souceline:0
00:025C A000            	   371:                               LDY       #0                       ;inline assembler from souceline:0
00:025E B97302          	   372: _MESS_TERMINATED_LOOP         LDA       _MESS_TERMINATED,Y       ;inline assembler from souceline:0
00:0261 F007            	   373:                               BEQ       _program_terminated      ;inline assembler from souceline:0
00:0263 C8              	   374:                               INY                                ;inline assembler from souceline:0
00:0264 209A03          	   375:                               JSR       _OUTPUTCHAR              ;inline assembler from souceline:0
00:0267 4C5E02          	   376:                               JMP       _MESS_TERMINATED_LOOP    ;inline assembler from souceline:0
00:026A 204803          	   377: _program_terminated           JSR       _OUTPUTCRLF              ;inline assembler from souceline:0
00:026D 206503          	   378: __INPUT_WAIT_LOOP             JSR       _INPUT_WAIT              ;inline assembler from souceline:0
00:0270 4C6D02          	   379:                               JMP       __INPUT_WAIT_LOOP        ;inline assembler from souceline:0
00:0273 70726F6772616D20	   380: _MESS_TERMINATED              .ASCIIZ   "program terminated"     ;inline assembler from souceline:0
00:027B 7465726D696E6174
00:0283 6564
00:0285 00
00:0286 73797374656D2073	   381: _START_MESSAGE                .ASCIIZ   "system startet"         ;inline assembler from souceline:0
00:028E 746172746574
00:0294 00
00:0295 6C6200          	   382: IRQstart                      JMP       (irq_vector)             ;inline assembler from souceline:0
00:0298 48              	   383: IRQhandler                    PHA                                ;save registers
00:0299 DA              	   384:                               PHX                                ;
00:029A 5A              	   385:                               PHY                                ;
00:029B 203D08          	   386:                               JSR       aciairqhandler           ;inline assembler from souceline:0
00:029E 20E108          	   387:                               JSR       irq_handler_transmittimer;inline assembler from souceline:0
00:02A1 20AC07          	   388:                               JSR       irq_handler_clocktimer   ;inline assembler from souceline:0
00:02A4 7A              	   389:                               PLY                                ;
00:02A5 FA              	   390:                               PLX                                ;
00:02A6 68              	   391:                               PLA                                ;
00:02A7 40              	   392:                               RTI                                ;inline assembler from souceline:0
00:02A8 A200            	   393: _lcd_start_message            LDX       #0                       ;0
00:02AA BD8602          	   394: _lcd_start_message_loop       LDA       _START_MESSAGE,X         ;0
00:02AD F006            	   395:                               BEQ       _lcd_start_message_rts   ;
00:02AF 202108          	   396:                               JSR       print_lcdchar            ;inline assembler from souceline:0
00:02B2 E8              	   397:                               INX                                ;
00:02B3 80F5            	   398:                               BRA       _lcd_start_message_loop  ;
00:02B5 60              	   399: _lcd_start_message_rts        RTS                                ;
00:02B6 48              	   400: NMIstart                      PHA                                ;save all registers in NMI Routine
00:02B7 DA              	   401:                               PHX                                ;
00:02B8 5A              	   402:                               PHY                                ;
00:02B9 7A              	   403:                               PLY                                ;
00:02BA FA              	   404:                               PLX                                ;
00:02BB 68              	   405:                               PLA                                ;
00:02BC 40              	   406:                               RTI                                ;
                        	   407: incuserstack_todelete                                            ;inline assembler from souceline:0
00:02BD A901            	   408:                               LDA       #1                       ;inline assembler from souceline:0
00:02BF 18              	   409:                               CLC                                ;inline assembler from souceline:0
00:02C0 6540            	   410:                               ADC       _userstack_0             ;inline assembler from souceline:0
00:02C2 8540            	   411:                               STA       _userstack_0             ;inline assembler from souceline:0
00:02C4 A900            	   412:                               LDA       #0                       ;inline assembler from souceline:0
00:02C6 6541            	   413:                               ADC       _userstack_1             ;inline assembler from souceline:0
00:02C8 8541            	   414:                               STA       _userstack_1             ;inline assembler from souceline:0
00:02CA 60              	   415:                               RTS                                ;inline assembler from souceline:0
                        	   416: addaccuto_unireg6                                                ;inline assembler from souceline:0
00:02CB 18              	   417:                               CLC                                ;inline assembler from souceline:0
00:02CC 6530            	   418:                               ADC       _unireg6_0               ;inline assembler from souceline:0
00:02CE 8530            	   419:                               STA       _unireg6_0               ;inline assembler from souceline:0
00:02D0 A900            	   420:                               LDA       #0                       ;inline assembler from souceline:0
00:02D2 6531            	   421:                               ADC       _unireg6_1               ;inline assembler from souceline:0
00:02D4 8531            	   422:                               STA       _unireg6_1               ;inline assembler from souceline:0
00:02D6 60              	   423:                               RTS                                ;inline assembler from souceline:0
                        	   424: addaccuto_unireg7                                                ;inline assembler from souceline:0
00:02D7 18              	   425:                               CLC                                ;inline assembler from souceline:0
00:02D8 6538            	   426:                               ADC       _unireg7_0               ;inline assembler from souceline:0
00:02DA 8538            	   427:                               STA       _unireg7_0               ;inline assembler from souceline:0
00:02DC A900            	   428:                               LDA       #0                       ;inline assembler from souceline:0
00:02DE 6539            	   429:                               ADC       _unireg7_1               ;inline assembler from souceline:0
00:02E0 8539            	   430:                               STA       _unireg7_1               ;inline assembler from souceline:0
00:02E2 60              	   431:                               RTS                                ;inline assembler from souceline:0
                        	   432: decuserstack_todelete                                            ;inline assembler from souceline:0
00:02E3 38              	   433:                               SEC                                ;inline assembler from souceline:0
00:02E4 A540            	   434:                               LDA       _userstack               ;inline assembler from souceline:0
00:02E6 E901            	   435:                               SBC       #1                       ;inline assembler from souceline:0
00:02E8 8540            	   436:                               STA       _userstack               ;inline assembler from souceline:0
00:02EA A541            	   437:                               LDA       _userstack_1             ;inline assembler from souceline:0
00:02EC E900            	   438:                               SBC       #0                       ;inline assembler from souceline:0
00:02EE 8541            	   439:                               STA       _userstack_1             ;inline assembler from souceline:0
00:02F0 60              	   440:                               RTS                                ;inline assembler from souceline:0
                        	   441: subaccufrom_unireg7                                              ;inline assembler from souceline:0
00:02F1 38              	   442:                               SEC                                ;inline assembler from souceline:0
00:02F2 8546            	   443:                               STA       _scratchregister         ;inline assembler from souceline:0
00:02F4 A538            	   444:                               LDA       _unireg7_0               ;inline assembler from souceline:0
00:02F6 E546            	   445:                               SBC       _scratchregister         ;inline assembler from souceline:0
00:02F8 8538            	   446:                               STA       _unireg7_0               ;inline assembler from souceline:0
00:02FA A539            	   447:                               LDA       _unireg7_1               ;inline assembler from souceline:0
00:02FC E900            	   448:                               SBC       #0                       ;inline assembler from souceline:0
00:02FE 8539            	   449:                               STA       _unireg7_1               ;inline assembler from souceline:0
00:0300 60              	   450:                               RTS                                ;inline assembler from souceline:0
00:0301 48              	   451: setunireg7fromaccu            PHA                                ;inline assembler from souceline:0
                        	   452:                                                                  ;start assignvaluetovariable(stoken=_unireg7, t_type=n
00:0302 A900            	   453:                               LDA       #$00                     ;Load 00 from Value:0000000000000000, Index:0
00:0304 8538            	   454:                               STA       _unireg7_0               ;store byte to global var
00:0306 8539            	   455:                               STA       _unireg7_1               ;store byte to global var
00:0308 853A            	   456:                               STA       _unireg7_2               ;store byte to global var
00:030A 853B            	   457:                               STA       _unireg7_3               ;store byte to global var
00:030C 853C            	   458:                               STA       _uniregH_0               ;store byte to global var
00:030E 853D            	   459:                               STA       _uniregH_1               ;store byte to global var
00:0310 853E            	   460:                               STA       _uniregH_2               ;store byte to global var
00:0312 853F            	   461:                               STA       _uniregH_3               ;store byte to global var
00:0314 68              	   462:                               PLA                                ;inline assembler from souceline:0
00:0315 8538            	   463:                               STA       _unireg7                 ;inline assembler from souceline:0
00:0317 60              	   464:                               RTS                                ;inline assembler from souceline:0
                        	   465: addu7touserstack                                                 ;inline assembler from souceline:0
00:0318 48              	   466:                               PHA                                ;inline assembler from souceline:0
00:0319 18              	   467:                               CLC                                ;inline assembler from souceline:0
00:031A A540            	   468:                               LDA       _userstack_0             ;inline assembler from souceline:0
00:031C 6538            	   469:                               ADC       _unireg7_0               ;inline assembler from souceline:0
00:031E 8540            	   470:                               STA       _userstack               ;inline assembler from souceline:0
00:0320 A541            	   471:                               LDA       _userstack_1             ;inline assembler from souceline:0
00:0322 6539            	   472:                               ADC       _unireg7_1               ;inline assembler from souceline:0
00:0324 8541            	   473:                               STA       _userstack_1             ;inline assembler from souceline:0
00:0326 68              	   474:                               PLA                                ;inline assembler from souceline:0
00:0327 60              	   475:                               RTS                                ;inline assembler from souceline:0
                        	   476: subu7fromuserstack                                               ;inline assembler from souceline:0
00:0328 48              	   477:                               PHA                                ;inline assembler from souceline:0
00:0329 A540            	   478:                               LDA       _userstack               ;inline assembler from souceline:0
00:032B 38              	   479:                               SEC                                ;inline assembler from souceline:0
00:032C E538            	   480:                               SBC       _unireg7_0               ;inline assembler from souceline:0
00:032E 8540            	   481:                               STA       _userstack_0             ;inline assembler from souceline:0
00:0330 A541            	   482:                               LDA       _userstack_1             ;inline assembler from souceline:0
00:0332 E539            	   483:                               SBC       _unireg7_1               ;inline assembler from souceline:0
00:0334 8541            	   484:                               STA       _userstack_1             ;inline assembler from souceline:0
00:0336 68              	   485:                               PLA                                ;inline assembler from souceline:0
00:0337 60              	   486:                               RTS                                ;inline assembler from souceline:0
                        	   487: addu6tou7                                                        ;inline assembler from souceline:0
00:0338 48              	   488:                               PHA                                ;inline assembler from souceline:0
00:0339 18              	   489:                               CLC                                ;inline assembler from souceline:0
00:033A A538            	   490:                               LDA       _unireg7_0               ;inline assembler from souceline:0
00:033C 6530            	   491:                               ADC       _unireg6_0               ;inline assembler from souceline:0
00:033E 8538            	   492:                               STA       _unireg7_0               ;inline assembler from souceline:0
00:0340 A539            	   493:                               LDA       _unireg7_1               ;inline assembler from souceline:0
00:0342 6531            	   494:                               ADC       _unireg6_1               ;inline assembler from souceline:0
00:0344 8539            	   495:                               STA       _unireg7_1               ;inline assembler from souceline:0
00:0346 68              	   496:                               PLA                                ;inline assembler from souceline:0
00:0347 60              	   497:                               RTS                                ;inline assembler from souceline:0
                        	   498: _OUTPUTCRLF                                                      ;inline assembler from souceline:0
00:0348 48              	   499:                               PHA                                ;inline assembler from souceline:0
00:0349 A90A            	   500:                               LDA       #10                      ;inline assembler from souceline:0
00:034B 209A03          	   501:                               JSR       _OUTPUTCHAR              ;inline assembler from souceline:0
00:034E A90D            	   502:                               LDA       #13                      ;inline assembler from souceline:0
00:0350 209A03          	   503:                               JSR       _OUTPUTCHAR              ;inline assembler from souceline:0
00:0353 68              	   504:                               PLA                                ;inline assembler from souceline:0
00:0354 60              	   505:                               RTS                                ;inline assembler from souceline:0
                        	   506: _INPUTCHAR                                                       ;inline assembler from souceline:0
00:0355 ADA163          	   507:                               LDA       inbuf_readcounter        ;load number of char in readbuffer
00:0358 F003            	   508:                               BEQ       _INPUTCHAR_EXIT          ;
00:035A 206503          	   509:                               JSR       _INPUT_WAIT              ;will not wait, because we tested before
00:035D 60              	   510: _INPUTCHAR_EXIT               RTS                                ;exit with 0 or char
                        	   511: _INPUT_AVAIL                                                     ;inline assembler from souceline:0
00:035E ADA163          	   512:                               LDA       inbuf_readcounter        ;load number of char in readbuffer
00:0361 D001            	   513:                               BNE       _INPUT_CHARS_IN_BUFFER   ;
00:0363 CB              	   514:                               WAI                                ;wait until next IRQ (mainly Timer 1 when no IO-activi
00:0364 60              	   515: _INPUT_CHARS_IN_BUFFER        RTS                                ;return
                        	   516: _INPUT_WAIT                                                      ;inline assembler from souceline:0
00:0365 DA              	   517:                               PHX                                ;save registers
00:0366 5A              	   518:                               PHY                                ;
00:0367 ADA163          	   519: _INPUT_WAIT_FOR_CHARS         LDA       inbuf_readcounter        ;load number of chars in readbuffer
00:036A F02B            	   520:                               BEQ       _INPUT_GOSLEEP           ;if count is 0, then wait for input in buffer
00:036C 78              	   521:                               SEI                                ;lock interrupts, as long as we modify the buffer
00:036D CEA163          	   522:                               DEC       inbuf_readcounter        ;take one char from the buffer
00:0370 AEA063          	   523:                               LDX       inbuf_readptr            ;read pointer for read access
00:0373 BD9F62          	   524:                               LDA       global_inbufacia,X       ;load char from buffer into accu
00:0376 EEA063          	   525:                               INC       inbuf_readptr            ;increment, will rollover when 255 is reached
00:0379 9CA263          	   526:                               STZ       global_errno_0           ;no error until now
00:037C C9FF            	   527:                               CMP       #$FF                     ;check for escape character
00:037E D013            	   528:                               BNE       _INPUT_WAIT_EXIT_NOERR   ;
00:0380 CEA163          	   529:                               DEC       inbuf_readcounter        ;take one char from the buffer
00:0383 AEA063          	   530:                               LDX       inbuf_readptr            ;read pointer for read access
00:0386 BD9F62          	   531:                               LDA       global_inbufacia,X       ;load char from buffer into accu
00:0389 EEA063          	   532:                               INC       inbuf_readptr            ;increment, will rollover when 255 is reached
00:038C C9FF            	   533:                               CMP       #$FF                     ;check for next character
00:038E F003            	   534:                               BEQ       _INPUT_WAIT_EXIT_NOERR   ;if char is the escape char, then this is a valid char
00:0390 8DA263          	   535:                               STA       global_errno_0           ;if not, this is an error code from the irq handler, p
00:0393 58              	   536: _INPUT_WAIT_EXIT_NOERR        CLI                                ;interrupts are now allowed
00:0394 7A              	   537:                               PLY                                ;
00:0395 FA              	   538:                               PLX                                ;
00:0396 60              	   539:                               RTS                                ;inline assembler from souceline:0
00:0397 CB              	   540: _INPUT_GOSLEEP                WAI                                ;Put Processor in Waitstate, waiting for IRQ to contin
00:0398 80CD            	   541:                               BRA       _INPUT_WAIT_FOR_CHARS    ;
                        	   542: _OUTPUTCHAR                                                      ;inline assembler from souceline:0
00:039A 48              	   543:                               PHA                                ;save accu
00:039B DA              	   544:                               PHX                                ;save X-Register
00:039C 78              	   545:                               SEI                                ;lock interrupts, as long as we modify the buffer
00:039D AE9D62          	   546:                               LDX       outbuf_writeptr          ;load pointer to write position
00:03A0 9D9C61          	   547:                               STA       global_outbufacia,X      ;store char in buffer at actual position
00:03A3 E8              	   548:                               INX                                ;move pointer to next position in buffer
00:03A4 8E9D62          	   549: output_store_write_ptr        STX       outbuf_writeptr          ;
00:03A7 AD9E62          	   550:                               LDA       outbuf_writecounter      ;
00:03AA D003            	   551:                               BNE       output_dont_enable_timer ;there are chars in buffer, so we did not need to rest
00:03AC 20D608          	   552:                               JSR       start_transmittimer      ;start timer, because we will send this (and later) ch
00:03AF EE9E62          	   553: output_dont_enable_timer      INC       outbuf_writecounter      ;One more char in outbuffer
00:03B2 58              	   554:                               CLI                                ;interrupts are now allowed
00:03B3 AD9E62          	   555:                               LDA       outbuf_writecounter      ;load counter
00:03B6 C9F0            	   556:                               CMP       #240                     ;check if buffer is almost full (8 chars left)
00:03B8 1005            	   557:                               BPL       outbuf_exitwithrestoreregisters;
00:03BA AD9E62          	   558: output_buffer_full_empty_loop LDA       outbuf_writecounter      ;load counter
00:03BD D003            	   559:                               BNE       _OUTPUT_GOSLEEP          ;
00:03BF FA              	   560: outbuf_exitwithrestoreregisters PLX                                ;restore X-Register
00:03C0 68              	   561:                               PLA                                ;restore Accu
00:03C1 60              	   562:                               RTS                                ;inline assembler from souceline:0
00:03C2 CB              	   563: _OUTPUT_GOSLEEP               WAI                                ;Put Processor in Waitstate, waiting for IRQ to contin
00:03C3 80F5            	   564:                               BRA       output_buffer_full_empty_loop;
                        	   565: _OUT_ACCU                                                        ;inline assembler from souceline:0
00:03C5 DA              	   566:                               PHX                                ;
00:03C6 5A              	   567:                               PHY                                ;
00:03C7 48              	   568:                               PHA                                ;
00:03C8 F8              	   569:                               SED                                ;inline assembler from souceline:0
00:03C9 AA              	   570:                               TAX                                ;inline assembler from souceline:0
00:03CA 290F            	   571:                               AND       #$0F                     ;inline assembler from souceline:0
00:03CC C90A            	   572:                               CMP       #9+1                     ;inline assembler from souceline:0
00:03CE 6930            	   573:                               ADC       #$30                     ;inline assembler from souceline:0
00:03D0 A8              	   574:                               TAY                                ;inline assembler from souceline:0
00:03D1 8A              	   575:                               TXA                                ;inline assembler from souceline:0
00:03D2 4A              	   576:                               LSR                                ;inline assembler from souceline:0
00:03D3 4A              	   577:                               LSR                                ;inline assembler from souceline:0
00:03D4 4A              	   578:                               LSR                                ;inline assembler from souceline:0
00:03D5 4A              	   579:                               LSR                                ;inline assembler from souceline:0
00:03D6 C90A            	   580:                               CMP       #9+1                     ;inline assembler from souceline:0
00:03D8 6930            	   581:                               ADC       #$30                     ;inline assembler from souceline:0
00:03DA D8              	   582:                               CLD                                ;inline assembler from souceline:0
00:03DB 209A03          	   583:                               JSR       _OUTPUTCHAR              ;inline assembler from souceline:0
00:03DE 98              	   584:                               TYA                                ;inline assembler from souceline:0
00:03DF 209A03          	   585:                               JSR       _OUTPUTCHAR              ;inline assembler from souceline:0
00:03E2 68              	   586:                               PLA                                ;
00:03E3 7A              	   587:                               PLY                                ;
00:03E4 FA              	   588:                               PLX                                ;
00:03E5 60              	   589:                               RTS                                ;inline assembler from souceline:0
                        	   590: _OUT_ACCU_LCD                                                    ;inline assembler from souceline:0
00:03E6 DA              	   591:                               PHX                                ;
00:03E7 5A              	   592:                               PHY                                ;
00:03E8 48              	   593:                               PHA                                ;
00:03E9 F8              	   594:                               SED                                ;inline assembler from souceline:0
00:03EA AA              	   595:                               TAX                                ;inline assembler from souceline:0
00:03EB 290F            	   596:                               AND       #$0F                     ;inline assembler from souceline:0
00:03ED C90A            	   597:                               CMP       #9+1                     ;inline assembler from souceline:0
00:03EF 6930            	   598:                               ADC       #$30                     ;inline assembler from souceline:0
00:03F1 A8              	   599:                               TAY                                ;inline assembler from souceline:0
00:03F2 8A              	   600:                               TXA                                ;inline assembler from souceline:0
00:03F3 4A              	   601:                               LSR                                ;inline assembler from souceline:0
00:03F4 4A              	   602:                               LSR                                ;inline assembler from souceline:0
00:03F5 4A              	   603:                               LSR                                ;inline assembler from souceline:0
00:03F6 4A              	   604:                               LSR                                ;inline assembler from souceline:0
00:03F7 C90A            	   605:                               CMP       #9+1                     ;inline assembler from souceline:0
00:03F9 6930            	   606:                               ADC       #$30                     ;inline assembler from souceline:0
00:03FB D8              	   607:                               CLD                                ;inline assembler from souceline:0
00:03FC 202108          	   608:                               JSR       print_lcdchar            ;inline assembler from souceline:0
00:03FF 98              	   609:                               TYA                                ;inline assembler from souceline:0
00:0400 202108          	   610:                               JSR       print_lcdchar            ;inline assembler from souceline:0
00:0403 68              	   611:                               PLA                                ;
00:0404 7A              	   612:                               PLY                                ;
00:0405 FA              	   613:                               PLX                                ;
00:0406 60              	   614:                               RTS                                ;inline assembler from souceline:0
                        	   615: setuserstack                                                     ;inline assembler from souceline:0
                        	   616:                                                                  ;start assignvaluetovariable(stoken=_userstack, t_type
00:0407 A900            	   617:                               LDA       #$00                     ;load word(28672,$7000) lobyte (00) in accu
00:0409 8540            	   618:                               STA       _userstack               ;store lobyte from _userstack to address: $  40
00:040B A970            	   619:                               LDA       #$70                     ;load hibyte (70) in accu
00:040D 8541            	   620:                               STA       _userstack_1             ;store hibyte to $  40
00:040F A960            	   621:                               LDA       #$60                     ;
00:0411 8501            	   622:                               STA       _unireg0_1               ;
00:0413 A900            	   623:                               LDA       #$00                     ;
00:0415 8500            	   624:                               STA       _unireg0_0               ;
00:0417 A000            	   625:                               LDY       #0                       ;
00:0419 A900            	   626: _clear_userstack_memory_loop  LDA       #0                       ;load zero
00:041B 9100            	   627:                               STA       (_unireg0_0),Y           ;clear user stack memory
00:041D E600            	   628:                               INC       _unireg0_0               ;
00:041F D002            	   629:                               BNE       _increment_hi_byte_for_clear_userstack_loop;
00:0421 E601            	   630:                               INC       _unireg0_1               ;
00:0423 A500            	   631: _increment_hi_byte_for_clear_userstack_loop LDA       _unireg0_0               ;check if idx == stackstart
00:0425 C540            	   632:                               CMP       _userstack_0             ;
00:0427 D0F0            	   633:                               BNE       _clear_userstack_memory_loop;check if lobyte equals
00:0429 A501            	   634:                               LDA       _unireg0_1               ;
00:042B C541            	   635:                               CMP       _userstack_1             ;
00:042D D0EA            	   636:                               BNE       _clear_userstack_memory_loop;check if hibyte equals
00:042F 60              	   637:                               RTS                                ;inline assembler from souceline:0
00:0430 DA              	   638: _OUTHEX                       PHX                                ;output a char in accu, save X+Y-Register
00:0431 5A              	   639:                               PHY                                ;
00:0432 20C503          	   640:                               JSR       _OUT_ACCU                ;
00:0435 7A              	   641:                               PLY                                ;
00:0436 FA              	   642:                               PLX                                ;
00:0437 60              	   643:                               RTS                                ;
00:0438 18              	   644: _GETADDRESSOFLOCALVAR         CLC                                ;get address of local object, offset is in accu
00:0439 6540            	   645:                               ADC       _userstack_0             ;add lo byte of userstack to accu
00:043B 8500            	   646:                               STA       _unireg0_0               ;store lo byte to _unireg0
00:043D A900            	   647:                               LDA       #0                       ;
00:043F 8502            	   648:                               STA       _unireg0_2               ;clear upper bytes of long-type
00:0441 8503            	   649:                               STA       _unireg0_3               ;dito
00:0443 6541            	   650:                               ADC       _userstack_1             ;add hi byte of userstock to accu
00:0445 8501            	   651:                               STA       _unireg0_1               ;store hi byte to _unireg0
00:0447 60              	   652:                               RTS                                ;return, address is in _unireg0
00:0448 A900            	   653: _BIN2BCD                      LDA       #0                       ;clear resultarea
00:044A A07F            	   654:                               LDY       #127                     ;
00:044C 999C60          	   655: bin2bcdclearloop              STA       global_memarea,Y         ;
00:044F 88              	   656:                               DEY                                ;
00:0450 D0FA            	   657:                               BNE       bin2bcdclearloop         ;
00:0452 A210            	   658:                               LDX       #16                      ;setup the bit counter
00:0454 F8              	   659:                               SED                                ;decimal mode
00:0455 0646            	   660: bin2bcdconvloop               ASL       _scratchregister_0       ;shift a bit out of the binary
00:0457 2647            	   661:                               ROL       _scratchregister_1       ;...value
00:0459 AD9C60          	   662:                               LDA       global_memarea+0         ;and add it into the result, doubling...
00:045C 6D9C60          	   663:                               ADC       global_memarea+0         ;... it at the same time
00:045F 8D9C60          	   664:                               STA       global_memarea+0         ;
00:0462 AD9D60          	   665:                               LDA       global_memarea+1         ;and add it into the result, doubling...
00:0465 6D9D60          	   666:                               ADC       global_memarea+1         ;... it at the same time
00:0468 8D9D60          	   667:                               STA       global_memarea+1         ;
00:046B AD9E60          	   668:                               LDA       global_memarea+2         ;and add it into the result, doubling...
00:046E 6D9E60          	   669:                               ADC       global_memarea+2         ;... it at the same time
00:0471 8D9E60          	   670:                               STA       global_memarea+2         ;
00:0474 CA              	   671:                               DEX                                ;do more bits
00:0475 D0DE            	   672:                               BNE       bin2bcdconvloop          ;
00:0477 D8              	   673:                               CLD                                ;switch back to binary mode
00:0478 60              	   674:                               RTS                                ;
                        	   675: _OUT_SCRATCHREGISTER                                             ;inline assembler from souceline:0
00:0479 A555            	   676:                               LDA       _scratchregister_15      ;inline assembler from souceline:0
00:047B 203004          	   677:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:047E A554            	   678:                               LDA       _scratchregister_14      ;inline assembler from souceline:0
00:0480 203004          	   679:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:0483 A553            	   680:                               LDA       _scratchregister_13      ;inline assembler from souceline:0
00:0485 203004          	   681:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:0488 A552            	   682:                               LDA       _scratchregister_12      ;inline assembler from souceline:0
00:048A 203004          	   683:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:048D A551            	   684:                               LDA       _scratchregister_11      ;inline assembler from souceline:0
00:048F 203004          	   685:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:0492 A550            	   686:                               LDA       _scratchregister_10      ;inline assembler from souceline:0
00:0494 203004          	   687:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:0497 A54F            	   688:                               LDA       _scratchregister_9       ;inline assembler from souceline:0
00:0499 203004          	   689:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:049C A54E            	   690:                               LDA       _scratchregister_8       ;inline assembler from souceline:0
00:049E 203004          	   691:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:04A1 A54D            	   692:                               LDA       _scratchregister_7       ;inline assembler from souceline:0
00:04A3 203004          	   693:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:04A6 A54C            	   694:                               LDA       _scratchregister_6       ;inline assembler from souceline:0
00:04A8 203004          	   695:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:04AB A54B            	   696:                               LDA       _scratchregister_5       ;inline assembler from souceline:0
00:04AD 203004          	   697:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:04B0 A54A            	   698:                               LDA       _scratchregister_4       ;inline assembler from souceline:0
00:04B2 203004          	   699:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:04B5 A549            	   700:                               LDA       _scratchregister_3       ;inline assembler from souceline:0
00:04B7 203004          	   701:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:04BA A548            	   702:                               LDA       _scratchregister_2       ;inline assembler from souceline:0
00:04BC 203004          	   703:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:04BF A547            	   704:                               LDA       _scratchregister_1       ;inline assembler from souceline:0
00:04C1 203004          	   705:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:04C4 A546            	   706:                               LDA       _scratchregister_0       ;inline assembler from souceline:0
00:04C6 203004          	   707:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:04C9 A920            	   708:                               LDA       #$20                     ;inline assembler from souceline:0
00:04CB 209A03          	   709:                               JSR       _OUTPUTCHAR              ;inline assembler from souceline:0
00:04CE 60              	   710:                               RTS                                ;inline assembler from souceline:0
                        	   711: _OUT_FRAMEPOINTER                                                ;inline assembler from souceline:0
00:04CF A545            	   712:                               LDA       _framepointer_1          ;inline assembler from souceline:0
00:04D1 203004          	   713:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:04D4 A544            	   714:                               LDA       _framepointer_0          ;inline assembler from souceline:0
00:04D6 203004          	   715:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:04D9 60              	   716:                               RTS                                ;inline assembler from souceline:0
                        	   717: _OUT_USERSTACK                                                   ;inline assembler from souceline:0
00:04DA A541            	   718:                               LDA       _userstack_1             ;inline assembler from souceline:0
00:04DC 203004          	   719:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:04DF A540            	   720:                               LDA       _userstack_0             ;inline assembler from souceline:0
00:04E1 203004          	   721:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:04E4 204803          	   722:                               JSR       _OUTPUTCRLF              ;inline assembler from souceline:0
00:04E7 60              	   723:                               RTS                                ;inline assembler from souceline:0
                        	   724: _OUT_UNIREG0                                                     ;inline assembler from souceline:0
00:04E8 A503            	   725:                               LDA       _unireg0_3               ;inline assembler from souceline:0
00:04EA 203004          	   726:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:04ED A502            	   727:                               LDA       _unireg0_2               ;inline assembler from souceline:0
00:04EF 203004          	   728:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
                        	   729: _OUT_UNIREG0_2                                                   ;inline assembler from souceline:0
00:04F2 A501            	   730:                               LDA       _unireg0_1               ;inline assembler from souceline:0
00:04F4 203004          	   731:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:04F7 A500            	   732:                               LDA       _unireg0_0               ;inline assembler from souceline:0
00:04F9 203004          	   733:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:04FC 60              	   734:                               RTS                                ;inline assembler from souceline:0
                        	   735: _OUT_UNIREG1                                                     ;inline assembler from souceline:0
00:04FD A50B            	   736:                               LDA       _unireg1_3               ;inline assembler from souceline:0
00:04FF 203004          	   737:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:0502 A50A            	   738:                               LDA       _unireg1_2               ;inline assembler from souceline:0
00:0504 203004          	   739:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
                        	   740: _OUT_UNIREG1_2                                                   ;inline assembler from souceline:0
00:0507 A509            	   741:                               LDA       _unireg1_1               ;inline assembler from souceline:0
00:0509 203004          	   742:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:050C A508            	   743:                               LDA       _unireg1_0               ;inline assembler from souceline:0
00:050E 203004          	   744:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:0511 60              	   745:                               RTS                                ;inline assembler from souceline:0
                        	   746: _OUT_UNIREG2                                                     ;inline assembler from souceline:0
00:0512 A513            	   747:                               LDA       _unireg2_3               ;inline assembler from souceline:0
00:0514 203004          	   748:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:0517 A512            	   749:                               LDA       _unireg2_2               ;inline assembler from souceline:0
00:0519 203004          	   750:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
                        	   751: _OUT_UNIREG2_2                                                   ;inline assembler from souceline:0
00:051C A511            	   752:                               LDA       _unireg2_1               ;inline assembler from souceline:0
00:051E 203004          	   753:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:0521 A510            	   754:                               LDA       _unireg2_0               ;inline assembler from souceline:0
00:0523 203004          	   755:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:0526 60              	   756:                               RTS                                ;inline assembler from souceline:0
                        	   757: _OUT_UNIREG3                                                     ;inline assembler from souceline:0
00:0527 A51B            	   758:                               LDA       _unireg3_3               ;inline assembler from souceline:0
00:0529 203004          	   759:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:052C A51A            	   760:                               LDA       _unireg3_2               ;inline assembler from souceline:0
00:052E 203004          	   761:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
                        	   762: _OUT_UNIREG3_2                                                   ;inline assembler from souceline:0
00:0531 A519            	   763:                               LDA       _unireg3_1               ;inline assembler from souceline:0
00:0533 203004          	   764:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:0536 A518            	   765:                               LDA       _unireg3_0               ;inline assembler from souceline:0
00:0538 203004          	   766:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:053B 60              	   767:                               RTS                                ;inline assembler from souceline:0
                        	   768: _OUT_UNIREG4                                                     ;inline assembler from souceline:0
00:053C A523            	   769:                               LDA       _unireg4_3               ;inline assembler from souceline:0
00:053E 203004          	   770:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:0541 A522            	   771:                               LDA       _unireg4_2               ;inline assembler from souceline:0
00:0543 203004          	   772:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
                        	   773: _OUT_UNIREG4_2                                                   ;inline assembler from souceline:0
00:0546 A521            	   774:                               LDA       _unireg4_1               ;inline assembler from souceline:0
00:0548 203004          	   775:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:054B A520            	   776:                               LDA       _unireg4_0               ;inline assembler from souceline:0
00:054D 203004          	   777:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:0550 60              	   778:                               RTS                                ;inline assembler from souceline:0
                        	   779: _OUT_UNIREG5                                                     ;inline assembler from souceline:0
00:0551 A52B            	   780:                               LDA       _unireg5_3               ;inline assembler from souceline:0
00:0553 203004          	   781:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:0556 A52A            	   782:                               LDA       _unireg5_2               ;inline assembler from souceline:0
00:0558 203004          	   783:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
                        	   784: _OUT_UNIREG5_2                                                   ;inline assembler from souceline:0
00:055B A529            	   785:                               LDA       _unireg5_1               ;inline assembler from souceline:0
00:055D 203004          	   786:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:0560 A528            	   787:                               LDA       _unireg5_0               ;inline assembler from souceline:0
00:0562 203004          	   788:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:0565 60              	   789:                               RTS                                ;inline assembler from souceline:0
                        	   790: _OUT_UNIREG6                                                     ;inline assembler from souceline:0
00:0566 A533            	   791:                               LDA       _unireg6_3               ;inline assembler from souceline:0
00:0568 203004          	   792:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:056B A532            	   793:                               LDA       _unireg6_2               ;inline assembler from souceline:0
00:056D 203004          	   794:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
                        	   795: _OUT_UNIREG6_2                                                   ;inline assembler from souceline:0
00:0570 A531            	   796:                               LDA       _unireg6_1               ;inline assembler from souceline:0
00:0572 203004          	   797:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:0575 A530            	   798:                               LDA       _unireg6_0               ;inline assembler from souceline:0
00:0577 203004          	   799:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:057A 60              	   800:                               RTS                                ;inline assembler from souceline:0
                        	   801: _OUT_UNIREG7                                                     ;inline assembler from souceline:0
00:057B A53B            	   802:                               LDA       _unireg7_3               ;inline assembler from souceline:0
00:057D 203004          	   803:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:0580 A53A            	   804:                               LDA       _unireg7_2               ;inline assembler from souceline:0
00:0582 203004          	   805:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
                        	   806: _OUT_UNIREG7_2                                                   ;inline assembler from souceline:0
00:0585 A539            	   807:                               LDA       _unireg7_1               ;inline assembler from souceline:0
00:0587 203004          	   808:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:058A A538            	   809:                               LDA       _unireg7_0               ;inline assembler from souceline:0
00:058C 203004          	   810:                               JSR       _OUTHEX                  ;inline assembler from souceline:0
00:058F 60              	   811:                               RTS                                ;inline assembler from souceline:0
00:0590 48              	   812: _OUTAT_UNIREG0                PHA                                ;
00:0591 98              	   813:                               TYA                                ;
00:0592 48              	   814:                               PHA                                ;
00:0593 20F204          	   815:                               JSR       _OUT_UNIREG0_2           ;
00:0596 A920            	   816:                               LDA       #$20                     ;
00:0598 209A03          	   817:                               JSR       _OUTPUTCHAR              ;
00:059B A003            	   818:                               LDY       #3                       ;
00:059D B100            	   819: out_at_loop_r0                LDA       (_unireg0),Y             ;
00:059F 203004          	   820:                               JSR       _OUTHEX                  ;
00:05A2 88              	   821:                               DEY                                ;
00:05A3 10F8            	   822:                               BPL       out_at_loop_r0           ;
00:05A5 204803          	   823:                               JSR       _OUTPUTCRLF              ;
00:05A8 68              	   824:                               PLA                                ;
00:05A9 A8              	   825:                               TAY                                ;
00:05AA 68              	   826:                               PLA                                ;
00:05AB 60              	   827:                               RTS                                ;inline assembler from souceline:0
00:05AC 48              	   828: _OUTAT_UNIREG1                PHA                                ;
00:05AD 98              	   829:                               TYA                                ;
00:05AE 48              	   830:                               PHA                                ;
00:05AF 200705          	   831:                               JSR       _OUT_UNIREG1_2           ;
00:05B2 A920            	   832:                               LDA       #$20                     ;
00:05B4 209A03          	   833:                               JSR       _OUTPUTCHAR              ;
00:05B7 A003            	   834:                               LDY       #3                       ;
00:05B9 B108            	   835: out_at_loop_r1                LDA       (_unireg1),Y             ;
00:05BB 203004          	   836:                               JSR       _OUTHEX                  ;
00:05BE 88              	   837:                               DEY                                ;
00:05BF 10F8            	   838:                               BPL       out_at_loop_r1           ;
00:05C1 204803          	   839:                               JSR       _OUTPUTCRLF              ;
00:05C4 68              	   840:                               PLA                                ;
00:05C5 A8              	   841:                               TAY                                ;
00:05C6 68              	   842:                               PLA                                ;
00:05C7 60              	   843:                               RTS                                ;inline assembler from souceline:0
00:05C8 48              	   844: _OUTAT_UNIREG2                PHA                                ;
00:05C9 98              	   845:                               TYA                                ;
00:05CA 48              	   846:                               PHA                                ;
00:05CB 201C05          	   847:                               JSR       _OUT_UNIREG2_2           ;
00:05CE A920            	   848:                               LDA       #$20                     ;
00:05D0 209A03          	   849:                               JSR       _OUTPUTCHAR              ;
00:05D3 A003            	   850:                               LDY       #3                       ;
00:05D5 B110            	   851: out_at_loop_r2                LDA       (_unireg2),Y             ;
00:05D7 203004          	   852:                               JSR       _OUTHEX                  ;
00:05DA 88              	   853:                               DEY                                ;
00:05DB 10F8            	   854:                               BPL       out_at_loop_r2           ;
00:05DD 204803          	   855:                               JSR       _OUTPUTCRLF              ;
00:05E0 68              	   856:                               PLA                                ;
00:05E1 A8              	   857:                               TAY                                ;
00:05E2 68              	   858:                               PLA                                ;
00:05E3 60              	   859:                               RTS                                ;inline assembler from souceline:0
00:05E4 48              	   860: _OUTAT_UNIREG3                PHA                                ;
00:05E5 98              	   861:                               TYA                                ;
00:05E6 48              	   862:                               PHA                                ;
00:05E7 203105          	   863:                               JSR       _OUT_UNIREG3_2           ;
00:05EA A920            	   864:                               LDA       #$20                     ;
00:05EC 209A03          	   865:                               JSR       _OUTPUTCHAR              ;
00:05EF A003            	   866:                               LDY       #3                       ;
00:05F1 B118            	   867: out_at_loop_r3                LDA       (_unireg3),Y             ;
00:05F3 203004          	   868:                               JSR       _OUTHEX                  ;
00:05F6 88              	   869:                               DEY                                ;
00:05F7 10F8            	   870:                               BPL       out_at_loop_r3           ;
00:05F9 204803          	   871:                               JSR       _OUTPUTCRLF              ;
00:05FC 68              	   872:                               PLA                                ;
00:05FD A8              	   873:                               TAY                                ;
00:05FE 68              	   874:                               PLA                                ;
00:05FF 60              	   875:                               RTS                                ;inline assembler from souceline:0
00:0600 48              	   876: _OUTAT_UNIREG4                PHA                                ;
00:0601 98              	   877:                               TYA                                ;
00:0602 48              	   878:                               PHA                                ;
00:0603 204605          	   879:                               JSR       _OUT_UNIREG4_2           ;
00:0606 A920            	   880:                               LDA       #$20                     ;
00:0608 209A03          	   881:                               JSR       _OUTPUTCHAR              ;
00:060B A003            	   882:                               LDY       #3                       ;
00:060D B120            	   883: out_at_loop_r4                LDA       (_unireg4),Y             ;
00:060F 203004          	   884:                               JSR       _OUTHEX                  ;
00:0612 88              	   885:                               DEY                                ;
00:0613 10F8            	   886:                               BPL       out_at_loop_r4           ;
00:0615 204803          	   887:                               JSR       _OUTPUTCRLF              ;
00:0618 68              	   888:                               PLA                                ;
00:0619 A8              	   889:                               TAY                                ;
00:061A 68              	   890:                               PLA                                ;
00:061B 60              	   891:                               RTS                                ;inline assembler from souceline:0
00:061C 48              	   892: _OUTAT_UNIREG5                PHA                                ;
00:061D 98              	   893:                               TYA                                ;
00:061E 48              	   894:                               PHA                                ;
00:061F 205B05          	   895:                               JSR       _OUT_UNIREG5_2           ;
00:0622 A920            	   896:                               LDA       #$20                     ;
00:0624 209A03          	   897:                               JSR       _OUTPUTCHAR              ;
00:0627 A003            	   898:                               LDY       #3                       ;
00:0629 B128            	   899: out_at_loop_r5                LDA       (_unireg5),Y             ;
00:062B 203004          	   900:                               JSR       _OUTHEX                  ;
00:062E 88              	   901:                               DEY                                ;
00:062F 10F8            	   902:                               BPL       out_at_loop_r5           ;
00:0631 204803          	   903:                               JSR       _OUTPUTCRLF              ;
00:0634 68              	   904:                               PLA                                ;
00:0635 A8              	   905:                               TAY                                ;
00:0636 68              	   906:                               PLA                                ;
00:0637 60              	   907:                               RTS                                ;inline assembler from souceline:0
00:0638 48              	   908: _OUTAT_UNIREG6                PHA                                ;
00:0639 98              	   909:                               TYA                                ;
00:063A 48              	   910:                               PHA                                ;
00:063B 207005          	   911:                               JSR       _OUT_UNIREG6_2           ;
00:063E A920            	   912:                               LDA       #$20                     ;
00:0640 209A03          	   913:                               JSR       _OUTPUTCHAR              ;
00:0643 A003            	   914:                               LDY       #3                       ;
00:0645 B130            	   915: out_at_loop_r6                LDA       (_unireg6),Y             ;
00:0647 203004          	   916:                               JSR       _OUTHEX                  ;
00:064A 88              	   917:                               DEY                                ;
00:064B 10F8            	   918:                               BPL       out_at_loop_r6           ;
00:064D 204803          	   919:                               JSR       _OUTPUTCRLF              ;
00:0650 68              	   920:                               PLA                                ;
00:0651 A8              	   921:                               TAY                                ;
00:0652 68              	   922:                               PLA                                ;
00:0653 60              	   923:                               RTS                                ;inline assembler from souceline:0
00:0654 48              	   924: _OUTAT_UNIREG7                PHA                                ;
00:0655 98              	   925:                               TYA                                ;
00:0656 48              	   926:                               PHA                                ;
00:0657 208505          	   927:                               JSR       _OUT_UNIREG7_2           ;
00:065A A920            	   928:                               LDA       #$20                     ;
00:065C 209A03          	   929:                               JSR       _OUTPUTCHAR              ;
00:065F A003            	   930:                               LDY       #3                       ;
00:0661 B138            	   931: out_at_loop_r7                LDA       (_unireg7),Y             ;
00:0663 203004          	   932:                               JSR       _OUTHEX                  ;
00:0666 88              	   933:                               DEY                                ;
00:0667 10F8            	   934:                               BPL       out_at_loop_r7           ;
00:0669 204803          	   935:                               JSR       _OUTPUTCRLF              ;
00:066C 68              	   936:                               PLA                                ;
00:066D A8              	   937:                               TAY                                ;
00:066E 68              	   938:                               PLA                                ;
00:066F 60              	   939:                               RTS                                ;inline assembler from souceline:0
00:0670 48              	   940: _OUTAT_FRAMEPOINTER           PHA                                ;
00:0671 98              	   941:                               TYA                                ;
00:0672 48              	   942:                               PHA                                ;
00:0673 20CF04          	   943:                               JSR       _OUT_FRAMEPOINTER        ;
00:0676 A920            	   944:                               LDA       #$20                     ;
00:0678 209A03          	   945:                               JSR       _OUTPUTCHAR              ;
00:067B A003            	   946:                               LDY       #3                       ;
00:067D B144            	   947: out_at_loop_frmptr            LDA       (_framepointer),Y        ;
00:067F 203004          	   948:                               JSR       _OUTHEX                  ;
00:0682 88              	   949:                               DEY                                ;
00:0683 10F8            	   950:                               BPL       out_at_loop_frmptr       ;
00:0685 204803          	   951:                               JSR       _OUTPUTCRLF              ;
00:0688 68              	   952:                               PLA                                ;
00:0689 A8              	   953:                               TAY                                ;
00:068A 68              	   954:                               PLA                                ;
00:068B 60              	   955:                               RTS                                ;inline assembler from souceline:0
00:068C A576            	   956: _OUT_M1                       LDA       X1                       ;Load Value of Exponent of the M1 Register
00:068E 203004          	   957:                               JSR       _OUTHEX                  ;Output Exponent
00:0691 A920            	   958:                               LDA       #$20                     ;
00:0693 209A03          	   959:                               JSR       _OUTPUTCHAR              ;
00:0696 A579            	   960:                               LDA       M1_2                     ;
00:0698 203004          	   961:                               JSR       _OUTHEX                  ;Output Mantissa (Hi)
00:069B A578            	   962:                               LDA       M1_1                     ;
00:069D 203004          	   963:                               JSR       _OUTHEX                  ;Output Mantissa (Mid)
00:06A0 A577            	   964:                               LDA       M1_0                     ;
00:06A2 203004          	   965:                               JSR       _OUTHEX                  ;Output Mantissa (Lo)
00:06A5 204803          	   966:                               JSR       _OUTPUTCRLF              ;
00:06A8 60              	   967:                               RTS                                ;
00:06A9 A572            	   968: _OUT_M2                       LDA       X2                       ;Load Value of Exponent of the M1 Register
00:06AB 203004          	   969:                               JSR       _OUTHEX                  ;Output Exponent
00:06AE A920            	   970:                               LDA       #$20                     ;
00:06B0 209A03          	   971:                               JSR       _OUTPUTCHAR              ;
00:06B3 A575            	   972:                               LDA       M2_2                     ;
00:06B5 203004          	   973:                               JSR       _OUTHEX                  ;Output Mantissa (Hi)
00:06B8 A574            	   974:                               LDA       M2_1                     ;
00:06BA 203004          	   975:                               JSR       _OUTHEX                  ;Output Mantissa (Mid)
00:06BD A573            	   976:                               LDA       M2_0                     ;
00:06BF 203004          	   977:                               JSR       _OUTHEX                  ;Output Mantissa (Lo)
00:06C2 204803          	   978:                               JSR       _OUTPUTCRLF              ;
00:06C5 60              	   979:                               RTS                                ;
00:06C6 A900            	   980: _UNIREG0_DECIMAL              LDA       #0                       ;convert unireg0 to decimal
00:06C8 8D9C60          	   981:                               STA       global_memarea           ;output will be in global_memarea, so put a terminator
00:06CB A900            	   982: _conv2decimal64               LDA       #0                       ;initialize the remainder to zero
00:06CD A207            	   983:                               LDX       #7                       ;
00:06CF 9546            	   984: _push_clear_scratchreg        STA       _scratchregister_0,X     ;clear scratchregister
00:06D1 CA              	   985:                               DEX                                ;
00:06D2 10FB            	   986:                               BPL       _push_clear_scratchreg   ;
00:06D4 18              	   987:                               CLC                                ;
00:06D5 A240            	   988:                               LDX       #64                      ;
00:06D7 2600            	   989: _conv2dec_divloop64_long      ROL       _unireg0_0               ;original: value
00:06D9 2601            	   990:                               ROL       _unireg0_1               ;original: value + 1
00:06DB 2602            	   991:                               ROL       _unireg0_2               ;
00:06DD 2603            	   992:                               ROL       _unireg0_3               ;
00:06DF 2604            	   993:                               ROL       _uniregA_0               ;
00:06E1 2605            	   994:                               ROL       _uniregA_1               ;
00:06E3 2606            	   995:                               ROL       _uniregA_2               ;
00:06E5 2607            	   996:                               ROL       _uniregA_3               ;
00:06E7 2646            	   997:                               ROL       _scratchregister_0       ;
00:06E9 2647            	   998:                               ROL       _scratchregister_1       ;
00:06EB 2648            	   999:                               ROL       _scratchregister_2       ;
00:06ED 2649            	  1000:                               ROL       _scratchregister_3       ;
00:06EF 264A            	  1001:                               ROL       _scratchregister_4       ;
00:06F1 264B            	  1002:                               ROL       _scratchregister_5       ;
00:06F3 264C            	  1003:                               ROL       _scratchregister_6       ;
00:06F5 264D            	  1004:                               ROL       _scratchregister_7       ;
00:06F7 38              	  1005:                               SEC                                ;a,y - divident - divisor
00:06F8 A546            	  1006:                               LDA       _scratchregister_0       ;
00:06FA E90A            	  1007:                               SBC       #10                      ;
00:06FC 854E            	  1008:                               STA       _scratchregister_8       ;save low byte in upper half of scratchregister
00:06FE 08              	  1009:                               PHP                                ;
00:06FF A001            	  1010:                               LDY       #1                       ;
00:0701 28              	  1011: _conv_subresult               PLP                                ;save result
00:0702 B94600          	  1012:                               LDA       _scratchregister_0,Y     ;save result
00:0705 E900            	  1013:                               SBC       #0                       ;
00:0707 08              	  1014:                               PHP                                ;
00:0708 994E00          	  1015:                               STA       _scratchregister_8,Y     ;
00:070B C8              	  1016:                               INY                                ;
00:070C C008            	  1017:                               CPY       #8                       ;
00:070E D0F1            	  1018:                               BNE       _conv_subresult          ;
00:0710 28              	  1019:                               PLP                                ;
00:0711 900B            	  1020:                               BCC       _ignore_calculation64    ;branch if dividend < divisor
00:0713 A007            	  1021:                               LDY       #7                       ;
00:0715 B94E00          	  1022: _conv_posresult               LDA       _scratchregister_8,Y     ;save positive result
00:0718 994600          	  1023:                               STA       _scratchregister_0,Y     ;
00:071B 88              	  1024:                               DEY                                ;
00:071C 10F7            	  1025:                               BPL       _conv_posresult          ;
00:071E CA              	  1026: _ignore_calculation64         DEX                                ;
00:071F D02D            	  1027:                               BNE       _conv2dec_divloop64      ;
00:0721 2600            	  1028:                               ROL       _unireg0_0               ;shift in the last bit of the quotient
00:0723 2601            	  1029:                               ROL       _unireg0_1               ;
00:0725 2602            	  1030:                               ROL       _unireg0_2               ;
00:0727 2603            	  1031:                               ROL       _unireg0_3               ;
00:0729 2604            	  1032:                               ROL       _uniregA_0               ;
00:072B 2605            	  1033:                               ROL       _uniregA_1               ;
00:072D 2606            	  1034:                               ROL       _uniregA_2               ;
00:072F 2607            	  1035:                               ROL       _uniregA_3               ;
00:0731 A546            	  1036:                               LDA       _scratchregister_0       ;
00:0733 18              	  1037:                               CLC                                ;
00:0734 6930            	  1038:                               ADC       #'0'                     ;
00:0736 205207          	  1039:                               JSR       _push_char               ;Append char to beginning of string global_memarea
00:0739 A500            	  1040:                               LDA       _unireg0_0               ;if value != 0, then continue dividing
00:073B 0501            	  1041:                               ORA       _unireg0_1               ;
00:073D 0502            	  1042:                               ORA       _unireg0_2               ;
00:073F 0503            	  1043:                               ORA       _unireg0_3               ;
00:0741 0504            	  1044:                               ORA       _uniregA_0               ;
00:0743 0505            	  1045:                               ORA       _uniregA_1               ;
00:0745 0506            	  1046:                               ORA       _uniregA_2               ;
00:0747 0507            	  1047:                               ORA       _uniregA_3               ;
00:0749 F006            	  1048:                               BEQ       _conv2dec_exit           ;branch if value zero
00:074B 4CCB06          	  1049:                               JMP       _conv2decimal64          ;
00:074E 4CD706          	  1050: _conv2dec_divloop64           JMP       _conv2dec_divloop64_long ;
00:0751 60              	  1051: _conv2dec_exit                RTS                                ;
00:0752 48              	  1052: _push_char                    PHA                                ;Push new first char onto stack
00:0753 A000            	  1053:                               LDY       #0                       ;
00:0755 B99C60          	  1054: _push_char_loop               LDA       global_memarea,y         ;Get char on string and put into X
00:0758 AA              	  1055:                               TAX                                ;
00:0759 68              	  1056:                               PLA                                ;
00:075A 999C60          	  1057:                               STA       global_memarea,y         ;Pull char off stack and add it to the string
00:075D C8              	  1058:                               INY                                ;
00:075E 8A              	  1059:                               TXA                                ;
00:075F 48              	  1060:                               PHA                                ;Push char from string onto stack
00:0760 D0F3            	  1061:                               BNE       _push_char_loop          ;
00:0762 68              	  1062:                               PLA                                ;
00:0763 999C60          	  1063:                               STA       global_memarea,y         ;Pull the null of the stack and add to the end of the 
00:0766 60              	  1064:                               RTS                                ;
00:0767 A200            	  1065: _prt_global_memarea           LDX       #0                       ;print out global_memory with null terminated string
00:0769 BD9C60          	  1066: _prt_global_mem_loop          LDA       global_memarea,X         ;get char from buffer
00:076C F007            	  1067:                               BEQ       _prt_global_return       ;
00:076E 209A03          	  1068:                               JSR       _OUTPUTCHAR              ;
00:0771 E8              	  1069:                               INX                                ;
00:0772 4C6907          	  1070:                               JMP       _prt_global_mem_loop     ;
00:0775 60              	  1071: _prt_global_return            RTS                                ;all chars printed
00:0776 AD0B78          	  1072: init_clocktimer               LDA       VIAACR                   ;Put Timer 1 into Freerun Mode
00:0779 0940            	  1073:                               ORA       #%01000000               ;Put Timer into Freerun Mode, and disable all others
00:077B 8D0B78          	  1074:                               STA       VIAACR                   ;
00:077E A9C0            	  1075:                               LDA       #%11000000               ;Enable Interrupts for Timer 1
00:0780 8D0E78          	  1076:                               STA       VIAIER                   ;
00:0783 AD0060          	  1077:                               LDA       t1interval_0             ;Initialize Timer to 10ms
00:0786 8D0478          	  1078:                               STA       VIAT1CL                  ;
00:0789 AD0160          	  1079:                               LDA       t1interval_1             ;
00:078C 8D0578          	  1080:                               STA       VIAT1CH                  ;
00:078F A900            	  1081:                               LDA       #0                       ;
00:0791 855E            	  1082:                               STA       global_tickscounter_0    ;
00:0793 855F            	  1083:                               STA       global_tickscounter_1    ;
00:0795 8560            	  1084:                               STA       global_tickscounter_2    ;
00:0797 8561            	  1085:                               STA       global_tickscounter_3    ;
00:0799 8DA663          	  1086:                               STA       lcd_update_seconds       ;
00:079C 8DA763          	  1087:                               STA       lcd_update_minutes       ;
00:079F 8DA863          	  1088:                               STA       lcd_update_hours         ;
00:07A2 8DA963          	  1089:                               STA       lcd_update_days_0        ;
00:07A5 8DAA63          	  1090:                               STA       lcd_update_days_1        ;
00:07A8 8DA463          	  1091:                               STA       lcd_update_statecounter  ;
00:07AB 60              	  1092: end_irq_handler_clocktimer    RTS                                ;
00:07AC 2C0D78          	  1093: irq_handler_clocktimer        BIT       VIAIFR                   ;check for general VIA interrupts
00:07AF 10FA            	  1094:                               BPL       end_irq_handler_clocktimer;branch, if bit 7 is 0, no irq from via
00:07B1 50F8            	  1095:                               BVC       end_irq_handler_clocktimer;branch, if bit 6 is 0, no irq from timer 1
00:07B3 AD0478          	  1096:                               LDA       VIAT1CL                  ;reset interrupt flag
00:07B6 AD0578          	  1097:                               LDA       VIAT1CH                  ;
00:07B9 ADA563          	  1098:                               LDA       lcd_update_ticks         ;load lowest tick counter, for check for 100 * 10ms
00:07BC C964            	  1099:                               CMP       #100                     ;check for one second gone, only valid if tickrate is 
00:07BE D006            	  1100:                               BNE       irq_handler_clocktimer_do_normal;
00:07C0 20DD07          	  1101:                               JSR       lcd_uptime_counter       ;calculate uptime in decimal
00:07C3 9CA563          	  1102:                               STZ       lcd_update_ticks         ;set ticks counter back to zero
00:07C6 EEA563          	  1103: irq_handler_clocktimer_do_normal INC       lcd_update_ticks         ;increment ticks counter
00:07C9 E65E            	  1104: irq_handler_clocktimer_do_ticks INC       global_tickscounter_0    ;count ticks the normal way
00:07CB D00A            	  1105:                               BNE       end_irq_handler_clocktimer_pla;
00:07CD E65F            	  1106:                               INC       global_tickscounter_1    ;
00:07CF D006            	  1107:                               BNE       end_irq_handler_clocktimer_pla;
00:07D1 E660            	  1108:                               INC       global_tickscounter_2    ;
00:07D3 D002            	  1109:                               BNE       end_irq_handler_clocktimer_pla;
00:07D5 E661            	  1110:                               INC       global_tickscounter_3    ;
00:07D7 6C6400          	  1111: end_irq_handler_clocktimer_pla JMP       (t1calledsubroutine)     ;call the user defined ticks routine
00:07DA 60              	  1112:                               RTS                                ;End local Interrupt, Jump back to Main IRQ Handler
00:07DB EA              	  1113: t1calledsubdummy              NOP                                ;
00:07DC 60              	  1114:                               RTS                                ;
00:07DD F8              	  1115: lcd_uptime_counter            SED                                ;calculate uptime with decimal mode of the 6502
00:07DE 18              	  1116:                               CLC                                ;
00:07DF ADA663          	  1117:                               LDA       lcd_update_seconds       ;
00:07E2 6901            	  1118:                               ADC       #1                       ;
00:07E4 8DA663          	  1119:                               STA       lcd_update_seconds       ;
00:07E7 C960            	  1120:                               CMP       #$60                     ;
00:07E9 3034            	  1121:                               BMI       lcdcontinueuptime0       ;
00:07EB 9CA663          	  1122:                               STZ       lcd_update_seconds       ;set seconds to zero
00:07EE 18              	  1123:                               CLC                                ;
00:07EF ADA763          	  1124:                               LDA       lcd_update_minutes       ;
00:07F2 6901            	  1125:                               ADC       #1                       ;
00:07F4 8DA763          	  1126:                               STA       lcd_update_minutes       ;
00:07F7 C960            	  1127:                               CMP       #$60                     ;
00:07F9 3024            	  1128:                               BMI       lcdcontinueuptime0       ;
00:07FB 9CA763          	  1129:                               STZ       lcd_update_minutes       ;set minutes to zero
00:07FE 18              	  1130:                               CLC                                ;
00:07FF ADA863          	  1131:                               LDA       lcd_update_hours         ;
00:0802 6901            	  1132:                               ADC       #1                       ;
00:0804 8DA863          	  1133:                               STA       lcd_update_hours         ;
00:0807 C924            	  1134:                               CMP       #$24                     ;
00:0809 3014            	  1135:                               BMI       lcdcontinueuptime0       ;
00:080B 9CA863          	  1136:                               STZ       lcd_update_hours         ;set hours to zero
00:080E 18              	  1137:                               CLC                                ;
00:080F ADA963          	  1138:                               LDA       lcd_update_days_0        ;
00:0812 6901            	  1139:                               ADC       #1                       ;
00:0814 8DA963          	  1140:                               STA       lcd_update_days_0        ;
00:0817 ADAA63          	  1141:                               LDA       lcd_update_days_1        ;
00:081A 6900            	  1142:                               ADC       #0                       ;
00:081C 8DAA63          	  1143:                               STA       lcd_update_days_1        ;
00:081F D8              	  1144: lcdcontinueuptime0            CLD                                ;clear decimal flag for normal operation
00:0820 60              	  1145:                               RTS                                ;
                        	  1146: print_lcdchar                                                    ;Dummy Label for lcd_instruction and print_lcdchar
00:0821 60              	  1147: lcd_instruction               RTS                                ;Dummy Subroutine for the above routines
00:0822 A900            	  1148: init_aciaserial               LDA       #0                       ;soft reset, (value not important)
00:0824 8D1178          	  1149:                               STA       ACIASTATUS               ;write into status register does soft reset
00:0827 A91F            	  1150:                               LDA       #%00011111               ;Set 8bits + 1 stop, 19200 baud
00:0829 8D1378          	  1151:                               STA       ACIACONTROL              ;
00:082C A929            	  1152:                               LDA       #%00101001               ;odd par, no echo, interrupts disabled for TxD
00:082E 8D1278          	  1153:                               STA       ACIACOMMAND              ;
00:0831 A900            	  1154:                               LDA       #0                       ;
00:0833 8D9F63          	  1155:                               STA       inbuf_irqptr             ;
00:0836 8DA063          	  1156:                               STA       inbuf_readptr            ;
00:0839 8DA163          	  1157:                               STA       inbuf_readcounter        ;
00:083C 60              	  1158:                               RTS                                ;
00:083D 2C1178          	  1159: aciairqhandler                BIT       ACIASTATUS               ;check if irq is on acia
00:0840 1043            	  1160:                               BPL       inbuf_exitaciairqhandlernopla;branch to rts if no irq
00:0842 A9F5            	  1161:                               LDA       #245                     ;
00:0844 8DA463          	  1162:                               STA       lcd_update_statecounter  ;disable lcd update for some (255-245) seconds
00:0847 A214            	  1163:                               LDX       #20                      ;loop for waiting if register is empty
00:0849 AD1178          	  1164: aciairqwaitforchar            LDA       ACIASTATUS               ;check bits
00:084C 4A              	  1165:                               LSR                                ;
00:084D B037            	  1166:                               BCS       inbuf_exitaciairqhandler_with_parity;parity error detected
00:084F 4A              	  1167:                               LSR                                ;
00:0850 B03C            	  1168:                               BCS       inbuf_exitaciairqhandler_with_frameing;framing error detected
00:0852 4A              	  1169:                               LSR                                ;
00:0853 B035            	  1170:                               BCS       inbuf_exitaciairqhandler_with_overrun;overrun error detected
00:0855 4A              	  1171:                               LSR                                ;
00:0856 B00C            	  1172:                               BCS       acia_process_irq_char    ;irq was from acia read, char is ready to read
00:0858 4A              	  1173:                               LSR                                ;jump over Transmit Data Register empty Flag, will not
00:0859 4A              	  1174:                               LSR                                ;check for DCD ready
00:085A 9036            	  1175:                               BCC       inbuf_exitaciairqhandler_with_dcd_ready;DCD line became ready when LOW
00:085C 4A              	  1176:                               LSR                                ;check for DSR ready
00:085D 9038            	  1177:                               BCC       inbuf_exitaciairqhandler_with_dsr_ready;DSR line became ready when LOW
00:085F CA              	  1178:                               DEX                                ;decrement timeout counter, char not ready in acia
00:0860 F039            	  1179:                               BEQ       inbuf_exitaciairqhandler_with_error;we checked 20 times, with no char ready, so
00:0862 80E5            	  1180:                               BRA       aciairqwaitforchar       ;no char in acia, jump to check again
00:0864 EEA163          	  1181: acia_process_irq_char         INC       inbuf_readcounter        ;one char more in buffer
00:0867 AD1078          	  1182:                               LDA       ACIADATA                 ;get char
00:086A C9FF            	  1183:                               CMP       #$FF                     ;if received char is the escape char, then send them t
00:086C D00E            	  1184:                               BNE       inbuf_escape_char_checked;
00:086E A9FF            	  1185:                               LDA       #$FF                     ;load FF char into accu
00:0870 AE9F63          	  1186:                               LDX       inbuf_irqptr             ;
00:0873 9D9F62          	  1187:                               STA       global_inbufacia,X       ;store char in buffer
00:0876 EE9F63          	  1188:                               INC       inbuf_irqptr             ;
00:0879 EEA163          	  1189:                               INC       inbuf_readcounter        ;
00:087C AE9F63          	  1190: inbuf_escape_char_checked     LDX       inbuf_irqptr             ;
00:087F 9D9F62          	  1191:                               STA       global_inbufacia,X       ;store char in buffer
00:0882 EE9F63          	  1192:                               INC       inbuf_irqptr             ;
00:0885 60              	  1193: inbuf_exitaciairqhandlernopla RTS                                ;
00:0886 A950            	  1194: inbuf_exitaciairqhandler_with_parity LDA       #'P'                     ;
00:0888 8013            	  1195:                               BRA       inbuf_exitirqhandler_with_any_error;
00:088A A94F            	  1196: inbuf_exitaciairqhandler_with_overrun LDA       #'O'                     ;
00:088C 800F            	  1197:                               BRA       inbuf_exitirqhandler_with_any_error;
00:088E A946            	  1198: inbuf_exitaciairqhandler_with_frameing LDA       #'F'                     ;
00:0890 800B            	  1199:                               BRA       inbuf_exitirqhandler_with_any_error;
00:0892 A944            	  1200: inbuf_exitaciairqhandler_with_dcd_ready LDA       #'D'                     ;
00:0894 60              	  1201:                               RTS                                ;exit from dcd ready interrupt without any action, you
00:0895 8006            	  1202:                               BRA       inbuf_exitirqhandler_with_any_error;
00:0897 A953            	  1203: inbuf_exitaciairqhandler_with_dsr_ready LDA       #'S'                     ;
00:0899 8002            	  1204:                               BRA       inbuf_exitirqhandler_with_any_error;
00:089B A949            	  1205: inbuf_exitaciairqhandler_with_error LDA       #'I'                     ;
00:089D 48              	  1206: inbuf_exitirqhandler_with_any_error PHA                                ;save status code
00:089E AE9F63          	  1207:                               LDX       inbuf_irqptr             ;load index for read buffer
00:08A1 A9FF            	  1208:                               LDA       #$FF                     ;put escape char in buffer
00:08A3 9D9F62          	  1209:                               STA       global_inbufacia,X       ;store char in buffer
00:08A6 EE9F63          	  1210:                               INC       inbuf_irqptr             ;
00:08A9 EEA163          	  1211:                               INC       inbuf_readcounter        ;
00:08AC AE9F63          	  1212:                               LDX       inbuf_irqptr             ;load index for read buffer
00:08AF 68              	  1213:                               PLA                                ;restore status code
00:08B0 9D9F62          	  1214:                               STA       global_inbufacia,X       ;store char in buffer
00:08B3 EE9F63          	  1215:                               INC       inbuf_irqptr             ;
00:08B6 EEA163          	  1216:                               INC       inbuf_readcounter        ;
00:08B9 AD1078          	  1217:                               LDA       ACIADATA                 ;get char from acia only for resetting the irq line
00:08BC 60              	  1218:                               RTS                                ;
00:08BD AD0B78          	  1219: init_transmittimer            LDA       VIAACR                   ;Put Timer 2 into One Shot Mode
00:08C0 29DF            	  1220:                               AND       #%11011111               ;Put Timer 2 into One Shot Mode
00:08C2 8D0B78          	  1221:                               STA       VIAACR                   ;
00:08C5 A9A0            	  1222:                               LDA       #%10100000               ;Enable Interrupts for Timer 2
00:08C7 8D0E78          	  1223:                               STA       VIAIER                   ;
00:08CA A900            	  1224: output_acia_init              LDA       #0                       ;initialize outputbuffer ptrs
00:08CC 8D9D62          	  1225:                               STA       outbuf_writeptr          ;
00:08CF 8D9C62          	  1226:                               STA       outbuf_irqptr            ;
00:08D2 8D9E62          	  1227:                               STA       outbuf_writecounter      ;
00:08D5 60              	  1228:                               RTS                                ;
00:08D6 A920            	  1229: start_transmittimer           LDA       #$20                     ;set timer to count parallel to transmit data
00:08D8 8D0878          	  1230:                               STA       VIAT2CL                  ;see table above for time
00:08DB A903            	  1231:                               LDA       #$03                     ;
00:08DD 8D0978          	  1232:                               STA       VIAT2CH                  ;write in high order counter, this will start the time
00:08E0 60              	  1233:                               RTS                                ;
00:08E1 2C0D78          	  1234: irq_handler_transmittimer     BIT       VIAIFR                   ;check for general VIA interrupts
00:08E4 1025            	  1235:                               BPL       end_irq_handler_transmittimer;branch, if bit 7 is 0, no irq from via
00:08E6 AD0D78          	  1236:                               LDA       VIAIFR                   ;
00:08E9 2920            	  1237:                               AND       #%00100000               ;check for bit 5 if IFR
00:08EB F01E            	  1238:                               BEQ       end_irq_handler_transmittimer;IRQ was not from Timer 2
00:08ED AD0978          	  1239:                               LDA       VIAT2CH                  ;read low high register Timer 2, has no meaning at the
00:08F0 AD0878          	  1240:                               LDA       VIAT2CL                  ;read low order register Timer 2, reset the interrupt 
00:08F3 AD9E62          	  1241:                               LDA       outbuf_writecounter      ;check writecounter if char in buffer
00:08F6 F013            	  1242:                               BEQ       end_irq_handler_transmittimer;if not 0, output char in buffer
00:08F8 AE9C62          	  1243:                               LDX       outbuf_irqptr            ;load IRQ Pointer
00:08FB BD9C61          	  1244:                               LDA       global_outbufacia,X      ;load byte from outputbuffer
00:08FE 8D1078          	  1245:                               STA       ACIADATA                 ;send char
00:0901 20D608          	  1246:                               JSR       start_transmittimer      ;
00:0904 E8              	  1247:                               INX                                ;
00:0905 8E9C62          	  1248:                               STX       outbuf_irqptr            ;
00:0908 CE9E62          	  1249:                               DEC       outbuf_writecounter      ;one char less in buffer
00:090B 60              	  1250: end_irq_handler_transmittimer RTS                                ;End of tramsmittimer handler
                        	  1251: BS                            =         $88                      ;
                        	  1252: DEL                           =         $FF                      ;
                        	  1253: CR                            =         $8D                      ;
                        	  1254: ESC                           =         $9B                      ;
                        	  1255: DOT                           =         $AE                      ;
                        	  1256: COLON                         =         $BA                      ;
                        	  1257: RUNLETTER                     =         $D2                      ;
                        	  1258: CALLLETTER                    =         $CA                      ;
                        	  1259: RTSLETTER                     =         $CB                      ;
                        	  1260: XAML                          =         _zpscratch_0             ;
                        	  1261: XAMH                          =         _zpscratch_1             ;
                        	  1262: STL                           =         _zpscratch_2             ;
                        	  1263: STH                           =         _zpscratch_3             ;
                        	  1264: L                             =         _zpscratch_4             ;
                        	  1265: H                             =         _zpscratch_5             ;
                        	  1266: YSAV                          =         _zpscratch_6             ;
                        	  1267: MODE                          =         _zpscratch_7             ;
                        	  1268: wozmon                                                           ;wozmon entry with easy label
00:090C 204803          	  1269: wozmonentrypoint              JSR       _OUTPUTCRLF              ;
00:090F A07F            	  1270:                               LDY       #$7f                     ;workaround because the original loop exits with 7f
00:0911 C988            	  1271: woz_notcr                     CMP       #BS                      ;
00:0913 F011            	  1272:                               BEQ       woz_backspace            ;
00:0915 C99B            	  1273:                               CMP       #ESC                     ;
00:0917 C8              	  1274:                               INY                                ;
00:0918 100F            	  1275:                               BPL       woz_nextchar             ;
00:091A A95C            	  1276: woz_escape                    LDA       #'\'                     ;
00:091C 20ED09          	  1277:                               JSR       woz_printchar            ;
00:091F 48              	  1278: woz_getline                   PHA                                ;
00:0920 204803          	  1279:                               JSR       _OUTPUTCRLF              ;
00:0923 68              	  1280:                               PLA                                ;
00:0924 A001            	  1281:                               LDY       #0+1                     ;Start a new input line
00:0926 88              	  1282: woz_backspace                 DEY                                ;
00:0927 30F6            	  1283:                               BMI       woz_getline              ;
00:0929 206503          	  1284: woz_nextchar                  JSR       _INPUT_WAIT              ;
00:092C C960            	  1285:                               CMP       #$60                     ;
00:092E 3002            	  1286:                               BMI       woz_isupper              ;
00:0930 E920            	  1287:                               SBC       #$20                     ;
00:0932 0980            	  1288: woz_isupper                   ORA       #$80                     ;set 8 bit for apple1
00:0934 999C60          	  1289:                               STA       global_memarea,Y         ;
00:0937 20ED09          	  1290:                               JSR       woz_printchar            ;
00:093A C98D            	  1291:                               CMP       #CR                      ;
00:093C D0D3            	  1292:                               BNE       woz_notcr                ;it's not CR
00:093E A0FF            	  1293:                               LDY       #-1                      ;reset text index
00:0940 A900            	  1294:                               LDA       #0                       ;default mode is xam
00:0942 AA              	  1295:                               TAX                                ;
00:0943 0A              	  1296: woz_setstor                   ASL                                ;Leaves $78 if setting STOR mode
00:0944 855D            	  1297: woz_setmode                   STA       MODE                     ;set mode Flags
00:0946 C8              	  1298: woz_blskip                    INY                                ;advance text index
00:0947 B99C60          	  1299: woz_nextitem                  LDA       global_memarea,Y         ;get character
00:094A C98D            	  1300:                               CMP       #CR                      ;
00:094C F0D1            	  1301:                               BEQ       woz_getline              ;
00:094E C9AE            	  1302:                               CMP       #DOT                     ;
00:0950 90F4            	  1303:                               BCC       woz_blskip               ;ignore everything below '.'
00:0952 F0F0            	  1304:                               BEQ       woz_setmode              ;set block xam mode ('.' = $AE
00:0954 C9BA            	  1305:                               CMP       #COLON                   ;
00:0956 F0EB            	  1306:                               BEQ       woz_setstor              ;
00:0958 C9D2            	  1307:                               CMP       #RUNLETTER               ;
00:095A F043            	  1308:                               BEQ       woz_run                  ;run the program! forget the rest
00:095C C9CB            	  1309:                               CMP       #RTSLETTER               ;
00:095E F045            	  1310:                               BEQ       woz_rts                  ;call the program as a subroutine! forget the rest
00:0960 C9CA            	  1311:                               CMP       #CALLLETTER              ;
00:0962 F03E            	  1312:                               BEQ       woz_jsr                  ;call the program as a subroutine! forget the rest
00:0964 865A            	  1313:                               STX       L                        ;clear input value (X=0)
00:0966 865B            	  1314:                               STX       H                        ;
00:0968 845C            	  1315:                               STY       YSAV                     ;Save Y for comparision
00:096A B99C60          	  1316: woz_nexthex                   LDA       global_memarea,Y         ;get character for hex test
00:096D 49B0            	  1317:                               EOR       #$B0                     ;map digits to 0-9
00:096F C90A            	  1318:                               CMP       #9+1                     ; is it a decimal digit?
00:0971 9006            	  1319:                               BCC       woz_dig                  ;Yes!
00:0973 6988            	  1320:                               ADC       #$88                     ;Map letter A-F to $FA-FF
00:0975 C9FA            	  1321:                               CMP       #$FA                     ;Hex letter ?
00:0977 9011            	  1322:                               BCC       woz_nothex               ;
00:0979 0A              	  1323: woz_dig                       ASL                                ;
00:097A 0A              	  1324:                               ASL                                ;
00:097B 0A              	  1325:                               ASL                                ;
00:097C 0A              	  1326:                               ASL                                ;
00:097D A204            	  1327:                               LDX       #4                       ;Shift count
00:097F 0A              	  1328: woz_hexshift                  ASL                                ;
00:0980 265A            	  1329:                               ROL       L                        ;rotate into LSD
00:0982 265B            	  1330:                               ROL       H                        ;rotate into MSD
00:0984 CA              	  1331:                               DEX                                ;done 4 shifts?
00:0985 D0F8            	  1332:                               BNE       woz_hexshift             ;no, loop
00:0987 C8              	  1333:                               INY                                ;advance text index
00:0988 D0E0            	  1334:                               BNE       woz_nexthex              ;always taken
00:098A C45C            	  1335: woz_nothex                    CPY       YSAV                     ;
00:098C F08C            	  1336:                               BEQ       woz_escape               ;No! Ignore all, start from scratch
00:098E 245D            	  1337:                               BIT       MODE                     ;test MODE byte
00:0990 5014            	  1338:                               BVC       woz_notstor              ;bit 6 = 0 ist STOP, 1 is XA; or BLOCK XAM
00:0992 A55A            	  1339:                               LDA       L                        ;LSD's of hex data
00:0994 8158            	  1340:                               STA       (STL,X)                  ;Store current 'store index' (X=0)
00:0996 E658            	  1341:                               INC       STL                      ;Increment store index
00:0998 D0AD            	  1342:                               BNE       woz_nextitem             ;no carry!
00:099A E659            	  1343:                               INC       STH                      ;add carry to store index high
00:099C 4C4709          	  1344: woz_tonextitem                JMP       woz_nextitem             ;get next command item
00:099F 6C5600          	  1345: woz_run                       JMP       (XAML)                   ;
00:09A2 209F09          	  1346: woz_jsr                       JSR       woz_run                  ;
00:09A5 60              	  1347: woz_rts                       RTS                                ;
00:09A6 3029            	  1348: woz_notstor                   BMI       woz_xamnext              ;B7 = 0 for XAM, 1 for BLOCK XAM
00:09A8 A202            	  1349:                               LDX       #2                       ;
00:09AA B559            	  1350: woz_setadr                    LDA       L-1,X                    ;Copy 2 bytes
00:09AC 9557            	  1351:                               STA       STL-1,X                  ;store index
00:09AE 9555            	  1352:                               STA       XAML-1,X                 ;and to XAM index
00:09B0 CA              	  1353:                               DEX                                ;next of 2 bytes
00:09B1 D0F7            	  1354:                               BNE       woz_setadr               ;
00:09B3 D012            	  1355: woz_nxtprnt                   BNE       woz_prdata               ;NE means no address to print
00:09B5 204803          	  1356:                               JSR       _OUTPUTCRLF              ;Print CR first
00:09B8 A557            	  1357:                               LDA       XAMH                     ;Output high-order byte of address
00:09BA 203004          	  1358:                               JSR       _OUTHEX                  ;
00:09BD A556            	  1359:                               LDA       XAML                     ;Output low-order byte of address
00:09BF 203004          	  1360:                               JSR       _OUTHEX                  ;
00:09C2 A93A            	  1361:                               LDA       #':'                     ;Output colon
00:09C4 20ED09          	  1362:                               JSR       woz_printchar            ;
00:09C7 A920            	  1363: woz_prdata                    LDA       #' '                     ;Print space
00:09C9 20ED09          	  1364:                               JSR       woz_printchar            ;
00:09CC A156            	  1365:                               LDA       (XAML,X)                 ;get data from address (X=0)
00:09CE 203004          	  1366:                               JSR       _OUTHEX                  ;
00:09D1 865D            	  1367: woz_xamnext                   STX       MODE                     ;0 -> MODE (XAM mode)
00:09D3 A556            	  1368:                               LDA       XAML                     ;See if there is more to print
00:09D5 C55A            	  1369:                               CMP       L                        ;
00:09D7 A557            	  1370:                               LDA       XAMH                     ;
00:09D9 E55B            	  1371:                               SBC       H                        ;
00:09DB B0BF            	  1372:                               BCS       woz_tonextitem           ;Not Less! No more data to print
00:09DD E656            	  1373:                               INC       XAML                     ;Increment examine index 
00:09DF D002            	  1374:                               BNE       woz_mod8chk              ;
00:09E1 E657            	  1375:                               INC       XAMH                     ;
00:09E3 A556            	  1376: woz_mod8chk                   LDA       XAML                     ;If address MOD 8 = 0 start a new line
00:09E5 2907            	  1377:                               AND       #%00000111               ;
00:09E7 10CA            	  1378:                               BPL       woz_nxtprnt              ;
00:09E9 203004          	  1379: woz_prbyte                    JSR       _OUTHEX                  ;
00:09EC 60              	  1380:                               RTS                                ;
00:09ED 48              	  1381: woz_printchar                 PHA                                ;
00:09EE 297F            	  1382:                               AND       #$7f                     ;
00:09F0 209A03          	  1383:                               JSR       _OUTPUTCHAR              ;
00:09F3 68              	  1384:                               PLA                                ;
00:09F4 60              	  1385:                               RTS                                ;
                        	  1386:                                                                  ;-----------------------------------------------------
                        	  1387:                                                                  ;-----------------           WOZFLOAT LIBRARY         
                        	  1388:                                                                  ;-----------------------------------------------------
00:09F5 A577            	  1389: wozLOG                        LDA       M1                       ;
00:09F7 F002            	  1390:                               BEQ       wozERROR                 ;
00:09F9 1001            	  1391:                               BPL       wozCONT                  ;IF ARG>0 OK
00:09FB 00              	  1392: wozERROR                      BRK                                ;
                        	  1393:                                                                  ;*
00:09FC 20E60B          	  1394: wozCONT                       JSR       wozSWAP                  ;MOVE ARG TO EXP/MANT2
00:09FF A572            	  1395:                               LDA       X2                       ;HOLD EXPONENT
00:0A01 A080            	  1396:                               LDY       #$80                     ;
00:0A03 8472            	  1397:                               STY       X2                       ;SET EXPONENT 2 TO 0 ($80)
00:0A05 4980            	  1398:                               EOR       #$80                     ;COMPLIMENT SIGN BIT OF ORIGINAL EXPONENT
00:0A07 8578            	  1399:                               STA       M1+1                     ;SET EXPONENT INTO MANTISSA 1 FOR FLOAT
00:0A09 A900            	  1400:                               LDA       #0                       ;
00:0A0B 8577            	  1401:                               STA       M1                       ;CLEAR MSB OF MANTISSA 1
00:0A0D 20F60B          	  1402:                               JSR       wozFLOAT                 ;CONVERT TO FLOATING POINT
00:0A10 A203            	  1403:                               LDX       #3                       ;4 BYTE TRANSFERS
00:0A12 B572            	  1404: wozSEXP1                      LDA       X2,X                     ;
00:0A14 957E            	  1405:                               STA       Z,X                      ;COPY MANTISSA TO Z
00:0A16 B576            	  1406:                               LDA       X1,X                     ;
00:0A18 9586            	  1407:                               STA       SEXP,X                   ;SAVE EXPONENT IN SEXP
00:0A1A BDC60A          	  1408:                               LDA       R22,X                    ;LOAD EXP/MANT1 WITH SQRT(2)
00:0A1D 9576            	  1409:                               STA       X1,X                     ;
00:0A1F CA              	  1410:                               DEX                                ;
00:0A20 10F0            	  1411:                               BPL       wozSEXP1                 ;
00:0A22 20140C          	  1412:                               JSR       wozFSUB                  ;Z-SQRT(2)
00:0A25 A203            	  1413:                               LDX       #3                       ;4 BYTE TRANSFER
00:0A27 B576            	  1414: wozSAVET                      LDA       X1,X                     ;SAVE EXP/MANT1 AS T
00:0A29 9582            	  1415:                               STA       T,X                      ;
00:0A2B B57E            	  1416:                               LDA       Z,X                      ;LOAD EXP/MANT1 WITH Z
00:0A2D 9576            	  1417:                               STA       X1,X                     ;
00:0A2F BDC60A          	  1418:                               LDA       R22,X                    ;LOAD EXP/MANT2 WITH SQRT(2)
00:0A32 9572            	  1419:                               STA       X2,X                     ;
00:0A34 CA              	  1420:                               DEX                                ;
00:0A35 10F0            	  1421:                               BPL       wozSAVET                 ;
00:0A37 201A0C          	  1422:                               JSR       wozFADD                  ;Z+SQRT(2)
00:0A3A A203            	  1423:                               LDX       #3                       ;4 BYTE TRANSFER
00:0A3C B582            	  1424: wozTM2                        LDA       T,X                      ;
00:0A3E 9572            	  1425:                               STA       X2,X                     ;LOAD T INTO EXP/MANT2
00:0A40 CA              	  1426:                               DEX                                ;
00:0A41 10F9            	  1427:                               BPL       wozTM2                   ;
00:0A43 20670C          	  1428:                               JSR       wozFDIV                  ;T=(Z-SQRT(2))/(Z+SQRT(2))
00:0A46 A203            	  1429:                               LDX       #3                       ;4 BYTE TRANSFER
00:0A48 B576            	  1430: wozMIT                        LDA       X1,X                     ;
00:0A4A 9582            	  1431:                               STA       T,X                      ;COPY EXP/MANT1 TO T AND
00:0A4C 9572            	  1432:                               STA       X2,X                     ;LOAD EXP/MANT2 WITH T
00:0A4E CA              	  1433:                               DEX                                ;
00:0A4F 10F7            	  1434:                               BPL       wozMIT                   ;
00:0A51 20410C          	  1435:                               JSR       wozFMUL                  ;T*T
00:0A54 20E60B          	  1436:                               JSR       wozSWAP                  ;MOVE T*T TO EXP/MANT2
00:0A57 A203            	  1437:                               LDX       #3                       ;4 BYTE TRANSFER
00:0A59 BDD60A          	  1438: wozMIC                        LDA       C,X                      ;
00:0A5C 9576            	  1439:                               STA       X1,X                     ;LOAD EXP/MANT1 WITH C
00:0A5E CA              	  1440:                               DEX                                ;
00:0A5F 10F8            	  1441:                               BPL       wozMIC                   ;
00:0A61 20140C          	  1442:                               JSR       wozFSUB                  ;T*T-C
00:0A64 A203            	  1443:                               LDX       #3                       ;4 BYTE TRANSFER
00:0A66 BDD20A          	  1444: wozM2MB                       LDA       MB,X                     ;
00:0A69 9572            	  1445:                               STA       X2,X                     ;LOAD EXP/MANT2 WITH MB
00:0A6B CA              	  1446:                               DEX                                ;
00:0A6C 10F8            	  1447:                               BPL       wozM2MB                  ;
00:0A6E 20670C          	  1448:                               JSR       wozFDIV                  ;MB/(T*T-C)
00:0A71 A203            	  1449:                               LDX       #3                       ;
00:0A73 BDCE0A          	  1450: wozM2A1                       LDA       A1,X                     ;
00:0A76 9572            	  1451:                               STA       X2,X                     ;LOAD EXP/MANT2 WITH A1
00:0A78 CA              	  1452:                               DEX                                ;
00:0A79 10F8            	  1453:                               BPL       wozM2A1                  ;
00:0A7B 201A0C          	  1454:                               JSR       wozFADD                  ;MB/(T*T-C)+A1
00:0A7E A203            	  1455:                               LDX       #3                       ;4 BYTE TRANSFER
00:0A80 B582            	  1456: M2T                           LDA       T,X                      ;
00:0A82 9572            	  1457:                               STA       X2,X                     ;LOAD EXP/MANT2 WITH T
00:0A84 CA              	  1458:                               DEX                                ;
00:0A85 10F9            	  1459:                               BPL       M2T                      ;
00:0A87 20410C          	  1460:                               JSR       wozFMUL                  ;(MB/(T*T-C)+A1)*T
00:0A8A A203            	  1461:                               LDX       #3                       ;4 BYTE TRANSFER
00:0A8C BDDA0A          	  1462: wozM2MHL                      LDA       MHLF,X                   ;
00:0A8F 9572            	  1463:                               STA       X2,X                     ;LOAD EXP/MANT2 WITH MHLF (.5)
00:0A91 CA              	  1464:                               DEX                                ;
00:0A92 10F8            	  1465:                               BPL       wozM2MHL                 ;
00:0A94 201A0C          	  1466:                               JSR       wozFADD                  ;+.5
00:0A97 A203            	  1467:                               LDX       #3                       ;4 BYTE TRANSFER
00:0A99 B586            	  1468: wozLDEXP                      LDA       SEXP,X                   ;
00:0A9B 9572            	  1469:                               STA       X2,X                     ;LOAD EXP/MANT2 WITH ORIGINAL EXPONENT
00:0A9D CA              	  1470:                               DEX                                ;
00:0A9E 10F9            	  1471:                               BPL       wozLDEXP                 ;
00:0AA0 201A0C          	  1472:                               JSR       wozFADD                  ;+EXPN
00:0AA3 A203            	  1473:                               LDX       #3                       ;4 BYTE TRANSFER
00:0AA5 BDCA0A          	  1474: wozMLE2                       LDA       LE2,X                    ;
00:0AA8 9572            	  1475:                               STA       X2,X                     ;LOAD EXP/MANT2 WITH LN(2)
00:0AAA CA              	  1476:                               DEX                                ;
00:0AAB 10F8            	  1477:                               BPL       wozMLE2                  ;
00:0AAD 20410C          	  1478:                               JSR       wozFMUL                  ;*LN(2)
00:0AB0 60              	  1479:                               RTS                                ;RETURN RESULT IN MANT/EXP1
                        	  1480:                                                                  ;*
                        	  1481:                                                                  ;*     COMMON LOG OF MANT/EXP1 RESULT IN MANT/EXP1
                        	  1482:                                                                  ;*
00:0AB1 20F509          	  1483: wozLOG10                      JSR       wozLOG                   ;COMPUTE NATURAL LOG
00:0AB4 A203            	  1484:                               LDX       #3                       ;
00:0AB6 BDC20A          	  1485: wozL10                        LDA       LN10,X                   ;
00:0AB9 9572            	  1486:                               STA       X2,X                     ;LOAD EXP/MANT2 WITH 1/LN(10)
00:0ABB CA              	  1487:                               DEX                                ;
00:0ABC 10F8            	  1488:                               BPL       wozL10                   ;
00:0ABE 20410C          	  1489:                               JSR       wozFMUL                  ;LOG10(X)=LN(X)/LN(10)
00:0AC1 60              	  1490:                               RTS                                ;
00:0AC2 7E6F            	  1491: LN10                          word      $6F7E                    ;DCM 0.4342945
00:0AC4 2DED            	  1492:                               word      $ED2D                    ;
00:0AC6 805A            	  1493: R22                           word      $5A80                    ;1.4142136   SQRT(2)
00:0AC8 827A            	  1494:                               word      $7A82                    ;
00:0ACA 7F58            	  1495: LE2                           word      $587F                    ;0.69314718  LOG BASE E OF 2
00:0ACC B90C            	  1496:                               word      $0CB9                    ;
00:0ACE 8052            	  1497: A1                            word      $5280                    ;1.2920074
00:0AD0 B040            	  1498:                               word      $40B0                    ;
00:0AD2 81AB            	  1499: MB                            word      $AB81                    ;-2.6398577
00:0AD4 8649            	  1500:                               word      $4986                    ;
00:0AD6 806A            	  1501: C                             word      $6A80                    ;1.6567626
00:0AD8 0866            	  1502:                               word      $6608                    ;
00:0ADA 7F40            	  1503: MHLF                          word      $407F                    ;0.5
00:0ADC 0000            	  1504:                               word      $0000                    ;
                        	  1505:                                                                  ;*
                        	  1506:                                                                  ;       ORG $1E00   STARTING LOCATION FOR EXP
                        	  1507:                                                                  ;*
                        	  1508:                                                                  ;*     EXP OF MANT/EXP1 RESULT IN MANT/EXP1
                        	  1509:                                                                  ;*
00:0ADE A203            	  1510: wozEXP                        LDX       #3                       ;4 BYTE TRANSFER
00:0AE0 BDB60B          	  1511:                               LDA       L2E,X                    ;
00:0AE3 9572            	  1512:                               STA       X2,X                     ;LOAD EXP/MANT2 WITH LOG BASE 2 OF E
00:0AE5 CA              	  1513:                               DEX                                ;
00:0AE6 10F8            	  1514:                               BPL       wozEXP+2                 ;
00:0AE8 20410C          	  1515:                               JSR       wozFMUL                  ;LOG2(3)*X
00:0AEB A203            	  1516:                               LDX       #3                       ;4 BYTE TRANSFER
00:0AED B576            	  1517: wozFSA                        LDA       X1,X                     ;
00:0AEF 957E            	  1518:                               STA       Z,X                      ;STORE EXP/MANT1 IN Z
00:0AF1 CA              	  1519:                               DEX                                ;
00:0AF2 10F9            	  1520:                               BPL       wozFSA                   ;SAVE Z=LN(2)*X
00:0AF4 20B20C          	  1521:                               JSR       wozFIX                   ;CONVERT CONTENTS OF EXP/MANT1 TO AN INTEGER
00:0AF7 A578            	  1522:                               LDA       M1+1                     ;
00:0AF9 858A            	  1523:                               STA       INT                      ;SAVE RESULT AS INT
00:0AFB 38              	  1524:                               SEC                                ;SET CARRY FOR SUBTRACTION
00:0AFC E97C            	  1525:                               SBC       #124                     ;INT-124
00:0AFE A577            	  1526:                               LDA       M1                       ;
00:0B00 E900            	  1527:                               SBC       #0                       ;
00:0B02 1015            	  1528:                               BPL       wozOVFLW                 ;OVERFLOW INT>=124
00:0B04 18              	  1529:                               CLC                                ;CLEAR CARRY FOR ADD
00:0B05 A578            	  1530:                               LDA       M1+1                     ;
00:0B07 6978            	  1531:                               ADC       #120                     ;ADD 120 TO INT
00:0B09 A577            	  1532:                               LDA       M1                       ;
00:0B0B 6900            	  1533:                               ADC       #0                       ;
00:0B0D 100B            	  1534:                               BPL       wozCONTIN                ;IF RESULT POSITIVE CONTINUE
00:0B0F A900            	  1535:                               LDA       #0                       ;INT<-120 SET RESULT TO ZERO AND RETURN
00:0B11 A203            	  1536:                               LDX       #3                       ;4 BYTE MOVE
00:0B13 9576            	  1537: wozZERO                       STA       X1,X                     ;SET EXP/MANT1 TO ZERO
00:0B15 CA              	  1538:                               DEX                                ;
00:0B16 10FB            	  1539:                               BPL       wozZERO                  ;
00:0B18 60              	  1540:                               RTS                                ;RETURN
00:0B19 00              	  1541: wozOVFLW                      BRK                                ;overflow
00:0B1A 20F60B          	  1542: wozCONTIN                     JSR       wozFLOAT                 ;FLOAT INT
00:0B1D A203            	  1543:                               LDX       #3                       ;
00:0B1F B57E            	  1544: wozENTD                       LDA       Z,X                      ;
00:0B21 9572            	  1545:                               STA       X2,X                     ;LOAD EXP/MANT2 WITH Z
00:0B23 CA              	  1546:                               DEX                                ;
00:0B24 10F9            	  1547:                               BPL       wozENTD                  ;
00:0B26 20140C          	  1548:                               JSR       wozFSUB                  ;Z*Z-FLOAT(INT)
00:0B29 A203            	  1549:                               LDX       #3                       ;4 BYTE MOVE
00:0B2B B576            	  1550: wozZSAV                       LDA       X1,X                     ;
00:0B2D 957E            	  1551:                               STA       Z,X                      ;SAVE EXP/MANT1 IN Z
00:0B2F 9572            	  1552:                               STA       X2,X                     ;COPY EXP/MANT1 TO EXP/MANT2
00:0B31 CA              	  1553:                               DEX                                ;
00:0B32 10F7            	  1554:                               BPL       wozZSAV                  ;
00:0B34 20410C          	  1555:                               JSR       wozFMUL                  ;Z*Z
00:0B37 A203            	  1556:                               LDX       #3                       ;4 BYTE MOVE
00:0B39 BDBA0B          	  1557: wozLA2                        LDA       A2,X                     ;
00:0B3C 9572            	  1558:                               STA       X2,X                     ;LOAD EXP/MANT2 WITH A2
00:0B3E B576            	  1559:                               LDA       X1,X                     ;
00:0B40 9586            	  1560:                               STA       SEXP,X                   ;SAVE EXP/MANT1 AS SEXP
00:0B42 CA              	  1561:                               DEX                                ;
00:0B43 10F4            	  1562:                               BPL       wozLA2                   ;
00:0B45 201A0C          	  1563:                               JSR       wozFADD                  ;Z*Z+A2
00:0B48 A203            	  1564:                               LDX       #3                       ;4 BYTE MOVE
00:0B4A BDBE0B          	  1565: wozLB2                        LDA       B2,X                     ;
00:0B4D 9572            	  1566:                               STA       X2,X                     ;LOAD EXP/MANT2 WITH B2
00:0B4F CA              	  1567:                               DEX                                ;
00:0B50 10F8            	  1568:                               BPL       wozLB2                   ;
00:0B52 20670C          	  1569:                               JSR       wozFDIV                  ;T=B/(Z*Z+A2)
00:0B55 A203            	  1570:                               LDX       #3                       ;4 BYTE MOVE
00:0B57 B576            	  1571: wozDLOAD                      LDA       X1,X                     ;
00:0B59 9582            	  1572:                               STA       T,X                      ;SAVE EXP/MANT1 AS T
00:0B5B BDC20B          	  1573:                               LDA       C2,X                     ;
00:0B5E 9576            	  1574:                               STA       X1,X                     ;LOAD EXP/MANT1 WITH C2
00:0B60 B586            	  1575:                               LDA       SEXP,X                   ;
00:0B62 9572            	  1576:                               STA       X2,X                     ;LOAD EXP/MANT2 WITH SEXP
00:0B64 CA              	  1577:                               DEX                                ;
00:0B65 10F0            	  1578:                               BPL       wozDLOAD                 ;
00:0B67 20410C          	  1579:                               JSR       wozFMUL                  ;Z*Z*C2
00:0B6A 20E60B          	  1580:                               JSR       wozSWAP                  ;MOVE EXP/MANT1 TO EXP/MANT2
00:0B6D A203            	  1581:                               LDX       #3                       ;4 BYTE TRANSFER
00:0B6F B582            	  1582: wozLTMP                       LDA       T,X                      ;
00:0B71 9576            	  1583:                               STA       X1,X                     ;LOAD EXP/MANT1 WITH T
00:0B73 CA              	  1584:                               DEX                                ;
00:0B74 10F9            	  1585:                               BPL       wozLTMP                  ;
00:0B76 20140C          	  1586:                               JSR       wozFSUB                  ;C2*Z*Z-B2/(Z*Z+A2)
00:0B79 A203            	  1587:                               LDX       #3                       ;4 BYTE TRANSFER
00:0B7B BDC60B          	  1588: wozLDD                        LDA       D,X                      ;
00:0B7E 9572            	  1589:                               STA       X2,X                     ;LOAD EXP/MANT2 WITH D
00:0B80 CA              	  1590:                               DEX                                ;
00:0B81 10F8            	  1591:                               BPL       wozLDD                   ;
00:0B83 201A0C          	  1592:                               JSR       wozFADD                  ;D+C2*Z*Z-B2/(Z*Z+A2)
00:0B86 20E60B          	  1593:                               JSR       wozSWAP                  ;MOVE EXP/MANT1 TO EXP/MANT2
00:0B89 A203            	  1594:                               LDX       #3                       ;4 BYTE TRANSFER
00:0B8B B57E            	  1595: wozLFA                        LDA       Z,X                      ;
00:0B8D 9576            	  1596:                               STA       X1,X                     ;LOAD EXP/MANT1 WITH Z
00:0B8F CA              	  1597:                               DEX                                ;
00:0B90 10F9            	  1598:                               BPL       wozLFA                   ;
00:0B92 20140C          	  1599:                               JSR       wozFSUB                  ;-Z+D+C2*Z*Z-B2/(Z*Z+A2)
00:0B95 A203            	  1600:                               LDX       #3                       ;4 BYTE TRANSFER
00:0B97 B57E            	  1601: wozLF3                        LDA       Z,X                      ;
00:0B99 9572            	  1602:                               STA       X2,X                     ;LOAD EXP/MANT2 WITH Z
00:0B9B CA              	  1603:                               DEX                                ;
00:0B9C 10F9            	  1604:                               BPL       wozLF3                   ;
00:0B9E 20670C          	  1605:                               JSR       wozFDIV                  ;Z/(**** )
00:0BA1 A203            	  1606:                               LDX       #3                       ;4 BYTE TRANSFER
00:0BA3 BDDA0A          	  1607: wozLD12                       LDA       MHLF,X                   ;
00:0BA6 9572            	  1608:                               STA       X2,X                     ;LOAD EXP/MANT2 WITH .5
00:0BA8 CA              	  1609:                               DEX                                ;
00:0BA9 10F8            	  1610:                               BPL       wozLD12                  ;
00:0BAB 201A0C          	  1611:                               JSR       wozFADD                  ;+Z/(***)+.5
00:0BAE 38              	  1612:                               SEC                                ;ADD INT TO EXPONENT WITH CARRY SET
00:0BAF A58A            	  1613:                               LDA       INT                      ;TO MULTIPLY BY
00:0BB1 6576            	  1614:                               ADC       X1                       ;2**(INT+1)
00:0BB3 8576            	  1615:                               STA       X1                       ;RETURN RESULT TO EXPONENT
00:0BB5 60              	  1616:                               RTS                                ;RETURN ANS=(.5+Z/(-Z+D+C2*Z*Z-B2/(Z*Z+A2))*2**(INT+1)
00:0BB6 805C            	  1617: L2E                           word      $5C80                    ;LOG BASE 2 OF E
00:0BB8 551E            	  1618:                               word      $1E55                    ;
00:0BBA 8657            	  1619: A2                            word      $5786                    ;
00:0BBC 6AE1            	  1620:                               word      $E16A                    ;
00:0BBE 894D            	  1621: B2                            word      $4D89                    ;
00:0BC0 3F1D            	  1622:                               word      $1D3F                    ;
00:0BC2 7B46            	  1623: C2                            word      $467B                    ;
00:0BC4 FA70            	  1624:                               word      $70FA                    ;
00:0BC6 834F            	  1625: D                             word      $4F83                    ;
00:0BC8 A303            	  1626:                               word      $03A3                    ;
                        	  1627:                                                                  ;*
                        	  1628:                                                                  ;*
                        	  1629:                                                                  ;*     BASIC FLOATING POINT ROUTINES
                        	  1630:                                                                  ;*
                        	  1631:                                                                  ;       ORG $1F00   START OF BASIC FLOATING POINT ROUT
00:0BCA 18              	  1632: wozADD                        CLC                                ;CLEAR CARRY
00:0BCB A202            	  1633:                               LDX       #$02                     ;INDEX FOR 3-BYTE ADD
00:0BCD B577            	  1634: wozADD1                       LDA       M1,X                     ;
00:0BCF 7573            	  1635:                               ADC       M2,X                     ;ADD A BYTE OF MANT2 TO MANT1
00:0BD1 9577            	  1636:                               STA       M1,X                     ;
00:0BD3 CA              	  1637:                               DEX                                ;ADVANCE INDEX TO NEXT MORE SIGNIF.BYTE
00:0BD4 10F7            	  1638:                               BPL       wozADD1                  ;LOOP UNTIL DONE.
00:0BD6 60              	  1639:                               RTS                                ;RETURN
00:0BD7 0671            	  1640: wozMD1                        ASL       SIGN                     ;CLEAR LSB OF SIGN
00:0BD9 20DC0B          	  1641:                               JSR       wozABSWAP                ;ABS VAL OF MANT1, THEN SWAP MANT2
00:0BDC 2477            	  1642: wozABSWAP                     BIT       M1                       ;MANT1 NEG?
00:0BDE 1005            	  1643:                               BPL       wozABSWP1                ;NO,SWAP WITH MANT2 AND RETURN
00:0BE0 20590C          	  1644:                               JSR       wozFCOMPL                ;YES, COMPLIMENT IT.
00:0BE3 E671            	  1645:                               INC       SIGN                     ;INCR SIGN, COMPLEMENTING LSB
00:0BE5 38              	  1646: wozABSWP1                     SEC                                ;SET CARRY FOR RETURN TO MUL/DIV
                        	  1647:                                                                  ;*
                        	  1648:                                                                  ;*     SWAP EXP/MANT1 WITH EXP/MANT2
                        	  1649:                                                                  ;*
00:0BE6 A204            	  1650: wozSWAP                       LDX       #$04                     ;INDEX FOR 4-BYTE SWAP.
00:0BE8 9479            	  1651: wozSWAP1                      STY       E-1,X                    ;
00:0BEA B575            	  1652:                               LDA       X1-1,X                   ;SWAP A BYTE OF EXP/MANT1 WITH
00:0BEC B471            	  1653:                               LDY       X2-1,X                   ;EXP/MANT2 AND LEAVEA COPY OF
00:0BEE 9475            	  1654:                               STY       X1-1,X                   ;MANT1 IN E(3BYTES). E+3 USED.
00:0BF0 9571            	  1655:                               STA       X2-1,X                   ;
00:0BF2 CA              	  1656:                               DEX                                ;ADVANCE INDEX TO NEXT BYTE
00:0BF3 D0F3            	  1657:                               BNE       wozSWAP1                 ;LOOP UNTIL DONE.
00:0BF5 60              	  1658:                               RTS                                ;
                        	  1659:                                                                  ;*
                        	  1660:                                                                  ;*
                        	  1661:                                                                  ;*
                        	  1662:                                                                  ;*     CONVERT 16 BIT INTEGER IN M1(HIGH) AND M1+1(LOW
                        	  1663:                                                                  ;*     RESULT IN EXP/MANT1.  EXP/MANT2 UNEFFECTED
                        	  1664:                                                                  ;*
                        	  1665:                                                                  ;*
00:0BF6 A98E            	  1666: wozFLOAT                      LDA       #$8E                     ;
00:0BF8 8576            	  1667:                               STA       X1                       ;SET EXPN TO 14 DEC
00:0BFA A900            	  1668:                               LDA       #0                       ;CLEAR LOW ORDER BYTE
00:0BFC 8579            	  1669:                               STA       M1+2                     ;
00:0BFE F008            	  1670:                               BEQ       wozNORM                  ;NORMALIZE RESULT
00:0C00 C676            	  1671: wozNORM1                      DEC       X1                       ;DECREMENT EXP1
00:0C02 0679            	  1672:                               ASL       M1+2                     ;
00:0C04 2678            	  1673:                               ROL       M1+1                     ;SHIFT MANT1 (3 BYTES) LEFT
00:0C06 2677            	  1674:                               ROL       M1                       ;
00:0C08 A577            	  1675: wozNORM                       LDA       M1                       ;HIGH ORDER MANT1 BYTE
00:0C0A 0A              	  1676:                               ASL                                ;UPPER TWO BITS UNEQUAL?
00:0C0B 4577            	  1677:                               EOR       M1                       ;
00:0C0D 3004            	  1678:                               BMI       wozRTS1                  ;YES,RETURN WITH MANT1 NORMALIZED
00:0C0F A576            	  1679:                               LDA       X1                       ;EXP1 ZERO?
00:0C11 D0ED            	  1680:                               BNE       wozNORM1                 ;NO, CONTINUE NORMALIZING
00:0C13 60              	  1681: wozRTS1                       RTS                                ;RETURN
                        	  1682:                                                                  ;*
                        	  1683:                                                                  ;*
                        	  1684:                                                                  ;*     EXP/MANT2-EXP/MANT1 RESULT IN EXP/MANT1
                        	  1685:                                                                  ;*
00:0C14 20590C          	  1686: wozFSUB                       JSR       wozFCOMPL                ;CMPL MANT1 CLEARS CARRY UNLESS ZERO
00:0C17 20270C          	  1687: wozSWPALG                     JSR       wozALGNSW                ;RIGHT SHIFT MANT1 OR SWAP WITH MANT2 ON CARRY
                        	  1688:                                                                  ;*
                        	  1689:                                                                  ;*     ADD EXP/MANT1 AND EXP/MANT2 RESULT IN EXP/MANT1
                        	  1690:                                                                  ;*
00:0C1A A572            	  1691: wozFADD                       LDA       X2                       ;
00:0C1C C576            	  1692:                               CMP       X1                       ;COMPARE EXP1 WITH EXP2
00:0C1E D0F7            	  1693:                               BNE       wozSWPALG                ;IF UNEQUAL, SWAP ADDENDS OR ALIGN MANTISSAS
00:0C20 20CA0B          	  1694:                               JSR       wozADD                   ;ADD ALIGNED MANTISSAS
00:0C23 50E3            	  1695: wozADDEND                     BVC       wozNORM                  ;NO OVERFLOW, NORMALIZE RESULTS
00:0C25 7005            	  1696:                               BVS       wozRTLOG                 ;OV: SHIFT MANT1 RIGHT. NOTE CARRY IS CORRECT SIGN
00:0C27 90BD            	  1697: wozALGNSW                     BCC       wozSWAP                  ;SWAP IF CARRY CLEAR, ELSE SHIFT RIGHT ARITH.
00:0C29 A577            	  1698: wozRTAR                       LDA       M1                       ;SIGN OF MANT1 INTO CARRY FOR
00:0C2B 0A              	  1699:                               ASL                                ;RIGHT ARITH SHIFT
00:0C2C E676            	  1700: wozRTLOG                      INC       X1                       ;INCR EXP1 TO COMPENSATE FOR RT SHIFT
00:0C2E F07E            	  1701:                               BEQ       wozOVFL                  ;EXP1 OUT OF RANGE.
00:0C30 A2FA            	  1702: wozRTLOG1                     LDX       #$FA                     ;INDEX FOR 6 BYTE RIGHT SHIFT
00:0C32 A980            	  1703: wozROR1                       LDA       #$80                     ;
00:0C34 B001            	  1704:                               BCS       wozROR2                  ;
00:0C36 0A              	  1705:                               ASL                                ;
00:0C37 567D            	  1706: wozROR2                       LSR       E+3,X                    ;SIMULATE ROR E+3,X
00:0C39 157D            	  1707:                               ORA       E+3,X                    ;
00:0C3B 957D            	  1708:                               STA       E+3,X                    ;
00:0C3D E8              	  1709:                               INX                                ;NEXT BYTE OF SHIFT
00:0C3E D0F2            	  1710:                               BNE       wozROR1                  ;LOOP UNTIL DONE
00:0C40 60              	  1711:                               RTS                                ;RETURN
                        	  1712:                                                                  ;*
                        	  1713:                                                                  ;*
                        	  1714:                                                                  ;*     EXP/MANT1 X EXP/MANT2 RESULT IN EXP/MANT1
                        	  1715:                                                                  ;*
00:0C41 20D70B          	  1716: wozFMUL                       JSR       wozMD1                   ;ABS. VAL OF MANT1, MANT2
00:0C44 6576            	  1717:                               ADC       X1                       ;ADD EXP1 TO EXP2 FOR PRODUCT EXPONENT
00:0C46 20970C          	  1718:                               JSR       wozMD2                   ;CHECK PRODUCT EXP AND PREPARE FOR MUL
00:0C49 18              	  1719:                               CLC                                ;CLEAR CARRY
00:0C4A 20300C          	  1720: wozMUL1                       JSR       wozRTLOG1                ;MANT1 AND E RIGHT.(PRODUCT AND MPLIER)
00:0C4D 9003            	  1721:                               BCC       wozMUL2                  ;IF CARRY CLEAR, SKIP PARTIAL PRODUCT
00:0C4F 20CA0B          	  1722:                               JSR       wozADD                   ;ADD MULTIPLICAN TO PRODUCT
00:0C52 88              	  1723: wozMUL2                       DEY                                ;NEXT MUL ITERATION
00:0C53 10F5            	  1724:                               BPL       wozMUL1                  ;LOOP UNTIL DONE
00:0C55 4671            	  1725: wozMDEND                      LSR       SIGN                     ;TEST SIGN (EVEN/ODD)
00:0C57 90AF            	  1726: wozNORMX                      BCC       wozNORM                  ;IF EXEN, NORMALIZE PRODUCT, ELSE COMPLEMENT
00:0C59 38              	  1727: wozFCOMPL                     SEC                                ;SET CARRY FOR SUBTRACT
00:0C5A A203            	  1728:                               LDX       #$03                     ;INDEX FOR 3 BYTE SUBTRACTION
00:0C5C A900            	  1729: wozCOMPL1                     LDA       #$00                     ;CLEAR A
00:0C5E F576            	  1730:                               SBC       X1,X                     ;SUBTRACT BYTE OF EXP1
00:0C60 9576            	  1731:                               STA       X1,X                     ;RESTORE IT
00:0C62 CA              	  1732:                               DEX                                ;NEXT MORE SIGNIFICANT BYTE
00:0C63 D0F7            	  1733:                               BNE       wozCOMPL1                ;LOOP UNTIL DONE
00:0C65 F0BC            	  1734:                               BEQ       wozADDEND                ;NORMALIZE (OR SHIFT RIGHT IF OVERFLOW)
                        	  1735:                                                                  ;*
                        	  1736:                                                                  ;*
                        	  1737:                                                                  ;*     EXP/MANT2 / EXP/MANT1 RESULT IN EXP/MANT1
                        	  1738:                                                                  ;*
00:0C67 20D70B          	  1739: wozFDIV                       JSR       wozMD1                   ;TAKE ABS VAL OF MANT1, MANT2
00:0C6A E576            	  1740:                               SBC       X1                       ;SUBTRACT EXP1 FROM EXP2
00:0C6C 20970C          	  1741:                               JSR       wozMD2                   ;SAVE AS QUOTIENT EXP
00:0C6F 38              	  1742: wozDIV1                       SEC                                ;SET CARRY FOR SUBTRACT
00:0C70 A202            	  1743:                               LDX       #$02                     ;INDEX FOR 3-BYTE INSTRUCTION
00:0C72 B573            	  1744: wozDIV2                       LDA       M2,X                     ;
00:0C74 F57A            	  1745:                               SBC       E,X                      ;SUBTRACT A BYTE OF E FROM MANT2
00:0C76 48              	  1746:                               PHA                                ;SAVE ON STACK
00:0C77 CA              	  1747:                               DEX                                ;NEXT MORE SIGNIF BYTE
00:0C78 10F8            	  1748:                               BPL       wozDIV2                  ;LOOP UNTIL DONE
00:0C7A A2FD            	  1749:                               LDX       #$FD                     ;INDEX FOR 3-BYTE CONDITIONAL MOVE
00:0C7C 68              	  1750: wozDIV3                       PLA                                ;PULL A BYTE OF DIFFERENCE OFF STACK
00:0C7D 9002            	  1751:                               BCC       wozDIV4                  ;IF MANT2<E THEN DONT RESTORE MANT2
00:0C7F 9576            	  1752:                               STA       M2+3,X                   ;
00:0C81 E8              	  1753: wozDIV4                       INX                                ;NEXT LESS SIGNIF BYTE
00:0C82 D0F8            	  1754:                               BNE       wozDIV3                  ;LOOP UNTIL DONE
00:0C84 2679            	  1755:                               ROL       M1+2                     ;
00:0C86 2678            	  1756:                               ROL       M1+1                     ;ROLL QUOTIENT LEFT, CARRY INTO LSB
00:0C88 2677            	  1757:                               ROL       M1                       ;
00:0C8A 0675            	  1758:                               ASL       M2+2                     ;
00:0C8C 2674            	  1759:                               ROL       M2+1                     ;SHIFT DIVIDEND LEFT
00:0C8E 2673            	  1760:                               ROL       M2                       ;
00:0C90 B01C            	  1761:                               BCS       wozOVFL                  ;OVERFLOW IS DUE TO UNNORMALIZED DIVISOR
00:0C92 88              	  1762:                               DEY                                ;NEXT DIVIDE ITERATION
00:0C93 D0DA            	  1763:                               BNE       wozDIV1                  ;LOOP UNTIL DONE 23 ITERATIONS
00:0C95 F0BE            	  1764:                               BEQ       wozMDEND                 ;NORMALIZE QUOTIENT AND CORRECT SIGN
00:0C97 8679            	  1765: wozMD2                        STX       M1+2                     ;
00:0C99 8678            	  1766:                               STX       M1+1                     ;CLR MANT1 (3 BYTES) FOR MUL/DIV
00:0C9B 8677            	  1767:                               STX       M1                       ;
00:0C9D B00D            	  1768:                               BCS       wozOVCHK                 ;IF EXP CALC SET CARRY, CHECK FOR OVFL
00:0C9F 3004            	  1769:                               BMI       wozMD3                   ;IF NEG NO UNDERFLOW
00:0CA1 68              	  1770:                               PLA                                ;POP ONE
00:0CA2 68              	  1771:                               PLA                                ;RETURN LEVEL
00:0CA3 90B2            	  1772:                               BCC       wozNORMX                 ;CLEAR X1 AND RETURN
00:0CA5 4980            	  1773: wozMD3                        EOR       #$80                     ;COMPLIMENT SIGN BIT OF EXP
00:0CA7 8576            	  1774:                               STA       X1                       ;STORE IT
00:0CA9 A017            	  1775:                               LDY       #$17                     ;COUNT FOR 24 MUL OR 23 DIV ITERATIONS
00:0CAB 60              	  1776:                               RTS                                ;RETURN
00:0CAC 10F7            	  1777: wozOVCHK                      BPL       wozMD3                   ;IF POS EXP THEN NO OVERFLOW
00:0CAE 00              	  1778: wozOVFL                       BRK                                ;
                        	  1779:                                                                  ;*
                        	  1780:                                                                  ;*
                        	  1781:                                                                  ;*     CONVERT EXP/MANT1 TO INTEGER IN M1 (HIGH) AND M
                        	  1782:                                                                  ;*      EXP/MANT2 UNEFFECTED
                        	  1783:                                                                  ;*
00:0CAF 20290C          	  1784: wozfixloop1                   JSR       wozRTAR                  ;SHIFT MANT1 RT AND INCREMENT EXPNT
00:0CB2 A576            	  1785: wozFIX                        LDA       X1                       ;CHECK EXPONENT
00:0CB4 C98E            	  1786:                               CMP       #$8E                     ;IS EXPONENT 14?
00:0CB6 D0F7            	  1787:                               BNE       wozfixloop1              ;NO, SHIFT
00:0CB8 60              	  1788: wozRTRN                       RTS                                ;RETURN
                        	  1789:                                                                  ;
                        	  1790:                                                                  ;
                        	  1791:                                                                  ;   kimath routines -- 6502 assembler source code for 
                        	  1792:                                                                  ;                   floating point package.
                        	  1793:                                                                  ;
                        	  1794:                                                                  ;
                        	  1795:                                                                  ;                   .title KIMATH ROUTINES, MOS Techno
                        	  1796: kima_len                      =         17                       ;#len .equ 17
                        	  1797: kima_xy                       =         1                        ;#xy  .equ $01
                        	  1798: kima_xz                       =         2                        ;#xz  .equ $02
                        	  1799: kima_xm                       =         3                        ;#xm  .equ $03
                        	  1800: kima_xn                       =         4                        ;#xn  .equ $04
                        	  1801: kima_yx                       =         $10                      ;#yx  .equ $10
                        	  1802: kima_yz                       =         $12                      ;#yz  .equ $12
                        	  1803: kima_ym                       =         $13                      ;#ym  .equ $13
                        	  1804: kima_yn                       =         $14                      ;#yn  .equ $14
                        	  1805: kima_zx                       =         $20                      ;#zx  .equ $20
                        	  1806: kima_zy                       =         $21                      ;#zy  .equ $21
                        	  1807: kima_zm                       =         $23                      ;#zm  .equ $23
                        	  1808: kima_zn                       =         $24                      ;#zn  .equ $24
                        	  1809: kima_mx                       =         $30                      ;#mx  .equ $30
                        	  1810: kima_my                       =         $31                      ;#my  .equ $31
                        	  1811: kima_mz                       =         $32                      ;#mz  .equ $32
                        	  1812: kima_mn                       =         $34                      ;#mn  .equ $34
                        	  1813: kima_nx                       =         $40                      ;#nx  .equ $40
                        	  1814: kima_ny                       =         $41                      ;#ny  .equ $41
                        	  1815: kima_nz                       =         $42                      ;#nz  .equ $42
                        	  1816: kima_nm                       =         $43                      ;#nm  .equ $43
                        	  1817:                                                                  ;    .org $0
                        	  1818:                                                                  ;    #    .org $200
                        	  1819:                                                                  ;    .org $f800
                        	  1820:                                                                  ;;
                        	  1821:                                                                  ;;   Floating point add/subtract routine.
                        	  1822:                                                                  ;;
00:0CB9 AD4960          	  1823: kima_sub                      lda       kima_sy                  ;sub     lda sy
00:0CBC 4980            	  1824:                               eor       #$80                     ;        eor #$80
00:0CBE 8D4960          	  1825:                               sta       kima_sy                  ;        sta sy
00:0CC1 AD3760          	  1826: kima_add                      lda       kima_sx                  ;add     lda sx
00:0CC4 4D4960          	  1827:                               eor       kima_sy                  ;        eor sy
00:0CC7 859D            	  1828:                               sta       kima_temp                ;        sta temp
00:0CC9 F8              	  1829:                               sed                                ;        sed
                        	  1830:                                                                  ;;
                        	  1831:                                                                  ;;   Clear working storage.
                        	  1832:                                                                  ;;
00:0CCA 207110          	  1833:                               jsr       kima_clear               ;        jsr clear
                        	  1834:                                                                  ;;
                        	  1835:                                                                  ;;   Test rx for zero.
                        	  1836:                                                                  ;;
00:0CCD 205F11          	  1837:                               jsr       kima_xztst               ;        jsr xztst
                        	  1838:                                                                  ;;
                        	  1839:                                                                  ;;   Test ry for zero.
                        	  1840:                                                                  ;;
00:0CD0 F00E            	  1841:                               beq       kima_add2                ;        beq add2
00:0CD2 206C11          	  1842:                               jsr       kima_yztst               ;        jsr yztst
00:0CD5 F00C            	  1843:                               beq       kima_add3                ;        beq add3
00:0CD7 249D            	  1844:                               bit       kima_temp                ;        bit temp
00:0CD9 5070            	  1845:                               bvc       kima_add6                ;        bvc add6
                        	  1846:                                                                  ;;
                        	  1847:                                                                  ;;   If the signs of the exponents
                        	  1848:                                                                  ;;   differ then swap rx and ry.
                        	  1849:                                                                  ;;
00:0CDB 2C3760          	  1850: kima_add1                     bit       kima_sx                  ;add1    bit sx
00:0CDE 5003            	  1851:                               bvc       kima_add3                ;        bvc add3
00:0CE0 207811          	  1852: kima_add2                     jsr       kima_xsy                 ;add2    jsr xsy
00:0CE3 F8              	  1853: kima_add3                     sed                                ;add3    sed
00:0CE4 249D            	  1854:                               bit       kima_temp                ;        bit temp
00:0CE6 7003            	  1855:                               bvs       kima_add31               ;        bvs add31
00:0CE8 4C650D          	  1856:                               jmp       kima_add9                ;        jmp add9
00:0CEB AD4860          	  1857: kima_add31                    lda       kima_ex                  ;add31   lda ex
00:0CEE 18              	  1858:                               clc                                ;        clc
00:0CEF 6D5A60          	  1859:                               adc       kima_ey                  ;        adc ey
00:0CF2 B012            	  1860:                               bcs       kima_add5                ;        bcs add5
00:0CF4 858E            	  1861: kima_add4                     sta       kima_cnt                 ;add4    sta cnt
                        	  1862:                                                                  ;;
                        	  1863:                                                                  ;;   Compute the hex value of the
                        	  1864:                                                                  ;;   bcd difference of the exponents.
                        	  1865:                                                                  ;;
00:0CF6 207C10          	  1866:                               jsr       kima_dechex              ;        jsr dechex
00:0CF9 C58B            	  1867:                               cmp       kima_n                   ;        cmp n
00:0CFB B009            	  1868:                               bcs       kima_add5                ;        bcs add5
                        	  1869:                                                                  ;;
                        	  1870:                                                                  ;;   Move ry to rb.
                        	  1871:                                                                  ;;
00:0CFD 20D510          	  1872:                               jsr       kima_rbery               ;        jsr rbery
                        	  1873:                                                                  ;;
                        	  1874:                                                                  ;;   Align decimal points.
                        	  1875:                                                                  ;;
00:0D00 20A710          	  1876:                               jsr       kima_rsbcnt              ;        jsr rsbcnt
                        	  1877:                                                                  ;;
                        	  1878:                                                                  ;;   Round rb off.
                        	  1879:                                                                  ;;
00:0D03 20C010          	  1880:                               jsr       kima_rboff               ;        jsr rboff
00:0D06 AD4860          	  1881: kima_add5                     lda       kima_ex                  ;add5    lda ex
00:0D09 8D6C60          	  1882:                               sta       kima_ez                  ;        sta ez
                        	  1883:                                                                  ;;
                        	  1884:                                                                  ;;   Move rx to ra.
                        	  1885:                                                                  ;;       
00:0D0C 20E210          	  1886:                               jsr       kima_raerx               ;        jsr raerx
00:0D0F 249D            	  1887:                               bit       kima_temp                ;        bit temp
00:0D11 306A            	  1888:                               bmi       kima_add13               ;        bmi add13
                        	  1889:                                                                  ;;
                        	  1890:                                                                  ;;   Add rb to ra.
                        	  1891:                                                                  ;;
00:0D13 201511          	  1892:                               jsr       kima_raprb               ;        jsr raprb
00:0D16 AD0260          	  1893:                               lda       kima_ra                  ;        lda ra
00:0D19 F01B            	  1894:                               beq       kima_add120              ;        beq add120
00:0D1B 205F10          	  1895:                               jsr       kima_rsra                ;        jsr rsra
                        	  1896:                                                                  ;;
                        	  1897:                                                                  ;;   Correct sign and exponent
                        	  1898:                                                                  ;;
00:0D1E AD4860          	  1899:                               lda       kima_ex                  ;        lda ex
00:0D21 38              	  1900:                               sec                                ;        sec
00:0D22 2C3760          	  1901:                               bit       kima_sx                  ;        bit sx
00:0D25 5019            	  1902:                               bvc       kima_add110              ;        bvc add110
00:0D27 E901            	  1903:                               sbc       #1                       ;        sbc #1
00:0D29 8D6C60          	  1904:                               sta       kima_ez                  ;        sta ez
00:0D2C D008            	  1905:                               bne       kima_add120              ;        bne add120
00:0D2E A9BF            	  1906:                               lda       #$bf                     ;        lda #$bf
00:0D30 2D3760          	  1907:                               and       kima_sx                  ;        and sx
00:0D33 4C390D          	  1908:                               jmp       kima_add12               ;        jmp add12
00:0D36 AD3760          	  1909: kima_add120                   lda       kima_sx                  ;add120  lda sx
00:0D39 8D5B60          	  1910: kima_add12                    sta       kima_sz                  ;add12   sta sz
                        	  1911:                                                                  ;;
                        	  1912:                                                                  ;;   Move ra to rz.
                        	  1913:                                                                  ;;
00:0D3C 200811          	  1914: kima_add121                   jsr       kima_rzera               ;add121  jsr rzera
00:0D3F 60              	  1915:                               rts                                ;        rts
00:0D40 6900            	  1916: kima_add110                   adc       #0                       ;add110  adc #0
00:0D42 8D6C60          	  1917:                               sta       kima_ez                  ;        sta ez
00:0D45 90EF            	  1918:                               bcc       kima_add120              ;        bcc add120
                        	  1919:                                                                  ;;
                        	  1920:                                                                  ;;   Set rz = 9.9...9e99
                        	  1921:                                                                  ;;
00:0D47 208B11          	  1922:                               jsr       kima_infin               ;        jsr infin
00:0D4A 60              	  1923:                               rts                                ;        rts
                        	  1924:                                                                  ;;
                        	  1925:                                                                  ;;   Compare abs(rx) to abs(ry)
                        	  1926:                                                                  ;;
00:0D4B 203B11          	  1927: kima_add6                     jsr       kima_compxy              ;add6    jsr compxy
00:0D4E A58F            	  1928:                               lda       kima_cnta                ;        lda cnta
00:0D50 F003            	  1929:                               beq       kima_add8                ;        beq add8
                        	  1930:                                                                  ;;
                        	  1931:                                                                  ;;   Swap rx and ry,
                        	  1932:                                                                  ;;   so that rx has the
                        	  1933:                                                                  ;;   largest abs. value.
                        	  1934:                                                                  ;;
00:0D52 207811          	  1935: kima_add7                     jsr       kima_xsy                 ;add7    jsr xsy
00:0D55 AD4860          	  1936: kima_add8                     lda       kima_ex                  ;add8    lda ex
00:0D58 CD5A60          	  1937:                               cmp       kima_ey                  ;        cmp ey
00:0D5B F005            	  1938:                               beq       kima_add81               ;        beq add81
00:0D5D 90F3            	  1939:                               bcc       kima_add7                ;        bcc add7
00:0D5F 4CDB0C          	  1940:                               jmp       kima_add1                ;        jmp add1
00:0D62 4CE30C          	  1941: kima_add81                    jmp       kima_add3                ;add81   jmp add3
                        	  1942:                                                                  ;;
                        	  1943:                                                                  ;;   Compute the absolute value
                        	  1944:                                                                  ;;   of the signed difference of
                        	  1945:                                                                  ;;   the exponents.
                        	  1946:                                                                  ;;
00:0D65 38              	  1947: kima_add9                     sec                                ;add9    sec
00:0D66 2C3760          	  1948:                               bit       kima_sx                  ;        bit sx
00:0D69 7009            	  1949:                               bvs       kima_add10               ;        bvs add10
00:0D6B AD4860          	  1950:                               lda       kima_ex                  ;        lda ex
00:0D6E ED5A60          	  1951:                               sbc       kima_ey                  ;        sbc ey
00:0D71 4CF40C          	  1952:                               jmp       kima_add4                ;        jmp add4
00:0D74 AD5A60          	  1953: kima_add10                    lda       kima_ey                  ;add10   lda ey
00:0D77 ED4860          	  1954:                               sbc       kima_ex                  ;        sbc ex
00:0D7A 4CF40C          	  1955:                               jmp       kima_add4                ;        jmp add4
                        	  1956:                                                                  ;;
                        	  1957:                                                                  ;;   Subtract rb from ra.
                        	  1958:                                                                  ;;
00:0D7D 202911          	  1959: kima_add13                    jsr       kima_ramrb               ;add13   jsr ramrb
00:0D80 AD4860          	  1960:                               lda       kima_ex                  ;        lda ex
00:0D83 8D6C60          	  1961:                               sta       kima_ez                  ;        sta ez
00:0D86 AD3760          	  1962:                               lda       kima_sx                  ;        lda sx
00:0D89 8D5B60          	  1963:                               sta       kima_sz                  ;        sta sz
                        	  1964:                                                                  ;;
                        	  1965:                                                                  ;;   Test ra for zero.
                        	  1966:                                                                  ;;
00:0D8C 205211          	  1967:                               jsr       kima_aztst               ;        jsr aztst
00:0D8F F018            	  1968:                               beq       kima_add18               ;        beq add18
00:0D91 AD0360          	  1969: kima_add15                    lda       kima_ra+1                ;add15   lda ra+1
00:0D94 D0A6            	  1970:                               bne       kima_add121              ;        bne add121
                        	  1971:                                                                  ;;
                        	  1972:                                                                  ;;   If ra+1 is zero then
                        	  1973:                                                                  ;;   left shift ra one digit.
                        	  1974:                                                                  ;;
00:0D96 204A10          	  1975:                               jsr       kima_lsra                ;        jsr lsra
00:0D99 2C5B60          	  1976: kima_add17                    bit       kima_sz                  ;add17   bit sz
00:0D9C 38              	  1977:                               sec                                ;        sec
00:0D9D AD6C60          	  1978:                               lda       kima_ez                  ;        lda ez
00:0DA0 500B            	  1979:                               bvc       kima_add20               ;        bvc add20
00:0DA2 6900            	  1980:                               adc       #0                       ;        adc #0
00:0DA4 8D6C60          	  1981:                               sta       kima_ez                  ;        sta ez
00:0DA7 90E8            	  1982:                               bcc       kima_add15               ;        bcc add15
                        	  1983:                                                                  ;;
                        	  1984:                                                                  ;;   Set rz equal to zero.
                        	  1985:                                                                  ;;
00:0DA9 204012          	  1986: kima_add18                    jsr       kima_clrz                ;add18   jsr clrz
00:0DAC 60              	  1987: kima_add19                    rts                                ;add19   rts
                        	  1988:                                                                  ;;
                        	  1989:                                                                  ;;   Adjust sign and exponent
                        	  1990:                                                                  ;;   of the answer.
                        	  1991:                                                                  ;;
00:0DAD E901            	  1992: kima_add20                    sbc       #1                       ;add20   sbc #1
00:0DAF 8D6C60          	  1993:                               sta       kima_ez                  ;        sta ez
                        	  1994:                                                                  ;
00:0DB2 B0DD            	  1995:                               bcs       kima_add15               ;        bcs add15
00:0DB4 A901            	  1996:                               lda       #1                       ;        lda #1
00:0DB6 8D6C60          	  1997:                               sta       kima_ez                  ;        sta ez
00:0DB9 A940            	  1998:                               lda       #$40                     ;        lda #$40
00:0DBB 0D5B60          	  1999:                               ora       kima_sz                  ;        ora sz
00:0DBE 8D5B60          	  2000:                               sta       kima_sz                  ;        sta sz
00:0DC1 4C910D          	  2001:                               jmp       kima_add15               ;        jmp add15
                        	  2002:                                                                  ;;
                        	  2003:                                                                  ;;   Floating point product routine.
                        	  2004:                                                                  ;;
00:0DC4 F8              	  2005: kima_mltply                   sed                                ;mltply  sed
                        	  2006:                                                                  ;;
                        	  2007:                                                                  ;;   Clear working storage.
                        	  2008:                                                                  ;;
00:0DC5 207110          	  2009:                               jsr       kima_clear               ;        jsr clear
00:0DC8 A900            	  2010:                               lda       #0                       ;        lda #0
00:0DCA 858E            	  2011:                               sta       kima_cnt                 ;        sta cnt
00:0DCC 859E            	  2012:                               sta       kima_temp1               ;        sta temp1
                        	  2013:                                                                  ;;
                        	  2014:                                                                  ;;   Test ra for zero.
                        	  2015:                                                                  ;;
00:0DCE 205F11          	  2016:                               jsr       kima_xztst               ;        jsr xztst
00:0DD1 F005            	  2017:                               beq       kima_mult1               ;        beq mult1
                        	  2018:                                                                  ;;
                        	  2019:                                                                  ;;   Test ry for zero.
                        	  2020:                                                                  ;;
00:0DD3 206C11          	  2021:                               jsr       kima_yztst               ;        jsr yztst
00:0DD6 D008            	  2022:                               bne       kima_mult3               ;        bne mult3
                        	  2023:                                                                  ;;
                        	  2024:                                                                  ;;   Set rz equal to zero.
                        	  2025:                                                                  ;;
00:0DD8 204012          	  2026: kima_mult1                    jsr       kima_clrz                ;mult1   jsr clrz
00:0DDB 60              	  2027:                               rts                                ;        rts
                        	  2028:                                                                  ;;
                        	  2029:                                                                  ;;   Move ra to rz
                        	  2030:                                                                  ;;
00:0DDC 200811          	  2031: kima_mult2                    jsr       kima_rzera               ;mult2   jsr rzera
00:0DDF 60              	  2032:                               rts                                ;        rts
                        	  2033:                                                                  ;;
                        	  2034:                                                                  ;;   Move ry to rb.
                        	  2035:                                                                  ;;
00:0DE0 20D510          	  2036: kima_mult3                    jsr       kima_rbery               ;mult3   jsr rbery
                        	  2037:                                                                  ;;
                        	  2038:                                                                  ;;   Move rx to rq.
                        	  2039:                                                                  ;;
00:0DE3 20EF10          	  2040:                               jsr       kima_rqerx               ;        jsr rqerx
                        	  2041:                                                                  ;;
                        	  2042:                                                                  ;;   Form product of mantissas
                        	  2043:                                                                  ;;
00:0DE6 200C0F          	  2044:                               jsr       kima_mlt                 ;        jsr mlt
                        	  2045:                                                                  ;;
                        	  2046:                                                                  ;;   Figure the sign and exponent of
                        	  2047:                                                                  ;;   of the answer for the multiply
                        	  2048:                                                                  ;;   and divide routines.
                        	  2049:                                                                  ;;
00:0DE9 AD4960          	  2050: kima_mult4                    lda       kima_sy                  ;mult4   lda sy
00:0DEC 4D3760          	  2051:                               eor       kima_sx                  ;        eor sx
00:0DEF 859D            	  2052:                               sta       kima_temp                ;        sta temp
00:0DF1 249D            	  2053:                               bit       kima_temp                ;        bit temp
00:0DF3 AD4860          	  2054:                               lda       kima_ex                  ;        lda ex
00:0DF6 701E            	  2055:                               bvs       kima_md100               ;        bvs md100
00:0DF8 18              	  2056: kima_md1                      clc                                ;md1     clc
00:0DF9 6D5A60          	  2057:                               adc       kima_ey                  ;        adc ey
00:0DFC 902B            	  2058:                               bcc       kima_md2                 ;        bcc md2
00:0DFE D061            	  2059:                               bne       kima_md59                ;        bne md59
00:0E00 A59E            	  2060:                               lda       kima_temp1               ;        lda temp1
00:0E02 F015            	  2061:                               beq       kima_mdov2               ;        beq mdov2
00:0E04 2C3760          	  2062:                               bit       kima_sx                  ;        bit sx
00:0E07 7067            	  2063:                               bvs       kima_md7                 ;        bvs md7
00:0E09 A58F            	  2064:                               lda       kima_cnta                ;        lda cnta
00:0E0B F05F            	  2065:                               beq       kima_md61                ;        beq md61
00:0E0D A900            	  2066:                               lda       #0                       ;        lda #0
00:0E0F 858F            	  2067:                               sta       kima_cnta                ;        sta cnta
00:0E11 A999            	  2068: kima_mdov1                    lda       #$99                     ;mdov1   lda #$99
00:0E13 4C290E          	  2069:                               jmp       kima_md2                 ;        jmp md2
00:0E16 4C7C0E          	  2070: kima_md100                    jmp       kima_md10                ;md100   jmp md10
00:0E19 2C3760          	  2071: kima_mdov2                    bit       kima_sx                  ;mdov2   bit sx
00:0E1C 504E            	  2072:                               bvc       kima_md61                ;        bvc md61
00:0E1E AD0260          	  2073:                               lda       kima_ra                  ;        lda ra
00:0E21 F0EE            	  2074:                               beq       kima_mdov1               ;        beq mdov1
00:0E23 205F10          	  2075:                               jsr       kima_rsra                ;        jsr rsra
00:0E26 4C110E          	  2076:                               jmp       kima_mdov1               ;        jmp mdov1
00:0E29 8D6C60          	  2077: kima_md2                      sta       kima_ez                  ;md2     sta ez
00:0E2C D064            	  2078:                               bne       kima_md11                ;        bne md11
00:0E2E AD3760          	  2079:                               lda       kima_sx                  ;        lda sx
00:0E31 29BF            	  2080:                               and       #$bf                     ;        and #$bf
00:0E33 8D5B60          	  2081: kima_md3                      sta       kima_sz                  ;md3     sta sz
00:0E36 A59D            	  2082: kima_md4                      lda       kima_temp                ;md4     lda temp
00:0E38 303A            	  2083:                               bmi       kima_md8                 ;        bmi md8
00:0E3A A97F            	  2084:                               lda       #$7f                     ;        lda #$7f
00:0E3C 2D5B60          	  2085:                               and       kima_sz                  ;        and sz
00:0E3F 8D5B60          	  2086: kima_md5                      sta       kima_sz                  ;md5     sta sz
00:0E42 A59E            	  2087:                               lda       kima_temp1               ;        lda temp1
00:0E44 D052            	  2088:                               bne       kima_divext              ;        bne divext
00:0E46 AD0260          	  2089:                               lda       kima_ra                  ;        lda ra
00:0E49 F013            	  2090:                               beq       kima_md51                ;        beq md51
00:0E4B 205F10          	  2091:                               jsr       kima_rsra                ;        jsr rsra
00:0E4E AD6C60          	  2092:                               lda       kima_ez                  ;        lda ez
00:0E51 2C5B60          	  2093:                               bit       kima_sz                  ;        bit sz
00:0E54 706B            	  2094:                               bvs       kima_md9                 ;        bvs md9
00:0E56 18              	  2095:                               clc                                ;        clc
00:0E57 6901            	  2096:                               adc       #1                       ;        adc #1
00:0E59 F00C            	  2097:                               beq       kima_md6                 ;        beq md6
00:0E5B 8D6C60          	  2098:                               sta       kima_ez                  ;        sta ez
00:0E5E 4CDC0D          	  2099: kima_md51                     jmp       kima_mult2               ;md51    jmp mult2
00:0E61 AD3760          	  2100: kima_md59                     lda       kima_sx                  ;md59    lda sx
00:0E64 8D5B60          	  2101:                               sta       kima_sz                  ;        sta sz
00:0E67 2C5B60          	  2102: kima_md6                      bit       kima_sz                  ;md6     bit sz
00:0E6A 7004            	  2103:                               bvs       kima_md7                 ;        bvs md7
00:0E6C 208B11          	  2104: kima_md61                     jsr       kima_infin               ;md61    jsr infin
00:0E6F 60              	  2105:                               rts                                ;        rts
00:0E70 204012          	  2106: kima_md7                      jsr       kima_clrz                ;md7     jsr clrz
00:0E73 60              	  2107:                               rts                                ;        rts
00:0E74 A980            	  2108: kima_md8                      lda       #$80                     ;md8     lda #$80
00:0E76 0D5B60          	  2109:                               ora       kima_sz                  ;        ora sz
00:0E79 4C3F0E          	  2110:                               jmp       kima_md5                 ;        jmp md5
00:0E7C 38              	  2111: kima_md10                     sec                                ;md10    sec
00:0E7D ED5A60          	  2112:                               sbc       kima_ey                  ;        sbc ey
00:0E80 B0A7            	  2113:                               bcs       kima_md2                 ;        bcs md2
00:0E82 38              	  2114:                               sec                                ;        sec
00:0E83 AD5A60          	  2115:                               lda       kima_ey                  ;        lda ey
00:0E86 ED4860          	  2116:                               sbc       kima_ex                  ;        sbc ex
00:0E89 8D6C60          	  2117:                               sta       kima_ez                  ;        sta ez
00:0E8C AD4960          	  2118:                               lda       kima_sy                  ;        lda sy
00:0E8F 4C330E          	  2119:                               jmp       kima_md3                 ;        jmp md3
00:0E92 AD3760          	  2120: kima_md11                     lda       kima_sx                  ;md11    lda sx
00:0E95 4C330E          	  2121:                               jmp       kima_md3                 ;        jmp md3
00:0E98 A58F            	  2122: kima_divext                   lda       kima_cnta                ;divext  lda cnta
00:0E9A F0C2            	  2123:                               beq       kima_md51                ;        beq md51
00:0E9C 2C5B60          	  2124: kima_dvext0                   bit       kima_sz                  ;dvext0  bit sz
00:0E9F AD6C60          	  2125:                               lda       kima_ez                  ;        lda ez
00:0EA2 38              	  2126:                               sec                                ;        sec
00:0EA3 500A            	  2127:                               bvc       kima_dvext2              ;        bvc dvext2
00:0EA5 6900            	  2128:                               adc       #0                       ;        adc #0
00:0EA7 F0BE            	  2129:                               beq       kima_md6                 ;        beq md6
00:0EA9 8D6C60          	  2130: kima_dvext1                   sta       kima_ez                  ;dvext1  sta ez
00:0EAC 4CDC0D          	  2131:                               jmp       kima_mult2               ;        jmp mult2
00:0EAF F005            	  2132: kima_dvext2                   beq       kima_dvext3              ;dvext2  beq dvext3
00:0EB1 E901            	  2133:                               sbc       #1                       ;        sbc #1
00:0EB3 4CA90E          	  2134:                               jmp       kima_dvext1              ;        jmp dvext1
00:0EB6 AD5B60          	  2135: kima_dvext3                   lda       kima_sz                  ;dvext3  lda sz
00:0EB9 0940            	  2136:                               ora       #$40                     ;        ora #$40
00:0EBB 8D5B60          	  2137:                               sta       kima_sz                  ;        sta sz
00:0EBE 4C9C0E          	  2138:                               jmp       kima_dvext0              ;        jmp dvext0
00:0EC1 38              	  2139: kima_md9                      sec                                ;md9     sec
00:0EC2 E901            	  2140:                               sbc       #1                       ;        sbc #1
00:0EC4 F006            	  2141:                               beq       kima_md22                ;        beq md22
00:0EC6 8D6C60          	  2142:                               sta       kima_ez                  ;        sta ez
00:0EC9 4CDC0D          	  2143:                               jmp       kima_mult2               ;        jmp mult2
00:0ECC 4C290E          	  2144: kima_md22                     jmp       kima_md2                 ;md22    jmp md2
                        	  2145:                                                                  ;;
                        	  2146:                                                                  ;;   Floating point divide routine
                        	  2147:                                                                  ;;
00:0ECF F8              	  2148: kima_divide                   sed                                ;divide  sed
                        	  2149:                                                                  ;;
                        	  2150:                                                                  ;;   Test ry for zero.
                        	  2151:                                                                  ;;
00:0ED0 206C11          	  2152:                               jsr       kima_yztst               ;        jsr yztst
00:0ED3 F097            	  2153:                               beq       kima_md61                ;        beq md61
                        	  2154:                                                                  ;;
                        	  2155:                                                                  ;;   Test rx for zero.
                        	  2156:                                                                  ;;
00:0ED5 205F11          	  2157:                               jsr       kima_xztst               ;        jsr xztst
00:0ED8 F096            	  2158:                               beq       kima_md7                 ;        beq md7
                        	  2159:                                                                  ;;
                        	  2160:                                                                  ;;   Clear working storage.
                        	  2161:                                                                  ;;
00:0EDA 207110          	  2162:                               jsr       kima_clear               ;        jsr clear
                        	  2163:                                                                  ;;
                        	  2164:                                                                  ;;   Move rx to ra.
                        	  2165:                                                                  ;;
00:0EDD 20E210          	  2166:                               jsr       kima_raerx               ;        jsr raerx
                        	  2167:                                                                  ;;
                        	  2168:                                                                  ;;   move ry to rb.
                        	  2169:                                                                  ;;
00:0EE0 20D510          	  2170:                               jsr       kima_rbery               ;        jsr rbery
                        	  2171:                                                                  ;;
                        	  2172:                                                                  ;;   Compare rx to ry
                        	  2173:                                                                  ;;
00:0EE3 203B11          	  2174:                               jsr       kima_compxy              ;        jsr compxy
                        	  2175:                                                                  ;;
                        	  2176:                                                                  ;;   Form quotient.
                        	  2177:                                                                  ;;
00:0EE6 202E0F          	  2178:                               jsr       kima_div                 ;        jsr div
                        	  2179:                                                                  ;;
                        	  2180:                                                                  ;;   Compute sign and exponent of answer.
                        	  2181:                                                                  ;;
00:0EE9 A901            	  2182: kima_div6                     lda       #1                       ;div6    lda #1
00:0EEB 859E            	  2183:                               sta       kima_temp1               ;        sta temp1
00:0EED AD4960          	  2184:                               lda       kima_sy                  ;        lda sy
00:0EF0 4940            	  2185:                               eor       #$40                     ;        eor #$40
00:0EF2 8D4960          	  2186:                               sta       kima_sy                  ;        sta sy
00:0EF5 20FC10          	  2187:                               jsr       kima_raerq               ;        jsr raerq
00:0EF8 AD0360          	  2188:                               lda       kima_ra+1                ;        lda ra+1
00:0EFB D003            	  2189:                               bne       kima_div7                ;        bne div7
00:0EFD 204A10          	  2190:                               jsr       kima_lsra                ;        jsr lsra
00:0F00 20E90D          	  2191: kima_div7                     jsr       kima_mult4               ;div7    jsr mult4
00:0F03 AD4960          	  2192:                               lda       kima_sy                  ;        lda sy
00:0F06 4940            	  2193:                               eor       #$40                     ;        eor #$40
00:0F08 8D4960          	  2194:                               sta       kima_sy                  ;        sta sy
00:0F0B 60              	  2195:                               rts                                ;        rts
                        	  2196:                                                                  ;;
                        	  2197:                                                                  ;;   This routine computes the
                        	  2198:                                                                  ;;   product of the mantissas
                        	  2199:                                                                  ;;   of the arguments by repeated
                        	  2200:                                                                  ;;   addition. The result is built
                        	  2201:                                                                  ;;   in ra.
                        	  2202:                                                                  ;;
00:0F0C A58B            	  2203: kima_mlt                      lda       kima_n                   ;mlt     lda n
00:0F0E 858D            	  2204:                               sta       kima_j                   ;        sta j
00:0F10 C68D            	  2205:                               dec       kima_j                   ;        dec j
00:0F12 A68D            	  2206: kima_mlt0                     ldx       kima_j                   ;mlt0    ldx j
00:0F14 BD2660          	  2207:                               lda       kima_rq,x                ;        lda rq,x
00:0F17 858E            	  2208:                               sta       kima_cnt                 ;        sta cnt
00:0F19 C68E            	  2209: kima_mlt1                     dec       kima_cnt                 ;mlt1    dec cnt
00:0F1B 3006            	  2210:                               bmi       kima_mlt2                ;        bmi mlt2
00:0F1D 201511          	  2211:                               jsr       kima_raprb               ;        jsr raprb
00:0F20 4C190F          	  2212:                               jmp       kima_mlt1                ;        jmp mlt1
00:0F23 205F10          	  2213: kima_mlt2                     jsr       kima_rsra                ;mlt2    jsr rsra
00:0F26 C68D            	  2214:                               dec       kima_j                   ;        dec j
00:0F28 10E8            	  2215:                               bpl       kima_mlt0                ;        bpl mlt0
00:0F2A 204A10          	  2216:                               jsr       kima_lsra                ;        jsr lsra
00:0F2D 60              	  2217:                               rts                                ;        rts
                        	  2218:                                                                  ;;
                        	  2219:                                                                  ;;   This routine computes the
                        	  2220:                                                                  ;;   quotient of ra and rb by
                        	  2221:                                                                  ;;   repeated subtraction. The
                        	  2222:                                                                  ;;   result is built in rq.
                        	  2223:                                                                  ;;
00:0F2E A900            	  2224: kima_div                      lda       #0                       ;div     lda #0
00:0F30 858D            	  2225:                               sta       kima_j                   ;        sta j
00:0F32 A900            	  2226: kima_div0                     lda       #0                       ;div0    lda #0
00:0F34 858E            	  2227:                               sta       kima_cnt                 ;        sta cnt
00:0F36 202911          	  2228: kima_div1                     jsr       kima_ramrb               ;div1    jsr ramrb
00:0F39 9004            	  2229:                               bcc       kima_div2                ;        bcc div2
00:0F3B E68E            	  2230:                               inc       kima_cnt                 ;        inc cnt
00:0F3D D0F7            	  2231:                               bne       kima_div1                ;        bne div1
00:0F3F 201511          	  2232: kima_div2                     jsr       kima_raprb               ;div2    jsr raprb
00:0F42 204A10          	  2233:                               jsr       kima_lsra                ;        jsr lsra
00:0F45 A68D            	  2234:                               ldx       kima_j                   ;        ldx j
00:0F47 A58E            	  2235:                               lda       kima_cnt                 ;        lda cnt
00:0F49 9D2660          	  2236:                               sta       kima_rq,x                ;        sta rq,x
00:0F4C E68D            	  2237:                               inc       kima_j                   ;        inc j
00:0F4E A58D            	  2238:                               lda       kima_j                   ;        lda j
00:0F50 C58B            	  2239:                               cmp       kima_n                   ;        cmp n
00:0F52 F0DE            	  2240:                               beq       kima_div0                ;        beq div0
00:0F54 90DC            	  2241:                               bcc       kima_div0                ;        bcc div0
00:0F56 60              	  2242:                               rts                                ;        rts
                        	  2243:                                                                  ;;
                        	  2244:                                                                  ;;   This routine computes the
                        	  2245:                                                                  ;;   square root of a floating point
                        	  2246:                                                                  ;;   number between 1 and 100 by
                        	  2247:                                                                  ;;   Heron's method.
                        	  2248:                                                                  ;;
00:0F57 A907            	  2249: kima_sqrt                     lda       #7                       ;sqrt    lda #7
00:0F59 858C            	  2250:                               sta       kima_nkon                ;        sta nkon
00:0F5B 20B111          	  2251:                               jsr       kima_mvxn                ;        jsr mvxn
00:0F5E 204012          	  2252:                               jsr       kima_clrz                ;        jsr clrz
00:0F61 A907            	  2253:                               lda       #7                       ;        lda #7
00:0F63 8D5C60          	  2254:                               sta       kima_rz+1                ;        sta rz+1
00:0F66 A908            	  2255:                               lda       #8                       ;        lda #8
00:0F68 8D5D60          	  2256:                               sta       kima_rz+2                ;        sta rz+2
00:0F6B 20CD11          	  2257:                               jsr       kima_mvzm                ;        jsr mvzm
00:0F6E 20D911          	  2258: kima_sqrt0                    jsr       kima_mvmy                ;sqrt0   jsr mvmy
00:0F71 20E511          	  2259:                               jsr       kima_mvnx                ;        jsr mvnx
00:0F74 20CF0E          	  2260:                               jsr       kima_divide              ;        jsr divide
00:0F77 20C911          	  2261:                               jsr       kima_mvzy                ;        jsr mvzy
00:0F7A 20D511          	  2262:                               jsr       kima_mvmx                ;        jsr mvmx
00:0F7D 20C10C          	  2263:                               jsr       kima_add                 ;        jsr add
00:0F80 20C511          	  2264:                               jsr       kima_mvzx                ;        jsr mvzx
00:0F83 203512          	  2265:                               jsr       kima_clry                ;        jsr clry
00:0F86 A940            	  2266:                               lda       #$40                     ;        lda #$40
00:0F88 8D4960          	  2267:                               sta       kima_ry                  ;        sta ry
00:0F8B A905            	  2268:                               lda       #5                       ;        lda #5
00:0F8D 8D4A60          	  2269:                               sta       kima_ry+1                ;        sta ry+1
00:0F90 A901            	  2270:                               lda       #1                       ;        lda #1
00:0F92 8D5A60          	  2271:                               sta       kima_ey                  ;        sta ey
00:0F95 20C40D          	  2272:                               jsr       kima_mltply              ;        jsr mltply
00:0F98 20CD11          	  2273:                               jsr       kima_mvzm                ;        jsr mvzm
00:0F9B C68C            	  2274:                               dec       kima_nkon                ;        dec nkon
00:0F9D 10CF            	  2275:                               bpl       kima_sqrt0               ;        bpl sqrt0
00:0F9F 60              	  2276:                               rts                                ;        rts
                        	  2277:                                                                  ;;
                        	  2278:                                                                  ;;   This routine computes the
                        	  2279:                                                                  ;;   common log of a floating point
                        	  2280:                                                                  ;;   number between sqrt(.1) and sqrt(10).
                        	  2281:                                                                  ;;
00:0FA0 A90E            	  2282: kima_log                      lda       #14                      ;log     lda #14
00:0FA2 858B            	  2283:                               sta       kima_n                   ;        sta n
00:0FA4 20B513          	  2284:                               jsr       kima_setkon              ;        jsr setkon
00:0FA7 20B111          	  2285:                               jsr       kima_mvxn                ;        jsr mvxn
00:0FAA 203512          	  2286:                               jsr       kima_clry                ;        jsr clry
00:0FAD A901            	  2287:                               lda       #1                       ;        lda #1
00:0FAF 8D4A60          	  2288:                               sta       kima_ry+1                ;        sta ry+1
00:0FB2 20B90C          	  2289:                               jsr       kima_sub                 ;        jsr sub
00:0FB5 20E511          	  2290:                               jsr       kima_mvnx                ;        jsr mvnx
00:0FB8 203512          	  2291:                               jsr       kima_clry                ;        jsr clry
00:0FBB A901            	  2292:                               lda       #1                       ;        lda #1
00:0FBD 8D4A60          	  2293:                               sta       kima_ry+1                ;        sta ry+1
00:0FC0 20D111          	  2294:                               jsr       kima_mvzn                ;        jsr mvzn
00:0FC3 20C10C          	  2295:                               jsr       kima_add                 ;        jsr add
00:0FC6 20C911          	  2296:                               jsr       kima_mvzy                ;        jsr mvzy
00:0FC9 20E511          	  2297:                               jsr       kima_mvnx                ;        jsr mvnx
00:0FCC 20CF0E          	  2298:                               jsr       kima_divide              ;        jsr divide
00:0FCF 20D111          	  2299:                               jsr       kima_mvzn                ;        jsr mvzn
00:0FD2 20C511          	  2300:                               jsr       kima_mvzx                ;        jsr mvzx
00:0FD5 20C911          	  2301:                               jsr       kima_mvzy                ;        jsr mvzy
00:0FD8 20C40D          	  2302:                               jsr       kima_mltply              ;        jsr mltply
00:0FDB A904            	  2303:                               lda       #4                       ;        lda #4
00:0FDD 8590            	  2304:                               sta       kima_deg                 ;        sta deg
00:0FDF A900            	  2305:                               lda       #0                       ;        lda #0
00:0FE1 858C            	  2306: kima_logend                   sta       kima_nkon                ;logend  sta nkon
00:0FE3 207A12          	  2307:                               jsr       kima_poly                ;        jsr poly
00:0FE6 20E911          	  2308:                               jsr       kima_mvny                ;        jsr mvny
00:0FE9 20C511          	  2309: kima_lgnd0                    jsr       kima_mvzx                ;lgnd0   jsr mvzx
00:0FEC 20C40D          	  2310:                               jsr       kima_mltply              ;        jsr mltply
00:0FEF A900            	  2311: kima_chop                     lda       #0                       ;chop    lda #0
00:0FF1 A207            	  2312:                               ldx       #kima_len/2-1            ;        ldx #len/2-1
00:0FF3 9D6460          	  2313: kima_chop0                    sta       kima_rz+9,x              ;chop0   sta rz+9,x
00:0FF6 CA              	  2314:                               dex                                ;        dex
00:0FF7 10FA            	  2315:                               bpl       kima_chop0               ;        bpl chop0
00:0FF9 60              	  2316:                               rts                                ;        rts
                        	  2317:                                                                  ;;
                        	  2318:                                                                  ;;   This routine computes the
                        	  2319:                                                                  ;;   common anti-log of a floating
                        	  2320:                                                                  ;;   point number between 0 and 1.
                        	  2321:                                                                  ;;
00:0FFA A90C            	  2322: kima_tenx                     lda       #12                      ;tenx    lda #12
00:0FFC 858B            	  2323:                               sta       kima_n                   ;        sta n
00:0FFE 20B513          	  2324:                               jsr       kima_setkon              ;        jsr setkon
00:1001 20A911          	  2325:                               jsr       kima_mvxz                ;        jsr mvxz
00:1004 A906            	  2326:                               lda       #6                       ;        lda #6
00:1006 8590            	  2327:                               sta       kima_deg                 ;        sta deg
00:1008 A92E            	  2328:                               lda       #46                      ;        lda #46
00:100A 858C            	  2329:                               sta       kima_nkon                ;        sta nkon
00:100C 207A12          	  2330:                               jsr       kima_poly                ;        jsr poly
00:100F 20C911          	  2331:                               jsr       kima_mvzy                ;        jsr mvzy
00:1012 4CE90F          	  2332:                               jmp       kima_lgnd0               ;        jmp lgnd0
                        	  2333:                                                                  ;;
                        	  2334:                                                                  ;;   This routine computes the
                        	  2335:                                                                  ;;   tangent of a floating point number
                        	  2336:                                                                  ;;   between 0 and pi/4. NOTE: argument is angle*(4/pi
                        	  2337:                                                                  ;;
00:1015 A90E            	  2338: kima_tanx                     lda       #14                      ;tanx    lda #14
00:1017 858B            	  2339:                               sta       kima_n                   ;        sta n
00:1019 20B513          	  2340:                               jsr       kima_setkon              ;        jsr setkon
00:101C 20B111          	  2341:                               jsr       kima_mvxn                ;        jsr mvxn
00:101F 20A511          	  2342:                               jsr       kima_mvxy                ;        jsr mvxy
00:1022 20C40D          	  2343:                               jsr       kima_mltply              ;        jsr mltply
00:1025 20EF0F          	  2344:                               jsr       kima_chop                ;        jsr chop
00:1028 A905            	  2345:                               lda       #5                       ;        lda #5
00:102A 8590            	  2346:                               sta       kima_deg                 ;        sta deg
00:102C A964            	  2347:                               lda       #100                     ;        lda #100
00:102E 4CE10F          	  2348:                               jmp       kima_logend              ;        jmp logend
                        	  2349:                                                                  ;;
                        	  2350:                                                                  ;;   This routine computes the
                        	  2351:                                                                  ;;   arctangent of a floating point number
                        	  2352:                                                                  ;;   between 0 and 1.
                        	  2353:                                                                  ;;
00:1031 A90E            	  2354: kima_atanx                    lda       #14                      ;atanx   lda #14
00:1033 858B            	  2355:                               sta       kima_n                   ;        sta n
00:1035 20B513          	  2356:                               jsr       kima_setkon              ;        jsr setkon
00:1038 20B111          	  2357:                               jsr       kima_mvxn                ;        jsr mvxn
00:103B 20A511          	  2358:                               jsr       kima_mvxy                ;        jsr mvxy
00:103E 20C40D          	  2359:                               jsr       kima_mltply              ;        jsr mltply
00:1041 A907            	  2360:                               lda       #7                       ;        lda #7
00:1043 8590            	  2361:                               sta       kima_deg                 ;        sta deg
00:1045 A99C            	  2362:                               lda       #156                     ;        lda #156
00:1047 4CE10F          	  2363:                               jmp       kima_logend              ;        jmp logend
                        	  2364:                                                                  ;         
                        	  2365:                                                                  ;;
                        	  2366:                                                                  ;;   Left shift ra one digit.
                        	  2367:                                                                  ;;
00:104A A200            	  2368: kima_lsra                     ldx       #0                       ;lsra    ldx #0
00:104C BD0360          	  2369: kima_lsra0                    lda       kima_ra+1,x              ;lsra0   lda ra+1,x
00:104F 9D0260          	  2370:                               sta       kima_ra,x                ;        sta ra,x
00:1052 E8              	  2371:                               inx                                ;        inx
00:1053 E48B            	  2372:                               cpx       kima_n                   ;        cpx n
00:1055 90F5            	  2373:                               bcc       kima_lsra0               ;        bcc lsra0
                        	  2374:                                                                  ;
00:1057 F0F3            	  2375:                               beq       kima_lsra0               ;        beq lsra0
00:1059 A900            	  2376:                               lda       #0                       ;        lda #0
00:105B 9D0260          	  2377:                               sta       kima_ra,x                ;        sta ra,x
00:105E 60              	  2378:                               rts                                ;        rts
                        	  2379:                                                                  ;;
                        	  2380:                                                                  ;;   Right shift ra one digit.
                        	  2381:                                                                  ;;
00:105F A68B            	  2382: kima_rsra                     ldx       kima_n                   ;rsra    ldx n
00:1061 CA              	  2383:                               dex                                ;        dex
00:1062 BD0260          	  2384: kima_rsra0                    lda       kima_ra,x                ;rsra0   lda ra,x
00:1065 9D0360          	  2385:                               sta       kima_ra+1,x              ;        sta ra+1,x
00:1068 CA              	  2386:                               dex                                ;        dex
00:1069 10F7            	  2387:                               bpl       kima_rsra0               ;        bpl rsra0
00:106B A900            	  2388:                               lda       #0                       ;        lda #0
00:106D 8D0260          	  2389:                               sta       kima_ra                  ;        sta ra
00:1070 60              	  2390:                               rts                                ;        rts
                        	  2391:                                                                  ;;
                        	  2392:                                                                  ;;   Clear working storage.
                        	  2393:                                                                  ;;
00:1071 A234            	  2394: kima_clear                    ldx       #kima_len*3+1            ;clear   ldx #len*3+1
00:1073 A900            	  2395:                               lda       #0                       ;        lda #0
00:1075 9D0260          	  2396: kima_az0                      sta       kima_ra,x                ;az0     sta ra,x
00:1078 CA              	  2397:                               dex                                ;        dex
00:1079 10FA            	  2398:                               bpl       kima_az0                 ;        bpl az0
00:107B 60              	  2399:                               rts                                ;        rts
                        	  2400:                                                                  ;;
                        	  2401:                                                                  ;;   Convert the contents of cnt
                        	  2402:                                                                  ;;   from bcd to hex and store the
                        	  2403:                                                                  ;;   result in cnt.
                        	  2404:                                                                  ;;
00:107C F8              	  2405: kima_dechex                   sed                                ;dechex  sed
00:107D A200            	  2406:                               ldx       #0                       ;        ldx #0
00:107F 38              	  2407:                               sec                                ;        sec
00:1080 A58E            	  2408: kima_dhcnv1                   lda       kima_cnt                 ;dhcnv1  lda cnt
00:1082 E916            	  2409:                               sbc       #$16                     ;        sbc #$16
00:1084 9006            	  2410:                               bcc       kima_dhcnv2              ;        bcc dhcnv2
00:1086 858E            	  2411:                               sta       kima_cnt                 ;        sta cnt
00:1088 E8              	  2412:                               inx                                ;        inx
00:1089 4C8010          	  2413:                               jmp       kima_dhcnv1              ;        jmp dhcnv1
00:108C D8              	  2414: kima_dhcnv2                   cld                                ;dhcnv2  cld
00:108D A58E            	  2415:                               lda       kima_cnt                 ;        lda cnt
00:108F C90A            	  2416:                               cmp       #$0a                     ;        cmp #$0a
00:1091 9004            	  2417:                               bcc       kima_dhcnv3              ;        bcc dhcnv3
00:1093 290F            	  2418:                               and       #$0f                     ;        and #$0f
00:1095 6909            	  2419:                               adc       #$09                     ;        adc #$09
00:1097 868E            	  2420: kima_dhcnv3                   stx       kima_cnt                 ;dhcnv3  stx cnt
00:1099 068E            	  2421:                               asl       kima_cnt                 ;        asl cnt
00:109B 068E            	  2422:                               asl       kima_cnt                 ;        asl cnt
00:109D 068E            	  2423:                               asl       kima_cnt                 ;        asl cnt
00:109F 068E            	  2424:                               asl       kima_cnt                 ;        asl cnt
00:10A1 058E            	  2425:                               ora       kima_cnt                 ;        ora cnt
00:10A3 858E            	  2426:                               sta       kima_cnt                 ;        sta cnt
00:10A5 F8              	  2427:                               sed                                ;        sed
00:10A6 60              	  2428: kima_dhcnve                   rts                                ;dhcnve  rts
                        	  2429:                                                                  ;;
                        	  2430:                                                                  ;;   Right shift rb cnt times.
                        	  2431:                                                                  ;;
00:10A7 A58E            	  2432: kima_rsbcnt                   lda       kima_cnt                 ;rsbcnt  lda cnt
00:10A9 F029            	  2433:                               beq       kima_rbofe               ;        beq rbofe
00:10AB A68B            	  2434:                               ldx       kima_n                   ;        ldx n
00:10AD BD1460          	  2435: kima_rsbc                     lda       kima_rb,x                ;rsbc    lda rb,x
00:10B0 9D1560          	  2436:                               sta       kima_rb+1,x              ;        sta rb+1,x
00:10B3 CA              	  2437:                               dex                                ;        dex
00:10B4 10F7            	  2438:                               bpl       kima_rsbc                ;        bpl rsbc
00:10B6 A900            	  2439:                               lda       #0                       ;        lda #0
00:10B8 8D1460          	  2440:                               sta       kima_rb                  ;        sta rb
00:10BB C68E            	  2441:                               dec       kima_cnt                 ;        dec cnt
00:10BD D0E8            	  2442:                               bne       kima_rsbcnt              ;        bne rsbcnt
00:10BF 60              	  2443:                               rts                                ;        rts
                        	  2444:                                                                  ;;
                        	  2445:                                                                  ;;   Round rb off.
                        	  2446:                                                                  ;;
00:10C0 A68B            	  2447: kima_rboff                    ldx       kima_n                   ;rboff   ldx n
00:10C2 BD1560          	  2448:                               lda       kima_rb+1,x              ;        lda rb+1,x
00:10C5 C905            	  2449:                               cmp       #5                       ;        cmp #5
00:10C7 BD1460          	  2450: kima_rbof                     lda       kima_rb,x                ;rbof    lda rb,x
00:10CA 6990            	  2451:                               adc       #$90                     ;        adc #$90
00:10CC 290F            	  2452:                               and       #$0f                     ;        and #$0f
00:10CE 9D1460          	  2453:                               sta       kima_rb,x                ;        sta rb,x
00:10D1 CA              	  2454:                               dex                                ;        dex
00:10D2 10F3            	  2455:                               bpl       kima_rbof                ;        bpl rbof
00:10D4 60              	  2456: kima_rbofe                    rts                                ;rbofe   rts
                        	  2457:                                                                  ;;
                        	  2458:                                                                  ;;   Move ry to rb.
                        	  2459:                                                                  ;;
00:10D5 A68B            	  2460: kima_rbery                    ldx       kima_n                   ;rbery   ldx n
00:10D7 CA              	  2461:                               dex                                ;        dex
00:10D8 BD4A60          	  2462: kima_rbry                     lda       kima_ry+1,x              ;rbry    lda ry+1,x
00:10DB 9D1560          	  2463:                               sta       kima_rb+1,x              ;        sta rb+1,x
00:10DE CA              	  2464:                               dex                                ;        dex
00:10DF 10F7            	  2465:                               bpl       kima_rbry                ;        bpl rbry
00:10E1 60              	  2466:                               rts                                ;        rts
                        	  2467:                                                                  ;;
                        	  2468:                                                                  ;;   Move rx to ra.
                        	  2469:                                                                  ;;
00:10E2 A68B            	  2470: kima_raerx                    ldx       kima_n                   ;raerx   ldx n
00:10E4 CA              	  2471:                               dex                                ;        dex
00:10E5 BD3860          	  2472: kima_rarx0                    lda       kima_rx+1,x              ;rarx0   lda rx+1,x
00:10E8 9D0360          	  2473:                               sta       kima_ra+1,x              ;        sta ra+1,x
00:10EB CA              	  2474:                               dex                                ;        dex
00:10EC 10F7            	  2475:                               bpl       kima_rarx0               ;        bpl rarx0
00:10EE 60              	  2476: kima_rarxe                    rts                                ;rarxe   rts
                        	  2477:                                                                  ;;
                        	  2478:                                                                  ;;   Move rx to rq.
                        	  2479:                                                                  ;;
00:10EF A68B            	  2480: kima_rqerx                    ldx       kima_n                   ;rqerx   ldx n
00:10F1 CA              	  2481:                               dex                                ;        dex
00:10F2 BD3860          	  2482: kima_rqrx                     lda       kima_rx+1,x              ;rqrx    lda rx+1,x
00:10F5 9D2660          	  2483:                               sta       kima_rq,x                ;        sta rq,x
00:10F8 CA              	  2484:                               dex                                ;        dex
00:10F9 10F7            	  2485:                               bpl       kima_rqrx                ;        bpl rqrx
00:10FB 60              	  2486:                               rts                                ;        rts
                        	  2487:                                                                  ;;
                        	  2488:                                                                  ;;   Move rq to ra.
                        	  2489:                                                                  ;;
00:10FC A68B            	  2490: kima_raerq                    ldx       kima_n                   ;raerq   ldx n
00:10FE BD2660          	  2491: kima_rarq                     lda       kima_rq,x                ;rarq    lda rq,x
00:1101 9D0360          	  2492:                               sta       kima_ra+1,x              ;        sta ra+1,x
00:1104 CA              	  2493:                               dex                                ;        dex
00:1105 10F7            	  2494:                               bpl       kima_rarq                ;        bpl rarq
00:1107 60              	  2495:                               rts                                ;        rts
                        	  2496:                                                                  ;;
                        	  2497:                                                                  ;;   Move ra to rz.
                        	  2498:                                                                  ;;
00:1108 A68B            	  2499: kima_rzera                    ldx       kima_n                   ;rzera   ldx n
00:110A CA              	  2500:                               dex                                ;        dex
00:110B BD0360          	  2501: kima_rzra0                    lda       kima_ra+1,x              ;rzra0   lda ra+1,x
00:110E 9D5C60          	  2502:                               sta       kima_rz+1,x              ;        sta rz+1,x
00:1111 CA              	  2503:                               dex                                ;        dex
00:1112 10F7            	  2504:                               bpl       kima_rzra0               ;        bpl rzra0
00:1114 60              	  2505: kima_rzrae                    rts                                ;rzrae   rts
                        	  2506:                                                                  ;;
                        	  2507:                                                                  ;;   Add rb to ra.
                        	  2508:                                                                  ;;
00:1115 A68B            	  2509: kima_raprb                    ldx       kima_n                   ;raprb   ldx n
00:1117 18              	  2510:                               clc                                ;        clc
00:1118 BD0260          	  2511: kima_apb                      lda       kima_ra,x                ;apb     lda ra,x
00:111B 7D1460          	  2512:                               adc       kima_rb,x                ;        adc rb,x
00:111E 6990            	  2513:                               adc       #$90                     ;        adc #$90
00:1120 290F            	  2514:                               and       #$0f                     ;        and #$0f
00:1122 9D0260          	  2515:                               sta       kima_ra,x                ;        sta ra,x
00:1125 CA              	  2516:                               dex                                ;        dex
00:1126 10F0            	  2517:                               bpl       kima_apb                 ;        bpl apb
00:1128 60              	  2518:                               rts                                ;        rts
                        	  2519:                                                                  ;;
                        	  2520:                                                                  ;;   Subtract rb from ra.
                        	  2521:                                                                  ;;
00:1129 A68B            	  2522: kima_ramrb                    ldx       kima_n                   ;ramrb   ldx n
00:112B 38              	  2523:                               sec                                ;        sec
00:112C BD0260          	  2524: kima_amb                      lda       kima_ra,x                ;amb     lda ra,x
00:112F FD1460          	  2525:                               sbc       kima_rb,x                ;        sbc rb,x
00:1132 290F            	  2526:                               and       #$0f                     ;        and #$0f
00:1134 9D0260          	  2527:                               sta       kima_ra,x                ;        sta ra,x
00:1137 CA              	  2528:                               dex                                ;        dex
00:1138 10F2            	  2529:                               bpl       kima_amb                 ;        bpl amb
00:113A 60              	  2530:                               rts                                ;        rts
                        	  2531:                                                                  ;;
                        	  2532:                                                                  ;;   Compare rx to ry.
                        	  2533:                                                                  ;;
00:113B A900            	  2534: kima_compxy                   lda       #0                       ;compxy  lda #0
00:113D 858F            	  2535:                               sta       kima_cnta                ;        sta cnta
00:113F A68B            	  2536:                               ldx       kima_n                   ;        ldx n
00:1141 CA              	  2537:                               dex                                ;        dex
00:1142 38              	  2538:                               sec                                ;        sec
00:1143 BD3860          	  2539: kima_com1                     lda       kima_rx+1,x              ;com1    lda rx+1,x
00:1146 FD4A60          	  2540:                               sbc       kima_ry+1,x              ;        sbc ry+1,x
00:1149 CA              	  2541:                               dex                                ;        dex
00:114A 10F7            	  2542:                               bpl       kima_com1                ;        bpl com1
00:114C 9001            	  2543:                               bcc       kima_com2                ;        bcc com2
00:114E 60              	  2544:                               rts                                ;        rts
00:114F E68F            	  2545: kima_com2                     inc       kima_cnta                ;com2    inc cnta
00:1151 60              	  2546:                               rts                                ;        rts
                        	  2547:                                                                  ;;
                        	  2548:                                                                  ;;   Test ra for zero.
                        	  2549:                                                                  ;;
00:1152 A68B            	  2550: kima_aztst                    ldx       kima_n                   ;aztst   ldx n
00:1154 E8              	  2551:                               inx                                ;        inx
00:1155 BD0260          	  2552: kima_aztst0                   lda       kima_ra,x                ;aztst0  lda ra,x
00:1158 D011            	  2553:                               bne       kima_xztst1              ;        bne xztst1
00:115A CA              	  2554:                               dex                                ;        dex
00:115B 10F8            	  2555:                               bpl       kima_aztst0              ;        bpl aztst0
00:115D 300A            	  2556:                               bmi       kima_xztst2              ;        bmi xztst2
                        	  2557:                                                                  ;;
                        	  2558:                                                                  ;;   Test rx for zero.
                        	  2559:                                                                  ;;
00:115F A68B            	  2560: kima_xztst                    ldx       kima_n                   ;xztst   ldx n
00:1161 BD3760          	  2561: kima_xztst0                   lda       kima_rx,x                ;xztst0  lda rx,x
00:1164 D005            	  2562:                               bne       kima_xztst1              ;        bne xztst1
00:1166 CA              	  2563:                               dex                                ;        dex
00:1167 10F8            	  2564:                               bpl       kima_xztst0              ;        bpl xztst0
00:1169 A900            	  2565: kima_xztst2                   lda       #0                       ;xztst2  lda #0
00:116B 60              	  2566: kima_xztst1                   rts                                ;xztst1  rts
                        	  2567:                                                                  ;;
                        	  2568:                                                                  ;;   Test ry for zero.
                        	  2569:                                                                  ;;
00:116C A68B            	  2570: kima_yztst                    ldx       kima_n                   ;yztst   ldx n
00:116E BD4960          	  2571: kima_yztst0                   lda       kima_ry,x                ;yztst0  lda ry,x
00:1171 D0F8            	  2572:                               bne       kima_xztst1              ;        bne xztst1
00:1173 CA              	  2573:                               dex                                ;        dex
00:1174 10F8            	  2574:                               bpl       kima_yztst0              ;        bpl yztst0      ; *** NOTE: Change 'bpl' to '
00:1176 30F1            	  2575:                               bmi       kima_xztst2              ;        bmi xztst2      ; *** NOTE: Change 'bmi' to '
                        	  2576:                                                                  ;;
                        	  2577:                                                                  ;;   Swap rx and ry.
                        	  2578:                                                                  ;;
00:1178 A211            	  2579: kima_xsy                      ldx       #kima_len                ;xsy     ldx #len
00:117A BD3760          	  2580: kima_xsy1                     lda       kima_rx,x                ;xsy1    lda rx,x
00:117D BC4960          	  2581:                               ldy       kima_ry,x                ;        ldy ry,x
00:1180 9D4960          	  2582:                               sta       kima_ry,x                ;        sta ry,x
00:1183 98              	  2583:                               tya                                ;        tya
00:1184 9D3760          	  2584:                               sta       kima_rx,x                ;        sta rx,x
00:1187 CA              	  2585:                               dex                                ;        dex
00:1188 10F0            	  2586:                               bpl       kima_xsy1                ;        bpl xsy1
00:118A 60              	  2587:                               rts                                ;        rts
                        	  2588:                                                                  ;;
                        	  2589:                                                                  ;;   Set rz=9.9...9e99 and overr=1.
                        	  2590:                                                                  ;;
00:118B A68B            	  2591: kima_infin                    ldx       kima_n                   ;infin   ldx n
00:118D CA              	  2592:                               dex                                ;        dex
00:118E A909            	  2593:                               lda       #9                       ;        lda #9
00:1190 9D5C60          	  2594: kima_inf0                     sta       kima_rz+1,x              ;inf0    sta rz+1,x
00:1193 CA              	  2595:                               dex                                ;        dex
00:1194 10FA            	  2596:                               bpl       kima_inf0                ;        bpl inf0
00:1196 A999            	  2597:                               lda       #$99                     ;        lda #$99
00:1198 8D6C60          	  2598:                               sta       kima_ez                  ;        sta ez
00:119B A900            	  2599:                               lda       #0                       ;        lda #0
00:119D 8D5B60          	  2600:                               sta       kima_sz                  ;        sta sz
00:11A0 A901            	  2601:                               lda       #1                       ;        lda #1
00:11A2 859F            	  2602:                               sta       kima_overr               ;        sta overr
00:11A4 60              	  2603:                               rts                                ;        rts
                        	  2604:                                                                  ;;
                        	  2605:                                                                  ;;   The following routines are used
                        	  2606:                                                                  ;;   to move the contents from one
                        	  2607:                                                                  ;;   register to another, the names are
                        	  2608:                                                                  ;;   of the form mvsd, where s stands
                        	  2609:                                                                  ;;   for source and d for destination.
                        	  2610:                                                                  ;;
00:11A5 A901            	  2611: kima_mvxy                     lda       #kima_xy                 ;mvxy    lda #xy
00:11A7 D04A            	  2612:                               bne       kima_mvtr                ;        bne mvtr
00:11A9 A902            	  2613: kima_mvxz                     lda       #kima_xz                 ;mvxz    lda #xz
00:11AB D046            	  2614:                               bne       kima_mvtr                ;        bne mvtr
00:11AD A903            	  2615: kima_mvxm                     lda       #kima_xm                 ;mvxm    lda #xm
00:11AF D042            	  2616:                               bne       kima_mvtr                ;        bne mvtr
00:11B1 A904            	  2617: kima_mvxn                     lda       #kima_xn                 ;mvxn    lda #xn
00:11B3 D03E            	  2618:                               bne       kima_mvtr                ;        bne mvtr
00:11B5 A910            	  2619: kima_mvyx                     lda       #kima_yx                 ;mvyx    lda #yx
00:11B7 D03A            	  2620:                               bne       kima_mvtr                ;        bne mvtr
00:11B9 A912            	  2621: kima_mvyz                     lda       #kima_yz                 ;mvyz    lda #yz
00:11BB D036            	  2622:                               bne       kima_mvtr                ;        bne mvtr
00:11BD A913            	  2623: kima_mvym                     lda       #kima_ym                 ;mvym    lda #ym
00:11BF D032            	  2624:                               bne       kima_mvtr                ;        bne mvtr
00:11C1 A914            	  2625: kima_mvyn                     lda       #kima_yn                 ;mvyn    lda #yn
00:11C3 D02E            	  2626:                               bne       kima_mvtr                ;        bne mvtr
00:11C5 A920            	  2627: kima_mvzx                     lda       #kima_zx                 ;mvzx    lda #zx
00:11C7 D02A            	  2628:                               bne       kima_mvtr                ;        bne mvtr
00:11C9 A921            	  2629: kima_mvzy                     lda       #kima_zy                 ;mvzy    lda #zy
00:11CB D026            	  2630:                               bne       kima_mvtr                ;        bne mvtr
00:11CD A923            	  2631: kima_mvzm                     lda       #kima_zm                 ;mvzm    lda #zm
00:11CF D022            	  2632:                               bne       kima_mvtr                ;        bne mvtr
00:11D1 A924            	  2633: kima_mvzn                     lda       #kima_zn                 ;mvzn    lda #zn
00:11D3 D01E            	  2634:                               bne       kima_mvtr                ;        bne mvtr
00:11D5 A930            	  2635: kima_mvmx                     lda       #kima_mx                 ;mvmx    lda #mx
00:11D7 D01A            	  2636:                               bne       kima_mvtr                ;        bne mvtr
00:11D9 A931            	  2637: kima_mvmy                     lda       #kima_my                 ;mvmy    lda #my
00:11DB D016            	  2638:                               bne       kima_mvtr                ;        bne mvtr
00:11DD A932            	  2639: kima_mvmz                     lda       #kima_mz                 ;mvmz    lda #mz
00:11DF D012            	  2640:                               bne       kima_mvtr                ;        bne mvtr
00:11E1 A934            	  2641: kima_mvmn                     lda       #kima_mn                 ;mvmn    lda #mn
00:11E3 D00E            	  2642:                               bne       kima_mvtr                ;        bne mvtr
00:11E5 A940            	  2643: kima_mvnx                     lda       #kima_nx                 ;mvnx    lda #nx
00:11E7 D00A            	  2644:                               bne       kima_mvtr                ;        bne mvtr
00:11E9 A941            	  2645: kima_mvny                     lda       #kima_ny                 ;mvny    lda #ny
00:11EB D006            	  2646:                               bne       kima_mvtr                ;        bne mvtr
00:11ED A942            	  2647: kima_mvnz                     lda       #kima_nz                 ;mvnz    lda #nz
00:11EF D002            	  2648:                               bne       kima_mvtr                ;        bne mvtr
00:11F1 A943            	  2649: kima_mvnm                     lda       #kima_nm                 ;mvnm    lda #nm
00:11F3 48              	  2650: kima_mvtr                     pha                                ;mvtr    pha
00:11F4 A20B            	  2651:                               ldx       #11                      ;        ldx #11
00:11F6 BD1E12          	  2652: kima_mvtr0                    lda       kima_movr,x              ;mvtr0   lda movr,x
00:11F9 9D9160          	  2653:                               sta       kima_ramcod,x            ;        sta ramcod,x
00:11FC CA              	  2654:                               dex                                ;        dex
00:11FD 10F7            	  2655:                               bpl       kima_mvtr0               ;        bpl mvtr0
00:11FF 68              	  2656:                               pla                                ;        pla
00:1200 48              	  2657:                               pha                                ;        pha
00:1201 290F            	  2658:                               and       #$0f                     ;        and #$0f
00:1203 AA              	  2659:                               tax                                ;        tax
00:1204 BD1912          	  2660:                               lda       kima_tab,x               ;        lda tab,x
00:1207 8D9760          	  2661:                               sta       kima_ramb                ;        sta ramb
00:120A 68              	  2662:                               pla                                ;        pla
00:120B 4A              	  2663:                               lsr                                ;        lsr
00:120C 4A              	  2664:                               lsr                                ;        lsr
00:120D 4A              	  2665:                               lsr                                ;        lsr
00:120E 4A              	  2666:                               lsr                                ;        lsr
00:120F AA              	  2667:                               tax                                ;        tax
00:1210 BD1912          	  2668:                               lda       kima_tab,x               ;        lda tab,x
00:1213 8D9460          	  2669:                               sta       kima_rama                ;        sta rama
00:1216 4C9160          	  2670:                               jmp       kima_ramcod              ;        jmp ramcod
                        	  2671:                                                                  ;
00:1219 35              	  2672: kima_tab                      .byte     $35,$47,$59,$6b,$7d      ;tab     .byte $35,$47,$59,$6b,$7d
00:121A 47
00:121B 59
00:121C 6B
00:121D 7D
                        	  2673:                                                                  ;
00:121E A211            	  2674: kima_movr                     ldx       #kima_len                ;movr    ldx #len
00:1220 BD3760          	  2675: kima_movr0                    lda       kima_rx,x                ;movr0   lda rx,x
00:1223 9D4960          	  2676:                               sta       kima_ry,x                ;        sta ry,x
00:1226 CA              	  2677:                               dex                                ;        dex
00:1227 10F7            	  2678:                               bpl       kima_movr0               ;        bpl movr0
00:1229 60              	  2679:                               rts                                ;        rts
                        	  2680:                                                                  ;;
                        	  2681:                                                                  ;;   Set rx equal to zero.
                        	  2682:                                                                  ;;
00:122A A211            	  2683: kima_clrx                     ldx       #kima_len                ;clrx    ldx #len
00:122C A900            	  2684:                               lda       #0                       ;        lda #0
00:122E 9D3760          	  2685: kima_clrx0                    sta       kima_rx,x                ;clrx0   sta rx,x
00:1231 CA              	  2686:                               dex                                ;        dex
00:1232 10FA            	  2687:                               bpl       kima_clrx0               ;        bpl clrx0
00:1234 60              	  2688:                               rts                                ;        rts
                        	  2689:                                                                  ;;
                        	  2690:                                                                  ;;   Set ry equal to zero.
                        	  2691:                                                                  ;;
00:1235 A211            	  2692: kima_clry                     ldx       #kima_len                ;clry    ldx #len
00:1237 A900            	  2693:                               lda       #0                       ;        lda #0
00:1239 9D4960          	  2694: kima_clry0                    sta       kima_ry,x                ;clry0   sta ry,x
00:123C CA              	  2695:                               dex                                ;        dex
00:123D 10FA            	  2696:                               bpl       kima_clry0               ;        bpl clry0
00:123F 60              	  2697:                               rts                                ;        rts
                        	  2698:                                                                  ;;
                        	  2699:                                                                  ;;   Set rz equal to zero.
                        	  2700:                                                                  ;;
00:1240 A211            	  2701: kima_clrz                     ldx       #kima_len                ;clrz    ldx #len
00:1242 A900            	  2702:                               lda       #0                       ;        lda #0
00:1244 9D5B60          	  2703: kima_clrz0                    sta       kima_rz,x                ;clrz0   sta rz,x
00:1247 CA              	  2704:                               dex                                ;        dex
00:1248 10FA            	  2705:                               bpl       kima_clrz0               ;        bpl clrz0
00:124A 60              	  2706:                               rts                                ;        rts
                        	  2707:                                                                  ;;
                        	  2708:                                                                  ;;   This routine is used to look up
                        	  2709:                                                                  ;;   the coefficients of the poly-
                        	  2710:                                                                  ;;   nomials used in the approximations
                        	  2711:                                                                  ;;   of the transcendental functions.
                        	  2712:                                                                  ;;
00:124B 203512          	  2713: kima_lookup                   jsr       kima_clry                ;lookup  jsr clry
00:124E A200            	  2714:                               ldx       #0                       ;        ldx #0
00:1250 A48C            	  2715:                               ldy       kima_nkon                ;        ldy nkon
00:1252 B199            	  2716:                               lda       (kima_kon),y             ;        lda (kon),y
00:1254 8D4960          	  2717:                               sta       kima_sy                  ;        sta sy
00:1257 C8              	  2718: kima_lkp0                     iny                                ;lkp0    iny
00:1258 B199            	  2719:                               lda       (kima_kon),y             ;        lda (kon),y
00:125A C9F0            	  2720:                               cmp       #$f0                     ;        cmp #$f0
00:125C B013            	  2721:                               bcs       kima_lkp1                ;        bcs lkp1
00:125E 48              	  2722:                               pha                                ;        pha
00:125F 290F            	  2723:                               and       #$0f                     ;        and #$0f
00:1261 9D4B60          	  2724:                               sta       kima_ry+2,x              ;        sta ry+2,x
00:1264 68              	  2725:                               pla                                ;        pla
00:1265 4A              	  2726:                               lsr                                ;        lsr
00:1266 4A              	  2727:                               lsr                                ;        lsr
00:1267 4A              	  2728:                               lsr                                ;        lsr
00:1268 4A              	  2729:                               lsr                                ;        lsr
00:1269 9D4A60          	  2730:                               sta       kima_ry+1,x              ;        sta ry+1,x
00:126C E8              	  2731:                               inx                                ;        inx
00:126D E8              	  2732:                               inx                                ;        inx
00:126E 4C5712          	  2733:                               jmp       kima_lkp0                ;        jmp lkp0
00:1271 290F            	  2734: kima_lkp1                     and       #$0f                     ;lkp1    and #$0f
00:1273 8D5A60          	  2735:                               sta       kima_ey                  ;        sta ey
00:1276 C8              	  2736:                               iny                                ;        iny
00:1277 848C            	  2737:                               sty       kima_nkon                ;        sty nkon
00:1279 60              	  2738:                               rts                                ;        rts
                        	  2739:                                                                  ;;
                        	  2740:                                                                  ;;   This routine evaluates polynomials
                        	  2741:                                                                  ;;   by means of the nested multiplication
                        	  2742:                                                                  ;;   algorithm.
                        	  2743:                                                                  ;;
00:127A 20CD11          	  2744: kima_poly                     jsr       kima_mvzm                ;poly    jsr mvzm
00:127D 20C511          	  2745:                               jsr       kima_mvzx                ;        jsr mvzx
00:1280 204B12          	  2746:                               jsr       kima_lookup              ;        jsr lookup
00:1283 20C40D          	  2747: kima_poly0                    jsr       kima_mltply              ;poly0   jsr mltply
00:1286 204B12          	  2748:                               jsr       kima_lookup              ;        jsr lookup
00:1289 20C511          	  2749:                               jsr       kima_mvzx                ;        jsr mvzx
00:128C 20C10C          	  2750:                               jsr       kima_add                 ;        jsr add
00:128F 20D511          	  2751:                               jsr       kima_mvmx                ;        jsr mvmx
00:1292 20C911          	  2752:                               jsr       kima_mvzy                ;        jsr mvzy
00:1295 C690            	  2753:                               dec       kima_deg                 ;        dec deg
00:1297 10EA            	  2754:                               bpl       kima_poly0               ;        bpl poly0
00:1299 60              	  2755:                               rts                                ;        rts
                        	  2756:                                                                  ;;
                        	  2757:                                                                  ;;   This routine unpacks an argument
                        	  2758:                                                                  ;;   and stores the result in rz.
                        	  2759:                                                                  ;;
00:129A A200            	  2760: kima_pgtarg                   ldx       #0                       ;pgtarg  ldx #0
00:129C A000            	  2761:                               ldy       #0                       ;        ldy #0
00:129E B197            	  2762:                               lda       (kima_ptr),y             ;        lda (ptr),y
00:12A0 8D5B60          	  2763:                               sta       kima_sz                  ;        sta sz
00:12A3 C8              	  2764: kima_pgtrg0                   iny                                ;pgtrg0  iny
00:12A4 C48F            	  2765:                               cpy       kima_length              ;        cpy length
00:12A6 F015            	  2766:                               beq       kima_pgtrg1              ;        beq pgtrg1
00:12A8 B197            	  2767:                               lda       (kima_ptr),y             ;        lda (ptr),y
00:12AA 48              	  2768:                               pha                                ;        pha
00:12AB 290F            	  2769:                               and       #$0f                     ;        and #$0f
00:12AD 9D5D60          	  2770:                               sta       kima_rz+2,x              ;        sta rz+2,x
00:12B0 68              	  2771:                               pla                                ;        pla
00:12B1 4A              	  2772:                               lsr                                ;        lsr
00:12B2 4A              	  2773:                               lsr                                ;        lsr
00:12B3 4A              	  2774:                               lsr                                ;        lsr
00:12B4 4A              	  2775:                               lsr                                ;        lsr
00:12B5 9D5C60          	  2776:                               sta       kima_rz+1,x              ;        sta rz+1,x
00:12B8 E8              	  2777:                               inx                                ;        inx
00:12B9 E8              	  2778:                               inx                                ;        inx
00:12BA 4CA312          	  2779:                               jmp       kima_pgtrg0              ;        jmp pgtrg0
00:12BD B197            	  2780: kima_pgtrg1                   lda       (kima_ptr),y             ;pgtrg1  lda (ptr),y
00:12BF 8D6C60          	  2781:                               sta       kima_ez                  ;        sta ez
00:12C2 60              	  2782:                               rts                                ;        rts
                        	  2783:                                                                  ;;
                        	  2784:                                                                  ;;   This routine unpacks an argument
                        	  2785:                                                                  ;;   located at (argxl,argxh) and stores
                        	  2786:                                                                  ;;   the results in rz and rx.
                        	  2787:                                                                  ;;
00:12C3 A591            	  2788: kima_ploadx                   lda       kima_argxl               ;ploadx  lda argxl
00:12C5 8597            	  2789:                               sta       kima_ptr                 ;        sta ptr
00:12C7 A592            	  2790:                               lda       kima_argxh               ;        lda argxh
00:12C9 8598            	  2791:                               sta       kima_ptr+1               ;        sta ptr+1
00:12CB A59B            	  2792:                               lda       kima_prec                ;        lda prec
00:12CD 4A              	  2793:                               lsr                                ;        lsr
00:12CE 6901            	  2794:                               adc       #1                       ;        adc #1
00:12D0 858F            	  2795:                               sta       kima_length              ;        sta length
00:12D2 204012          	  2796:                               jsr       kima_clrz                ;        jsr clrz
00:12D5 209A12          	  2797:                               jsr       kima_pgtarg              ;        jsr pgtarg
00:12D8 20C511          	  2798:                               jsr       kima_mvzx                ;        jsr mvzx
00:12DB 60              	  2799:                               rts                                ;        rts
                        	  2800:                                                                  ;;
                        	  2801:                                                                  ;;   This routine unpacks an argument
                        	  2802:                                                                  ;;   located at (argyl,argyh) and stores
                        	  2803:                                                                  ;;   the results in ry and rz.
                        	  2804:                                                                  ;;
00:12DC A593            	  2805: kima_ploady                   lda       kima_argyl               ;ploady  lda argyl
00:12DE 8597            	  2806:                               sta       kima_ptr                 ;        sta ptr
00:12E0 A594            	  2807:                               lda       kima_argyh               ;        lda argyh
00:12E2 8598            	  2808:                               sta       kima_ptr+1               ;        sta ptr+1
00:12E4 A59B            	  2809:                               lda       kima_prec                ;        lda prec
00:12E6 4A              	  2810:                               lsr                                ;        lsr
00:12E7 6901            	  2811:                               adc       #1                       ;        adc #1
00:12E9 858F            	  2812:                               sta       kima_length              ;        sta length
00:12EB 204012          	  2813:                               jsr       kima_clrz                ;        jsr clrz
00:12EE 209A12          	  2814:                               jsr       kima_pgtarg              ;        jsr pgtarg
00:12F1 20C911          	  2815:                               jsr       kima_mvzy                ;        jsr mvzy
00:12F4 60              	  2816:                               rts                                ;        rts
                        	  2817:                                                                  ;;
                        	  2818:                                                                  ;;   This routine packs the contents
                        	  2819:                                                                  ;;   of rz into the locations starting
                        	  2820:                                                                  ;;   with address (res,res+1).
                        	  2821:                                                                  ;;
00:12F5 A200            	  2822: kima_pstres                   ldx       #0                       ;pstres  ldx #0
00:12F7 A000            	  2823:                               ldy       #0                       ;        ldy #0
00:12F9 AD5B60          	  2824:                               lda       kima_sz                  ;        lda sz
00:12FC 9195            	  2825:                               sta       (kima_res),y             ;        sta (res),y
00:12FE C8              	  2826:                               iny                                ;        iny
00:12FF BD5C60          	  2827: kima_ptres                    lda       kima_rz+1,x              ;ptres   lda rz+1,x
00:1302 0A              	  2828:                               asl                                ;        asl
00:1303 0A              	  2829:                               asl                                ;        asl
00:1304 0A              	  2830:                               asl                                ;        asl
00:1305 0A              	  2831:                               asl                                ;        asl
00:1306 1D5D60          	  2832:                               ora       kima_rz+2,x              ;        ora rz+2,x
00:1309 9195            	  2833:                               sta       (kima_res),y             ;        sta (res),y
00:130B C8              	  2834:                               iny                                ;        iny
00:130C E8              	  2835:                               inx                                ;        inx
00:130D E8              	  2836:                               inx                                ;        inx
00:130E E49B            	  2837:                               cpx       kima_prec                ;        cpx prec
00:1310 90ED            	  2838:                               bcc       kima_ptres               ;        bcc ptres
00:1312 AD6C60          	  2839:                               lda       kima_ez                  ;        lda ez
00:1315 9195            	  2840:                               sta       (kima_res),y             ;        sta (res),y
00:1317 60              	  2841:                               rts                                ;        rts
                        	  2842:                                                                  ;;
                        	  2843:                                                                  ;;   This routine converts an argument
                        	  2844:                                                                  ;;   from ASCII format to computational
                        	  2845:                                                                  ;;   format and stores the result in rz.
                        	  2846:                                                                  ;;
00:1318 A000            	  2847: kima_ugtarg                   ldy       #0                       ;ugtarg  ldy #0
00:131A B197            	  2848:                               lda       (kima_ptr),y             ;        lda (ptr),y
00:131C 8D5B60          	  2849:                               sta       kima_sz                  ;        sta sz
00:131F C8              	  2850: kima_ugtar0                   iny                                ;ugtar0  iny
00:1320 C48F            	  2851:                               cpy       kima_length              ;        cpy length
00:1322 F00A            	  2852:                               beq       kima_ugtar1              ;        beq ugtar1
00:1324 B197            	  2853:                               lda       (kima_ptr),y             ;        lda (ptr),y
00:1326 290F            	  2854:                               and       #$0f                     ;        and #$0f
00:1328 995B60          	  2855:                               sta       kima_rz,y                ;        sta rz,y
00:132B 4C1F13          	  2856:                               jmp       kima_ugtar0              ;        jmp ugtar0
00:132E B197            	  2857: kima_ugtar1                   lda       (kima_ptr),y             ;ugtar1  lda (ptr),y
00:1330 0A              	  2858:                               asl                                ;        asl
00:1331 0A              	  2859:                               asl                                ;        asl
00:1332 0A              	  2860:                               asl                                ;        asl
00:1333 0A              	  2861:                               asl                                ;        asl
00:1334 8D6C60          	  2862:                               sta       kima_ez                  ;        sta ez
00:1337 C8              	  2863:                               iny                                ;        iny
00:1338 B197            	  2864:                               lda       (kima_ptr),y             ;        lda (ptr),y
00:133A 290F            	  2865:                               and       #$0f                     ;        and #$0f
00:133C 0D6C60          	  2866:                               ora       kima_ez                  ;        ora ez
00:133F 8D6C60          	  2867:                               sta       kima_ez                  ;        sta ez
00:1342 60              	  2868:                               rts                                ;        rts
                        	  2869:                                                                  ;;
                        	  2870:                                                                  ;;   This routine converts an argument
                        	  2871:                                                                  ;;   from ASCII format to comp. format.
                        	  2872:                                                                  ;;   The address of the arg. is found in
                        	  2873:                                                                  ;;   (argxl,argxh) and the result is stored
                        	  2874:                                                                  ;;   in rz and rx.
                        	  2875:                                                                  ;;
00:1343 A591            	  2876: kima_uloadx                   lda       kima_argxl               ;uloadx  lda argxl
00:1345 8597            	  2877:                               sta       kima_ptr                 ;        sta ptr
00:1347 A592            	  2878:                               lda       kima_argxh               ;        lda argxh
00:1349 8598            	  2879:                               sta       kima_ptr+1               ;        sta ptr+1
00:134B A59B            	  2880:                               lda       kima_prec                ;        lda prec
00:134D 858F            	  2881:                               sta       kima_length              ;        sta length
00:134F E68F            	  2882:                               inc       kima_length              ;        inc length
00:1351 204012          	  2883:                               jsr       kima_clrz                ;        jsr clrz
00:1354 201813          	  2884:                               jsr       kima_ugtarg              ;        jsr ugtarg
00:1357 20C511          	  2885:                               jsr       kima_mvzx                ;        jsr mvzx
00:135A 60              	  2886:                               rts                                ;        rts
                        	  2887:                                                                  ;;
                        	  2888:                                                                  ;;   This routine converts an argument
                        	  2889:                                                                  ;;   from ASCII format to comp. format.
                        	  2890:                                                                  ;;   The address of the arg. is found in
                        	  2891:                                                                  ;;   (argyl,argyh) and the result is
                        	  2892:                                                                  ;;   stored in rz and ry.
                        	  2893:                                                                  ;;
00:135B A593            	  2894: kima_uloady                   lda       kima_argyl               ;uloady  lda argyl
00:135D 8597            	  2895:                               sta       kima_ptr                 ;        sta ptr
00:135F A594            	  2896:                               lda       kima_argyh               ;        lda argyh
00:1361 8598            	  2897:                               sta       kima_ptr+1               ;        sta ptr+1
00:1363 A59B            	  2898:                               lda       kima_prec                ;        lda prec
00:1365 858F            	  2899:                               sta       kima_length              ;        sta length
00:1367 E68F            	  2900:                               inc       kima_length              ;        inc length
00:1369 204012          	  2901:                               jsr       kima_clrz                ;        jsr clrz
00:136C 201813          	  2902:                               jsr       kima_ugtarg              ;        jsr ugtarg
00:136F 20C911          	  2903:                               jsr       kima_mvzy                ;        jsr mvzy
00:1372 60              	  2904:                               rts                                ;        rts
                        	  2905:                                                                  ;;
                        	  2906:                                                                  ;;   This routine converts the contents
                        	  2907:                                                                  ;;   of rz to ASCII format while moving
                        	  2908:                                                                  ;;   them to the address specified by
                        	  2909:                                                                  ;;   (res,res+1).
                        	  2910:                                                                  ;;
00:1373 A000            	  2911: kima_ustres                   ldy       #0                       ;ustres  ldy #0
00:1375 AD5B60          	  2912:                               lda       kima_sz                  ;        lda sz
00:1378 9195            	  2913:                               sta       (kima_res),y             ;        sta (res),y
00:137A C8              	  2914: kima_ustrs0                   iny                                ;ustrs0  iny
00:137B C49B            	  2915:                               cpy       kima_prec                ;        cpy prec
00:137D F002            	  2916:                               beq       kima_ustrs1              ;        beq ustrs1
00:137F B009            	  2917:                               bcs       kima_ustrs2              ;        bcs ustrs2
00:1381 B95B60          	  2918: kima_ustrs1                   lda       kima_rz,y                ;ustrs1  lda rz,y
00:1384 0930            	  2919:                               ora       #$30                     ;        ora #$30
00:1386 9195            	  2920:                               sta       (kima_res),y             ;        sta (res),y
00:1388 D0F0            	  2921:                               bne       kima_ustrs0              ;        bne ustrs0
00:138A C8              	  2922: kima_ustrs2                   iny                                ;ustrs2  iny
00:138B AD6C60          	  2923:                               lda       kima_ez                  ;        lda ez
00:138E 4A              	  2924:                               lsr                                ;        lsr
00:138F 4A              	  2925:                               lsr                                ;        lsr
00:1390 4A              	  2926:                               lsr                                ;        lsr
00:1391 4A              	  2927:                               lsr                                ;        lsr
00:1392 0930            	  2928:                               ora       #$30                     ;        ora #$30
00:1394 9195            	  2929:                               sta       (kima_res),y             ;        sta (res),y
00:1396 C8              	  2930:                               iny                                ;        iny
00:1397 AD6C60          	  2931:                               lda       kima_ez                  ;        lda ez
00:139A 290F            	  2932:                               and       #$0f                     ;        and #$0f
00:139C 0930            	  2933:                               ora       #$30                     ;        ora #$30
00:139E 9195            	  2934:                               sta       (kima_res),y             ;        sta (res),y
00:13A0 60              	  2935:                               rts                                ;        rts
                        	  2936:                                                                  ;;
                        	  2937:                                                                  ;;   This routine computes the
                        	  2938:                                                                  ;;   internal precision n from
                        	  2939:                                                                  ;;   prec and extra. The add is
                        	  2940:                                                                  ;;   a binary add (unsigned).
                        	  2941:                                                                  ;;
00:13A1 18              	  2942: kima_iprec                    clc                                ;iprec   clc
00:13A2 A59B            	  2943:                               lda       kima_prec                ;        lda prec
00:13A4 659C            	  2944:                               adc       kima_extra               ;        adc extra
00:13A6 858B            	  2945:                               sta       kima_n                   ;        sta n
00:13A8 60              	  2946:                               rts                                ;        rts
                        	  2947:                                                                  ;;
                        	  2948:                                                                  ;;   Save the processor index registers.
                        	  2949:                                                                  ;;
00:13A9 86A0            	  2950: kima_savxy                    stx       kima_tmpx                ;savxy   stx tmpx
00:13AB 84A1            	  2951:                               sty       kima_tmpy                ;        sty tmpy
00:13AD 60              	  2952:                               rts                                ;        rts
                        	  2953:                                                                  ;;
                        	  2954:                                                                  ;;   Recall the processor index registers.
                        	  2955:                                                                  ;;
00:13AE A6A0            	  2956: kima_rclxy                    ldx       kima_tmpx                ;rclxy   ldx tmpx
00:13B0 A4A1            	  2957:                               ldy       kima_tmpy                ;        ldy tmpy
00:13B2 60              	  2958:                               rts                                ;        rts
                        	  2959:                                                                  ;
00:13B3 C013            	  2960: kima_kaddr                    .word     kima_konst               ;kaddr   .word konst
00:13B5 ADB313          	  2961: kima_setkon                   lda       kima_kaddr               ;setkon  lda kaddr
00:13B8 8599            	  2962:                               sta       kima_kon                 ;        sta kon
00:13BA ADB413          	  2963:                               lda       kima_kaddr+1             ;        lda kaddr+1
00:13BD 859A            	  2964:                               sta       kima_konh                ;        sta konh
00:13BF 60              	  2965:                               rts                                ;        rts
                        	  2966:                                                                  ;;
                        	  2967:                                                                  ;;   These are the coefficients used
                        	  2968:                                                                  ;;   in the evaluation of the transcendental
                        	  2969:                                                                  ;;   functions.
00:13C0 40              	  2970: kima_konst                    .byte     $40,$18,$20,$91,$29,$97,$f1;konst   .byte $40,$18,$20,$91,$29,$97,$f1
00:13C1 18
00:13C2 20
00:13C3 91
00:13C4 29
00:13C5 97
00:13C6 F1
00:13C7 40              	  2971:                               .byte     $40,$55,$34,$27,$38,$70,$f2;        .byte $40,$55,$34,$27,$38,$70,$f2
00:13C8 55
00:13C9 34
00:13CA 27
00:13CB 38
00:13CC 70
00:13CD F2
00:13CE 40              	  2972:                               .byte     $40,$13,$13,$69,$01,$12,$10,$f1;        .byte $40,$13,$13,$69,$01,$12,$10,$f1
00:13CF 13
00:13D0 13
00:13D1 69
00:13D2 01
00:13D3 12
00:13D4 10
00:13D5 F1
00:13D6 40              	  2973:                               .byte     $40,$17,$31,$09,$55,$17,$f1;        .byte $40,$17,$31,$09,$55,$17,$f1
00:13D7 17
00:13D8 31
00:13D9 09
00:13DA 55
00:13DB 17
00:13DC F1
00:13DD 40              	  2974:                               .byte     $40,$28,$95,$51,$13,$02,$67,$f1;        .byte $40,$28,$95,$51,$13,$02,$67,$f1
00:13DE 28
00:13DF 95
00:13E0 51
00:13E1 13
00:13E2 02
00:13E3 67
00:13E4 F1
00:13E5 40              	  2975:                               .byte     $40,$86,$85,$88,$74,$83,$40,$50,$f1;        .byte $40,$86,$85,$88,$74,$83,$40,$
00:13E6 86
00:13E7 85
00:13E8 88
00:13E9 74
00:13EA 83
00:13EB 40
00:13EC 50
00:13ED F1
00:13EE 40              	  2976:                               .byte     $40,$93,$26,$42,$67,$f4  ;        .byte $40,$93,$26,$42,$67,$f4
00:13EF 93
00:13F0 26
00:13F1 42
00:13F2 67
00:13F3 F4
00:13F4 40              	  2977:                               .byte     $40,$25,$54,$91,$79,$60,$f3;        .byte $40,$25,$54,$91,$79,$60,$f3
00:13F5 25
00:13F6 54
00:13F7 91
00:13F8 79
00:13F9 60
00:13FA F3
00:13FB 40              	  2978:                               .byte     $40,$17,$42,$11,$19,$88,$f2;        .byte $40,$17,$42,$11,$19,$88,$f2
00:13FC 17
00:13FD 42
00:13FE 11
00:13FF 19
00:1400 88
00:1401 F2
00:1402 40              	  2979:                               .byte     $40,$72,$95,$17,$36,$66,$f2;        .byte $40,$72,$95,$17,$36,$66,$f2
00:1403 72
00:1404 95
00:1405 17
00:1406 36
00:1407 66
00:1408 F2
00:1409 40              	  2980:                               .byte     $40,$25,$43,$93,$57,$48,$40,$f1;        .byte $40,$25,$43,$93,$57,$48,$40,$f1
00:140A 25
00:140B 43
00:140C 93
00:140D 57
00:140E 48
00:140F 40
00:1410 F1
00:1411 40              	  2981:                               .byte     $40,$66,$27,$30,$88,$42,$90,$f1;        .byte $40,$66,$27,$30,$88,$42,$90,$f1
00:1412 66
00:1413 27
00:1414 30
00:1415 88
00:1416 42
00:1417 90
00:1418 F1
00:1419 00              	  2982:                               .byte     $00,$11,$51,$29,$27,$76,$03,$f0;        .byte $00,$11,$51,$29,$27,$76,$03,$f0
00:141A 11
00:141B 51
00:141C 29
00:141D 27
00:141E 76
00:141F 03
00:1420 F0
00:1421 00              	  2983:                               .byte     $00,$10,$f0              ;        .byte $00,$10,$f0
00:1422 10
00:1423 F0
00:1424 40              	  2984:                               .byte     $40,$41,$09,$74,$19,$48,$f4;        .byte $40,$41,$09,$74,$19,$48,$f4
00:1425 41
00:1426 09
00:1427 74
00:1428 19
00:1429 48
00:142A F4
00:142B 40              	  2985:                               .byte     $40,$20,$31,$17,$10,$84,$f4;        .byte $40,$20,$31,$17,$10,$84,$f4
00:142C 20
00:142D 31
00:142E 17
00:142F 10
00:1430 84
00:1431 F4
00:1432 40              	  2986:                               .byte     $40,$27,$97,$43,$35,$03,$70,$f3;        .byte $40,$27,$97,$43,$35,$03,$70,$f3
00:1433 27
00:1434 97
00:1435 43
00:1436 35
00:1437 03
00:1438 70
00:1439 F3
00:143A 40              	  2987:                               .byte     $40,$98,$34,$59,$45,$39,$30,$f3;        .byte $40,$98,$34,$59,$45,$39,$30,$f3
00:143B 98
00:143C 34
00:143D 59
00:143E 45
00:143F 39
00:1440 30
00:1441 F3
00:1442 40              	  2988:                               .byte     $40,$39,$86,$59,$10,$47,$05,$f2;        .byte $40,$39,$86,$59,$10,$47,$05,$f2
00:1443 39
00:1444 86
00:1445 59
00:1446 10
00:1447 47
00:1448 05
00:1449 F2
00:144A 40              	  2989:                               .byte     $40,$16,$14,$89,$77,$76,$17,$40,$f1;        .byte $40,$16,$14,$89,$77,$76,$17,$
00:144B 16
00:144C 14
00:144D 89
00:144E 77
00:144F 76
00:1450 17
00:1451 40
00:1452 F1
00:1453 40              	  2990:                               .byte     $40,$78,$53,$98,$17,$62,$29,$10,$f1;        .byte $40,$78,$53,$98,$17,$62,$29,$
00:1454 78
00:1455 53
00:1456 98
00:1457 17
00:1458 62
00:1459 29
00:145A 10
00:145B F1
00:145C 40              	  2991:                               .byte     $40,$28,$49,$88,$96,$20,$80,$f3;        .byte $40,$28,$49,$88,$96,$20,$80,$f3
00:145D 28
00:145E 49
00:145F 88
00:1460 96
00:1461 20
00:1462 80
00:1463 F3
00:1464 C0              	  2992:                               .byte     $c0,$16,$06,$86,$28,$96,$04,$f2;        .byte $c0,$16,$06,$86,$28,$96,$04,$f2
00:1465 16
00:1466 06
00:1467 86
00:1468 28
00:1469 96
00:146A 04
00:146B F2
00:146C 40              	  2993:                               .byte     $40,$42,$69,$15,$19,$27,$11,$f2;        .byte $40,$42,$69,$15,$19,$27,$11,$f2
00:146D 42
00:146E 69
00:146F 15
00:1470 19
00:1471 27
00:1472 11
00:1473 F2
00:1474 C0              	  2994:                               .byte     $c0,$75,$04,$29,$45,$38,$89,$f2;        .byte $c0,$75,$04,$29,$45,$38,$89,$f2
00:1475 75
00:1476 04
00:1477 29
00:1478 45
00:1479 38
00:147A 89
00:147B F2
00:147C 40              	  2995:                               .byte     $40,$10,$64,$09,$34,$02,$53,$f1;        .byte $40,$10,$64,$09,$34,$02,$53,$f1
00:147D 10
00:147E 64
00:147F 09
00:1480 34
00:1481 02
00:1482 53
00:1483 F1
00:1484 C0              	  2996:                               .byte     $c0,$14,$20,$36,$44,$46,$65,$20,$f1;        .byte $c0,$14,$20,$36,$44,$46,$65,$
00:1485 14
00:1486 20
00:1487 36
00:1488 44
00:1489 46
00:148A 65
00:148B 20
00:148C F1
00:148D 40              	  2997:                               .byte     $40,$19,$99,$26,$19,$39,$16,$60,$f1;        .byte $40,$19,$99,$26,$19,$39,$16,$
00:148E 19
00:148F 99
00:1490 26
00:1491 19
00:1492 39
00:1493 16
00:1494 60
00:1495 F1
00:1496 C0              	  2998:                               .byte     $c0,$33,$33,$30,$73,$34,$50,$50,$f1;        .byte $c0,$33,$33,$30,$73,$34,$50,$
00:1497 33
00:1498 33
00:1499 30
00:149A 73
00:149B 34
00:149C 50
00:149D 50
00:149E F1
00:149F 40              	  2999:                               .byte     $40,$99,$99,$99,$98,$47,$65,$70,$f1;        .byte $40,$99,$99,$99,$98,$47,$65,$
00:14A0 99
00:14A1 99
00:14A2 99
00:14A3 98
00:14A4 47
00:14A5 65
00:14A6 70
00:14A7 F1
                        	  3000:                                                                  ;    .end
                        	  3001: getintataddress                                                  ;---STARTFUNCTIONARGUMENTS retval:int  funcname:getint
                        	  3002: getintataddress_q             =         $0000                    ;define var ADDRESSPTR = q sizeof(2) with type_varpoin
                        	  3003: getintataddress_q_0           =         $0000                    ;define var ADDRESSPTR = q sizeof(2) with type_varpoin
                        	  3004: getintataddress_q_1           =         $0001                    ;define var name:q sizeof(2) baseadress:$   0
                        	  3005:                                                                  ;STOPFUNCTIONARGUMENTS closebracket = closebracket wit
                        	  3006:                                                                  ;CONSTINTSTATEMENT (name:getintataddress_sframe, value
                        	  3007: getintataddress_sframe        =         2                        ;const getintataddress_sframe = 2 with constvalue
00:14A8 EA              	  3008:                               NOP                                ;---STARTBLOCK args startblock = startblock with 
00:14A9 A93E            	  3009:                               LDA       #getintataddress_sflast  ;set length of stackframe (3)
00:14AB 200103          	  3010:                               JSR       setunireg7fromaccu       ;make space on stack (3)
00:14AE 202803          	  3011:                               JSR       subu7fromuserstack       ;inline assembler from souceline:3
                        	  3012: getintataddress_p             =         $0002                    ;define var ADDRESSPTR = p sizeof(2) with type_varpoin
                        	  3013: getintataddress_p_0           =         $0002                    ;define var ADDRESSPTR = p sizeof(2) with type_varpoin
                        	  3014: getintataddress_p_1           =         $0003                    ;define var name:p sizeof(2) baseadress:$   2
                        	  3015: getintataddress_ad            =         $0004                    ;define var int = ad sizeof(2) with type_integer,varde
                        	  3016: getintataddress_ad_0          =         $0004                    ;define var int = ad sizeof(2) with type_integer,varde
                        	  3017: getintataddress_ad_1          =         $0005                    ;define var name:ad sizeof(2) baseadress:$   4
                        	  3018: getintataddress_x             =         $0006                    ;define var int = x sizeof(2) with type_integer,vardef
                        	  3019: getintataddress_x_0           =         $0006                    ;define var int = x sizeof(2) with type_integer,vardef
                        	  3020: getintataddress_x_1           =         $0007                    ;define var name:x sizeof(2) baseadress:$   6
                        	  3021:                                                                  ;BEGINDOEVALUATE: Expression:  q , Stackdepth:2, Stack
00:14B1 A540            	  3022:                               LDA       _userstack_0             ;Copy userstack to unireg7
00:14B3 8538            	  3023:                               STA       _unireg7_0               ;
00:14B5 A541            	  3024:                               LDA       _userstack_1             ;
00:14B7 8539            	  3025:                               STA       _unireg7_1               ;
00:14B9 A93E            	  3026:                               LDA       #getintataddress_sflast  ;
00:14BB 20D702          	  3027:                               JSR       addaccuto_unireg7        ;
00:14BE A912            	  3028:                               LDA       #18                      ;PUSHVARTOSTACK with Name:getintataddress_q
00:14C0 20F102          	  3029:                               JSR       subaccufrom_unireg7      ;sub from ureg7
00:14C3 18              	  3030:                               CLC                                ;
00:14C4 A544            	  3031:                               LDA       _framepointer_0          ;
00:14C6 6900            	  3032:                               ADC       #getintataddress_q       ;
00:14C8 8530            	  3033:                               STA       _unireg6_0               ;
00:14CA A545            	  3034:                               LDA       _framepointer_1          ;
00:14CC 6900            	  3035:                               ADC       #0                       ;
00:14CE 8531            	  3036:                               STA       _unireg6_1               ;
                        	  3037:                                                                  ;Calling PUSHVARONSTACK as virtual Subroutine
00:14D0 20121A          	  3038:                               JSR       pushvaronstack_2         ;
00:14D3 18              	  3039:                               CLC                                ;POPVARFROMSTACK LOCAL to Name:getintataddress_p
00:14D4 A540            	  3040:                               LDA       _userstack_0             ;destination size for token:p is:2 bytes
00:14D6 6902            	  3041:                               ADC       #getintataddress_p       ;
00:14D8 8530            	  3042:                               STA       _unireg6_0               ;
00:14DA A541            	  3043:                               LDA       _userstack_1             ;
00:14DC 6900            	  3044:                               ADC       #0                       ;
00:14DE 8531            	  3045:                               STA       _unireg6_1               ;
                        	  3046:                                                                  ;Calling POPVARFROMSTACK as virtual Subroutine
00:14E0 201E1A          	  3047:                               JSR       popvarfromstack_2        ;
00:14E3 A002            	  3048:                               LDY       #getintataddress_p       ;peek, get Value of getintataddress_p
00:14E5 B140            	  3049:                               LDA       (_userstack_0),Y         ;
00:14E7 8556            	  3050:                               STA       _zpscratch_0             ;save for indirect access
00:14E9 C8              	  3051:                               INY                                ;
00:14EA B140            	  3052:                               LDA       (_userstack_0),Y         ;
00:14EC 8557            	  3053:                               STA       _zpscratch_1             ;save for indirect access
00:14EE A000            	  3054:                               LDY       #0                       ;
00:14F0 B156            	  3055:                               LDA       (_zpscratch),Y           ;
00:14F2 8500            	  3056:                               STA       _unireg0_0               ;usally in _unireg0
00:14F4 6401            	  3057:                               STZ       _unireg0_1               ;clear upper byte of an long var
00:14F6 6402            	  3058:                               STZ       _unireg0_2               ;clear upper byte of an long var
00:14F8 6403            	  3059:                               STZ       _unireg0_3               ;clear upper byte of an long var
                        	  3060:                                                                  ;---COPYVAR (7) (sourcename:_unireg0, destname=getinta
00:14FA EA              	  3061:                               NOP                                ;COPYVAR GLOBAL LOKAL src:_unireg0, dest:getintataddre
00:14FB A500            	  3062:                               LDA       _unireg0                 ;copy int value
00:14FD A004            	  3063:                               LDY       #getintataddress_ad      ;load offset for destination
00:14FF 9140            	  3064:                               STA       (_userstack_0),Y         ;store data to ptr
00:1501 A501            	  3065:                               LDA       _unireg0_1               ;
00:1503 C8              	  3066:                               INY                                ;switch to next byte
00:1504 9140            	  3067:                               STA       (_userstack_0),Y         ;store date
                        	  3068:                                                                  ;END-COPYVAR (7) (sourcename:_unireg0, destname=getint
                        	  3069:                                                                  ;BEGINDOEVALUATE: Expression:  p  +  1 , Stackdepth:3,
00:1506 A540            	  3070:                               LDA       _userstack_0             ;Copy userstack to unireg7
00:1508 8538            	  3071:                               STA       _unireg7_0               ;
00:150A A541            	  3072:                               LDA       _userstack_1             ;
00:150C 8539            	  3073:                               STA       _unireg7_1               ;
00:150E A93E            	  3074:                               LDA       #getintataddress_sflast  ;
00:1510 20D702          	  3075:                               JSR       addaccuto_unireg7        ;
00:1513 A912            	  3076:                               LDA       #18                      ;PUSHVARTOSTACK with Name:getintataddress_p
00:1515 20F102          	  3077:                               JSR       subaccufrom_unireg7      ;sub from ureg7
00:1518 18              	  3078:                               CLC                                ;
00:1519 A540            	  3079:                               LDA       _userstack_0             ;
00:151B 6902            	  3080:                               ADC       #getintataddress_p       ;
00:151D 8530            	  3081:                               STA       _unireg6_0               ;
00:151F A541            	  3082:                               LDA       _userstack_1             ;
00:1521 6900            	  3083:                               ADC       #0                       ;
00:1523 8531            	  3084:                               STA       _unireg6_1               ;
                        	  3085:                                                                  ;Calling PUSHVARONSTACK as virtual Subroutine
00:1525 20121A          	  3086:                               JSR       pushvaronstack_2         ;
00:1528 A912            	  3087:                               LDA       #18                      ;PUSHVALUETOSTACK add stack for one var
00:152A 20F102          	  3088:                               JSR       subaccufrom_unireg7      ;sub from ureg7
00:152D A000            	  3089:                               LDY       #0                       ;Value:1
00:152F A901            	  3090:                               LDA       #$01                     ;Load from Value:0001
00:1531 9138            	  3091:                               STA       (_unireg7_0),Y           ;store byte to stack
00:1533 C8              	  3092:                               INY                                ;adjust to next byte
00:1534 A900            	  3093:                               LDA       #$00                     ;Load from Value:0001
00:1536 9138            	  3094:                               STA       (_unireg7_0),Y           ;store byte to stack
                        	  3095:                                                                  ;Calling ADDONSTACK as virtual Subroutine
00:1538 202A1A          	  3096:                               JSR       addonstack_2             ;
00:153B 18              	  3097:                               CLC                                ;POPVARFROMSTACK LOCAL to Name:getintataddress_p
00:153C A540            	  3098:                               LDA       _userstack_0             ;destination size for token:p is:2 bytes
00:153E 6902            	  3099:                               ADC       #getintataddress_p       ;
00:1540 8530            	  3100:                               STA       _unireg6_0               ;
00:1542 A541            	  3101:                               LDA       _userstack_1             ;
00:1544 6900            	  3102:                               ADC       #0                       ;
00:1546 8531            	  3103:                               STA       _unireg6_1               ;
                        	  3104:                                                                  ;Calling POPVARFROMSTACK as virtual Subroutine
00:1548 201E1A          	  3105:                               JSR       popvarfromstack_2        ;
00:154B A002            	  3106:                               LDY       #getintataddress_p       ;peek, get Value of getintataddress_p
00:154D B140            	  3107:                               LDA       (_userstack_0),Y         ;
00:154F 8556            	  3108:                               STA       _zpscratch_0             ;save for indirect access
00:1551 C8              	  3109:                               INY                                ;
00:1552 B140            	  3110:                               LDA       (_userstack_0),Y         ;
00:1554 8557            	  3111:                               STA       _zpscratch_1             ;save for indirect access
00:1556 A000            	  3112:                               LDY       #0                       ;
00:1558 B156            	  3113:                               LDA       (_zpscratch),Y           ;
00:155A 8500            	  3114:                               STA       _unireg0_0               ;usally in _unireg0
00:155C 6401            	  3115:                               STZ       _unireg0_1               ;clear upper byte of an long var
00:155E 6402            	  3116:                               STZ       _unireg0_2               ;clear upper byte of an long var
00:1560 6403            	  3117:                               STZ       _unireg0_3               ;clear upper byte of an long var
                        	  3118:                                                                  ;---COPYVAR (9) (sourcename:_unireg0, destname=getinta
00:1562 EA              	  3119:                               NOP                                ;COPYVAR GLOBAL LOKAL src:_unireg0, dest:getintataddre
00:1563 A500            	  3120:                               LDA       _unireg0                 ;copy int value
00:1565 A006            	  3121:                               LDY       #getintataddress_x       ;load offset for destination
00:1567 9140            	  3122:                               STA       (_userstack_0),Y         ;store data to ptr
00:1569 A501            	  3123:                               LDA       _unireg0_1               ;
00:156B C8              	  3124:                               INY                                ;switch to next byte
00:156C 9140            	  3125:                               STA       (_userstack_0),Y         ;store date
                        	  3126:                                                                  ;END-COPYVAR (9) (sourcename:_unireg0, destname=getint
00:156E A006            	  3127:                               LDY       #getintataddress_x       ;operation:shiftleft with operand:8
00:1570 B140            	  3128:                               LDA       (_userstack_0),Y         ;copy variable getintataddress_x to scrath register
00:1572 8546            	  3129:                               STA       _scratchregister_0       ;
00:1574 C8              	  3130:                               INY                                ;
00:1575 B140            	  3131:                               LDA       (_userstack_0),Y         ;
00:1577 8547            	  3132:                               STA       _scratchregister_1       ;
00:1579 0646            	  3133:                               ASL       _scratchregister_0       ;shift left fill carry with bit 0
00:157B 2647            	  3134:                               ROL       _scratchregister_1       ;rotate left, get bit 7 from carry flag
00:157D 0646            	  3135:                               ASL       _scratchregister_0       ;shift left fill carry with bit 0
00:157F 2647            	  3136:                               ROL       _scratchregister_1       ;rotate left, get bit 7 from carry flag
00:1581 0646            	  3137:                               ASL       _scratchregister_0       ;shift left fill carry with bit 0
00:1583 2647            	  3138:                               ROL       _scratchregister_1       ;rotate left, get bit 7 from carry flag
00:1585 0646            	  3139:                               ASL       _scratchregister_0       ;shift left fill carry with bit 0
00:1587 2647            	  3140:                               ROL       _scratchregister_1       ;rotate left, get bit 7 from carry flag
00:1589 0646            	  3141:                               ASL       _scratchregister_0       ;shift left fill carry with bit 0
00:158B 2647            	  3142:                               ROL       _scratchregister_1       ;rotate left, get bit 7 from carry flag
00:158D 0646            	  3143:                               ASL       _scratchregister_0       ;shift left fill carry with bit 0
00:158F 2647            	  3144:                               ROL       _scratchregister_1       ;rotate left, get bit 7 from carry flag
00:1591 0646            	  3145:                               ASL       _scratchregister_0       ;shift left fill carry with bit 0
00:1593 2647            	  3146:                               ROL       _scratchregister_1       ;rotate left, get bit 7 from carry flag
00:1595 0646            	  3147:                               ASL       _scratchregister_0       ;shift left fill carry with bit 0
00:1597 2647            	  3148:                               ROL       _scratchregister_1       ;rotate left, get bit 7 from carry flag
00:1599 A006            	  3149:                               LDY       #getintataddress_x       ;
00:159B A546            	  3150:                               LDA       _scratchregister_0       ;
00:159D 9140            	  3151:                               STA       (_userstack_0),Y         ;
00:159F C8              	  3152:                               INY                                ;
00:15A0 A547            	  3153:                               LDA       _scratchregister_1       ;
00:15A2 9140            	  3154:                               STA       (_userstack_0),Y         ;
                        	  3155:                                                                  ;BEGINDOEVALUATE: Expression:  ad  +  x , Stackdepth:3
00:15A4 A540            	  3156:                               LDA       _userstack_0             ;Copy userstack to unireg7
00:15A6 8538            	  3157:                               STA       _unireg7_0               ;
00:15A8 A541            	  3158:                               LDA       _userstack_1             ;
00:15AA 8539            	  3159:                               STA       _unireg7_1               ;
00:15AC A93E            	  3160:                               LDA       #getintataddress_sflast  ;
00:15AE 20D702          	  3161:                               JSR       addaccuto_unireg7        ;
00:15B1 A912            	  3162:                               LDA       #18                      ;PUSHVARTOSTACK with Name:getintataddress_ad
00:15B3 20F102          	  3163:                               JSR       subaccufrom_unireg7      ;sub from ureg7
00:15B6 18              	  3164:                               CLC                                ;
00:15B7 A540            	  3165:                               LDA       _userstack_0             ;
00:15B9 6904            	  3166:                               ADC       #getintataddress_ad      ;
00:15BB 8530            	  3167:                               STA       _unireg6_0               ;
00:15BD A541            	  3168:                               LDA       _userstack_1             ;
00:15BF 6900            	  3169:                               ADC       #0                       ;
00:15C1 8531            	  3170:                               STA       _unireg6_1               ;
                        	  3171:                                                                  ;Calling PUSHVARONSTACK as virtual Subroutine
00:15C3 20121A          	  3172:                               JSR       pushvaronstack_2         ;
00:15C6 A912            	  3173:                               LDA       #18                      ;PUSHVARTOSTACK with Name:getintataddress_x
00:15C8 20F102          	  3174:                               JSR       subaccufrom_unireg7      ;sub from ureg7
00:15CB 18              	  3175:                               CLC                                ;
00:15CC A540            	  3176:                               LDA       _userstack_0             ;
00:15CE 6906            	  3177:                               ADC       #getintataddress_x       ;
00:15D0 8530            	  3178:                               STA       _unireg6_0               ;
00:15D2 A541            	  3179:                               LDA       _userstack_1             ;
00:15D4 6900            	  3180:                               ADC       #0                       ;
00:15D6 8531            	  3181:                               STA       _unireg6_1               ;
                        	  3182:                                                                  ;Calling PUSHVARONSTACK as virtual Subroutine
00:15D8 20121A          	  3183:                               JSR       pushvaronstack_2         ;
                        	  3184:                                                                  ;Calling ADDONSTACK as virtual Subroutine
00:15DB 202A1A          	  3185:                               JSR       addonstack_2             ;
00:15DE A000            	  3186:                               LDY       #0                       ;POPVARFROMSTACK GLOBAL to Name:global_unireg0, size:8
00:15E0 B138            	  3187:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:15E2 8500            	  3188:                               STA       _unireg0_0               ;
00:15E4 C8              	  3189:                               INY                                ;
00:15E5 B138            	  3190:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:15E7 8501            	  3191:                               STA       _unireg0_1               ;
00:15E9 C8              	  3192:                               INY                                ;
00:15EA B138            	  3193:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:15EC 8502            	  3194:                               STA       _unireg0_2               ;
00:15EE C8              	  3195:                               INY                                ;
00:15EF B138            	  3196:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:15F1 8503            	  3197:                               STA       _unireg0_3               ;
00:15F3 C8              	  3198:                               INY                                ;
00:15F4 B138            	  3199:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:15F6 8504            	  3200:                               STA       _uniregA_0               ;
00:15F8 C8              	  3201:                               INY                                ;
00:15F9 B138            	  3202:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:15FB 8505            	  3203:                               STA       _uniregA_1               ;
00:15FD C8              	  3204:                               INY                                ;
00:15FE B138            	  3205:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:1600 8506            	  3206:                               STA       _uniregA_2               ;
00:1602 C8              	  3207:                               INY                                ;
00:1603 B138            	  3208:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:1605 8507            	  3209:                               STA       _uniregA_3               ;
00:1607 4C0A16          	  3210:                               JMP       getintataddress_exitlabel;
                        	  3211: getintataddress_exitlabel                                        ;ENDBLOCK name:endblock = endblock with 
00:160A A93E            	  3212:                               LDA       #getintataddress_sflast  ;correct stackpointer, remove stackframe (12)
00:160C 200103          	  3213:                               JSR       setunireg7fromaccu       ;inline assembler from souceline:12
00:160F 201803          	  3214:                               JSR       addu7touserstack         ;inline assembler from souceline:12
00:1612 60              	  3215:                               RTS                                ;inline assembler from souceline:12
                        	  3216: getintataddress_Eval_Stk      =         $0008                    ;define var chararray = Eval_Stk sizeof(54) with type_
                        	  3217: getintataddress_Eval_Stk_0    =         $0008                    ;define var chararray = Eval_Stk sizeof(54) with type_
                        	  3218:                                                                  ;CONSTINTSTATEMENT (name:getintataddress_sflast, value
                        	  3219: getintataddress_sflast        =         62                       ;const getintataddress_sflast = 62 with constvalue
                        	  3220: main                                                             ;---STARTFUNCTIONARGUMENTS retval:int  funcname:main
                        	  3221: main_argc                     =         $0000                    ;define var int = argc sizeof(2) with type_integer,isa
                        	  3222: main_argc_0                   =         $0000                    ;define var int = argc sizeof(2) with type_integer,isa
                        	  3223: main_argc_1                   =         $0001                    ;define var name:argc sizeof(2) baseadress:$   0
                        	  3224: main_argv                     =         $0002                    ;define var ADDRESSPTR = argv sizeof(2) with type_varp
                        	  3225: main_argv_0                   =         $0002                    ;define var ADDRESSPTR = argv sizeof(2) with type_varp
                        	  3226: main_argv_1                   =         $0003                    ;define var name:argv sizeof(2) baseadress:$   2
                        	  3227:                                                                  ;STOPFUNCTIONARGUMENTS closebracket = closebracket wit
                        	  3228:                                                                  ;CONSTINTSTATEMENT (name:main_sframe, value:4, attribs
                        	  3229: main_sframe                   =         4                        ;const main_sframe = 4 with constvalue
00:1613 EA              	  3230:                               NOP                                ;---STARTBLOCK args startblock = startblock with 
00:1614 A951            	  3231:                               LDA       #main_sflast             ;set length of stackframe (16)
00:1616 200103          	  3232:                               JSR       setunireg7fromaccu       ;make space on stack (16)
00:1619 202803          	  3233:                               JSR       subu7fromuserstack       ;inline assembler from souceline:16
                        	  3234: main_search                   =         $0004                    ;define var ADDRESSPTR = search sizeof(2) with type_va
                        	  3235: main_search_0                 =         $0004                    ;define var ADDRESSPTR = search sizeof(2) with type_va
                        	  3236: main_search_1                 =         $0005                    ;define var name:search sizeof(2) baseadress:$   4
                        	  3237: main_dosearch                 =         $0006                    ;define var byte = dosearch sizeof(1) with type_byte,v
                        	  3238: main_dosearch_0               =         $0006                    ;define var byte = dosearch sizeof(1) with type_byte,v
                        	  3239: main_pattern                  =         $0007                    ;define var ADDRESSPTR = pattern sizeof(2) with type_v
                        	  3240: main_pattern_0                =         $0007                    ;define var ADDRESSPTR = pattern sizeof(2) with type_v
                        	  3241: main_pattern_1                =         $0008                    ;define var name:pattern sizeof(2) baseadress:$   7
00:161C EA              	  3242: main_while_fpeo               NOP                                ;do_whileexpression
                        	  3243:                                                                  ;BEGINDOEVALUATE: Expression:  (  dosearch  ) , Stackd
00:161D A540            	  3244:                               LDA       _userstack_0             ;Copy userstack to unireg7
00:161F 8538            	  3245:                               STA       _unireg7_0               ;
00:1621 A541            	  3246:                               LDA       _userstack_1             ;
00:1623 8539            	  3247:                               STA       _unireg7_1               ;
00:1625 A951            	  3248:                               LDA       #main_sflast             ;
00:1627 20D702          	  3249:                               JSR       addaccuto_unireg7        ;
00:162A A912            	  3250:                               LDA       #18                      ;PUSHVARTOSTACK with Name:main_dosearch
00:162C 20F102          	  3251:                               JSR       subaccufrom_unireg7      ;sub from ureg7
00:162F 18              	  3252:                               CLC                                ;
00:1630 A540            	  3253:                               LDA       _userstack_0             ;
00:1632 6906            	  3254:                               ADC       #main_dosearch           ;
00:1634 8530            	  3255:                               STA       _unireg6_0               ;
00:1636 A541            	  3256:                               LDA       _userstack_1             ;
00:1638 6900            	  3257:                               ADC       #0                       ;
00:163A 8531            	  3258:                               STA       _unireg6_1               ;
                        	  3259:                                                                  ;Calling PUSHVARONSTACK as virtual Subroutine
00:163C 204D1A          	  3260:                               JSR       pushvaronstack_1         ;
00:163F A000            	  3261:                               LDY       #0                       ;POPVARFROMSTACK GLOBAL to Name:global_unireg0, size:8
00:1641 B138            	  3262:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:1643 8500            	  3263:                               STA       _unireg0_0               ;
00:1645 C8              	  3264:                               INY                                ;
00:1646 B138            	  3265:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:1648 8501            	  3266:                               STA       _unireg0_1               ;
00:164A C8              	  3267:                               INY                                ;
00:164B B138            	  3268:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:164D 8502            	  3269:                               STA       _unireg0_2               ;
00:164F C8              	  3270:                               INY                                ;
00:1650 B138            	  3271:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:1652 8503            	  3272:                               STA       _unireg0_3               ;
00:1654 C8              	  3273:                               INY                                ;
00:1655 B138            	  3274:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:1657 8504            	  3275:                               STA       _uniregA_0               ;
00:1659 C8              	  3276:                               INY                                ;
00:165A B138            	  3277:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:165C 8505            	  3278:                               STA       _uniregA_1               ;
00:165E C8              	  3279:                               INY                                ;
00:165F B138            	  3280:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:1661 8506            	  3281:                               STA       _uniregA_2               ;
00:1663 C8              	  3282:                               INY                                ;
00:1664 B138            	  3283:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:1666 8507            	  3284:                               STA       _uniregA_3               ;
00:1668 EA              	  3285:                               NOP                                ;start do_afterwhile()  
00:1669 A500            	  3286:                               LDA       _unireg0_0               ;load result from while from unireg0
00:166B D003            	  3287:                               BNE       main_whi_02_main_lacz    ;
00:166D 4C7A16          	  3288:                               JMP       main_whi_02_main_ecyc    ;
00:1670 EA              	  3289: main_whi_02_main_lacz         NOP                                ;do_afterwhileblocklabel
                        	  3290:                                                                  ;start assignvaluetovariable(stoken=dosearch, t_type=n
00:1671 A006            	  3291:                               LDY       #main_dosearch           ;load index
00:1673 A900            	  3292:                               LDA       #0                       ;load constant to accu
00:1675 9140            	  3293:                               STA       (_userstack),Y           ;store data in local var
00:1677 4C1C16          	  3294:                               JMP       main_while_fpeo          ;end do_afterwhile()
00:167A EA              	  3295: main_whi_02_main_ecyc         NOP                                ;end_afterwhile
                        	  3296:                                                                  ;start assignvaluetovariable(stoken=search, t_type=num
00:167B A900            	  3297:                               LDA       #$00                     ;load word(512,$0200) lobyte (00) in accu
00:167D A004            	  3298:                               LDY       #main_search             ;load index for name:main
00:167F 9140            	  3299:                               STA       (_userstack),Y           ;store relative to framepointer
00:1681 A902            	  3300:                               LDA       #$02                     ;load hibyte (02) in accu
00:1683 C8              	  3301:                               INY                                ;add pointer to hi-byte
00:1684 9140            	  3302:                               STA       (_userstack),Y           ;store hibyte
                        	  3303:                                                                  ;start assignvaluetovariable(stoken=dosearch, t_type=n
00:1686 A006            	  3304:                               LDY       #main_dosearch           ;load index
00:1688 A901            	  3305:                               LDA       #1                       ;load constant to accu
00:168A 9140            	  3306:                               STA       (_userstack),Y           ;store data in local var
00:168C A000            	  3307:                               LDY       #0                       ;internal write called with stringconstant
00:168E B9541A          	  3308: main_igbfuquo                 LDA       main_mbklbqng,Y          ;
00:1691 F01C            	  3309:                               BEQ       main_xtbcajvd            ;
00:1693 C95C            	  3310:                               CMP       #$5C                     ;check for backslash
00:1695 D011            	  3311:                               BNE       main_kwpqvydk            ;
00:1697 C8              	  3312:                               INY                                ;
00:1698 B9541A          	  3313:                               LDA       main_mbklbqng,Y          ;
00:169B F012            	  3314:                               BEQ       main_xtbcajvd            ;
00:169D C96E            	  3315:                               CMP       #'n'                     ;
00:169F D007            	  3316:                               BNE       main_kwpqvydk            ;
00:16A1 204803          	  3317:                               JSR       _OUTPUTCRLF              ;
00:16A4 C8              	  3318:                               INY                                ;
00:16A5 4C8E16          	  3319:                               JMP       main_igbfuquo            ;
00:16A8 209A03          	  3320: main_kwpqvydk                 JSR       _OUTPUTCHAR              ;
00:16AB C8              	  3321:                               INY                                ;
00:16AC 4C8E16          	  3322:                               JMP       main_igbfuquo            ;
                        	  3323: main_xtbcajvd                                                    ;end of writeloop
00:16AF A005            	  3324:                               LDY       #main_search_1           ;internal write called with int or pointer
00:16B1 B140            	  3325:                               LDA       (_userstack_0),Y         ;
00:16B3 203004          	  3326:                               JSR       _OUTHEX                  ;call write a hex byte
00:16B6 88              	  3327:                               DEY                                ;
00:16B7 B140            	  3328:                               LDA       (_userstack_0),Y         ;
00:16B9 203004          	  3329:                               JSR       _OUTHEX                  ;call write a hex byte
00:16BC 204803          	  3330:                               JSR       _OUTPUTCRLF              ;write a crlf if functionname is println
00:16BF EA              	  3331: main_while_pxji               NOP                                ;do_whileexpression
                        	  3332:                                                                  ;BEGINDOEVALUATE: Expression:  (  dosearch  ) , Stackd
00:16C0 A540            	  3333:                               LDA       _userstack_0             ;Copy userstack to unireg7
00:16C2 8538            	  3334:                               STA       _unireg7_0               ;
00:16C4 A541            	  3335:                               LDA       _userstack_1             ;
00:16C6 8539            	  3336:                               STA       _unireg7_1               ;
00:16C8 A951            	  3337:                               LDA       #main_sflast             ;
00:16CA 20D702          	  3338:                               JSR       addaccuto_unireg7        ;
00:16CD A912            	  3339:                               LDA       #18                      ;PUSHVARTOSTACK with Name:main_dosearch
00:16CF 20F102          	  3340:                               JSR       subaccufrom_unireg7      ;sub from ureg7
00:16D2 18              	  3341:                               CLC                                ;
00:16D3 A540            	  3342:                               LDA       _userstack_0             ;
00:16D5 6906            	  3343:                               ADC       #main_dosearch           ;
00:16D7 8530            	  3344:                               STA       _unireg6_0               ;
00:16D9 A541            	  3345:                               LDA       _userstack_1             ;
00:16DB 6900            	  3346:                               ADC       #0                       ;
00:16DD 8531            	  3347:                               STA       _unireg6_1               ;
                        	  3348:                                                                  ;Calling PUSHVARONSTACK as virtual Subroutine
00:16DF 204D1A          	  3349:                               JSR       pushvaronstack_1         ;
00:16E2 A000            	  3350:                               LDY       #0                       ;POPVARFROMSTACK GLOBAL to Name:global_unireg0, size:8
00:16E4 B138            	  3351:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:16E6 8500            	  3352:                               STA       _unireg0_0               ;
00:16E8 C8              	  3353:                               INY                                ;
00:16E9 B138            	  3354:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:16EB 8501            	  3355:                               STA       _unireg0_1               ;
00:16ED C8              	  3356:                               INY                                ;
00:16EE B138            	  3357:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:16F0 8502            	  3358:                               STA       _unireg0_2               ;
00:16F2 C8              	  3359:                               INY                                ;
00:16F3 B138            	  3360:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:16F5 8503            	  3361:                               STA       _unireg0_3               ;
00:16F7 C8              	  3362:                               INY                                ;
00:16F8 B138            	  3363:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:16FA 8504            	  3364:                               STA       _uniregA_0               ;
00:16FC C8              	  3365:                               INY                                ;
00:16FD B138            	  3366:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:16FF 8505            	  3367:                               STA       _uniregA_1               ;
00:1701 C8              	  3368:                               INY                                ;
00:1702 B138            	  3369:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:1704 8506            	  3370:                               STA       _uniregA_2               ;
00:1706 C8              	  3371:                               INY                                ;
00:1707 B138            	  3372:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:1709 8507            	  3373:                               STA       _uniregA_3               ;
00:170B EA              	  3374:                               NOP                                ;start do_afterwhile()  
00:170C A500            	  3375:                               LDA       _unireg0_0               ;load result from while from unireg0
00:170E D003            	  3376:                               BNE       main_whi_02_main_rtpi    ;
00:1710 4CF319          	  3377:                               JMP       main_whi_02_main_htci    ;
00:1713 EA              	  3378: main_whi_02_main_rtpi         NOP                                ;do_afterwhileblocklabel
00:1714 38              	  3379:                               SEC                                ;CREATEFUNCTIONCALL for: getintataddress
00:1715 A540            	  3380:                               LDA       _userstack_0             ;SET FRAMEPOINTER to end of called function
00:1717 E93E            	  3381:                               SBC       #getintataddress_sflast  ;for having access to parameters
00:1719 8544            	  3382:                               STA       _framepointer_0          ;store in framepointer lo byte
00:171B A541            	  3383:                               LDA       _userstack_1             ;load userstack hi-byte
00:171D E900            	  3384:                               SBC       #0                       ;subtract with carry
00:171F 8545            	  3385:                               STA       _framepointer_1          ;save to framepointer hi byte
00:1721 EA              	  3386:                               NOP                                ;source:main_search    dest:getintataddress_q (28)
                        	  3387:                                                                  ;---COPYVAR (0) (sourcename:main_search, destname=geti
00:1722 A004            	  3388:                               LDY       #main_search             ;load index, copy from main_search to getintataddress_
00:1724 B140            	  3389:                               LDA       (_userstack_0),Y         ;load from local var
00:1726 A000            	  3390:                               LDY       #getintataddress_q_0     ;load index for destination
00:1728 9144            	  3391:                               STA       (_framepointer_0),Y      ;save to local var
00:172A A005            	  3392:                               LDY       #main_search_1           ;load index, copy from main_search to getintataddress_
00:172C B140            	  3393:                               LDA       (_userstack_0),Y         ;load from local var
00:172E A001            	  3394:                               LDY       #getintataddress_q_1     ;load index for destination
00:1730 9144            	  3395:                               STA       (_framepointer_0),Y      ;save to local var
                        	  3396:                                                                  ;END-COPYVAR (0) (sourcename:main_search, destname=get
00:1732 20A814          	  3397:                               JSR       getintataddress          ;call function (28)
00:1735 A540            	  3398:                               LDA       _userstack_0             ;Load User-Stack lo byte
00:1737 8544            	  3399:                               STA       _framepointer_0          ;Save Userstack lo in framepointer
00:1739 A541            	  3400:                               LDA       _userstack_1             ;Load User-Stack lo byte
00:173B 8545            	  3401:                               STA       _framepointer_1          ;Save Userstack lo in framepointer
                        	  3402:                                                                  ;---COPYVAR (28) (sourcename:_unireg0, destname=main_p
00:173D EA              	  3403:                               NOP                                ;COPYVAR GLOBAL LOKAL src:_unireg0, dest:main_pattern,
00:173E A500            	  3404:                               LDA       _unireg0                 ;copy int value
00:1740 A007            	  3405:                               LDY       #main_pattern            ;load offset for destination
00:1742 9140            	  3406:                               STA       (_userstack_0),Y         ;store data to ptr
00:1744 A501            	  3407:                               LDA       _unireg0_1               ;
00:1746 C8              	  3408:                               INY                                ;switch to next byte
00:1747 9140            	  3409:                               STA       (_userstack_0),Y         ;store date
                        	  3410:                                                                  ;END-COPYVAR (28) (sourcename:_unireg0, destname=main_
                        	  3411:                                                                  ;BEGINDOEVALUATE: Expression:  (  pattern  ==  1457  )
00:1749 A540            	  3412:                               LDA       _userstack_0             ;Copy userstack to unireg7
00:174B 8538            	  3413:                               STA       _unireg7_0               ;
00:174D A541            	  3414:                               LDA       _userstack_1             ;
00:174F 8539            	  3415:                               STA       _unireg7_1               ;
00:1751 A951            	  3416:                               LDA       #main_sflast             ;
00:1753 20D702          	  3417:                               JSR       addaccuto_unireg7        ;
00:1756 A912            	  3418:                               LDA       #18                      ;PUSHVARTOSTACK with Name:main_pattern
00:1758 20F102          	  3419:                               JSR       subaccufrom_unireg7      ;sub from ureg7
00:175B 18              	  3420:                               CLC                                ;
00:175C A540            	  3421:                               LDA       _userstack_0             ;
00:175E 6907            	  3422:                               ADC       #main_pattern            ;
00:1760 8530            	  3423:                               STA       _unireg6_0               ;
00:1762 A541            	  3424:                               LDA       _userstack_1             ;
00:1764 6900            	  3425:                               ADC       #0                       ;
00:1766 8531            	  3426:                               STA       _unireg6_1               ;
                        	  3427:                                                                  ;Calling PUSHVARONSTACK as virtual Subroutine
00:1768 20121A          	  3428:                               JSR       pushvaronstack_2         ;
00:176B A912            	  3429:                               LDA       #18                      ;PUSHVALUETOSTACK add stack for one var
00:176D 20F102          	  3430:                               JSR       subaccufrom_unireg7      ;sub from ureg7
00:1770 A000            	  3431:                               LDY       #0                       ;Value:1457
00:1772 A9B1            	  3432:                               LDA       #$b1                     ;Load from Value:05b1
00:1774 9138            	  3433:                               STA       (_unireg7_0),Y           ;store byte to stack
00:1776 C8              	  3434:                               INY                                ;adjust to next byte
00:1777 A905            	  3435:                               LDA       #$05                     ;Load from Value:05b1
00:1779 9138            	  3436:                               STA       (_unireg7_0),Y           ;store byte to stack
                        	  3437:                                                                  ;Calling EQUALONSTACK as virtual Subroutine
00:177B 20711A          	  3438:                               JSR       equalonstack_2           ;
00:177E A000            	  3439:                               LDY       #0                       ;POPVARFROMSTACK GLOBAL to Name:global_unireg0, size:8
00:1780 B138            	  3440:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:1782 8500            	  3441:                               STA       _unireg0_0               ;
00:1784 C8              	  3442:                               INY                                ;
00:1785 B138            	  3443:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:1787 8501            	  3444:                               STA       _unireg0_1               ;
00:1789 C8              	  3445:                               INY                                ;
00:178A B138            	  3446:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:178C 8502            	  3447:                               STA       _unireg0_2               ;
00:178E C8              	  3448:                               INY                                ;
00:178F B138            	  3449:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:1791 8503            	  3450:                               STA       _unireg0_3               ;
00:1793 C8              	  3451:                               INY                                ;
00:1794 B138            	  3452:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:1796 8504            	  3453:                               STA       _uniregA_0               ;
00:1798 C8              	  3454:                               INY                                ;
00:1799 B138            	  3455:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:179B 8505            	  3456:                               STA       _uniregA_1               ;
00:179D C8              	  3457:                               INY                                ;
00:179E B138            	  3458:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:17A0 8506            	  3459:                               STA       _uniregA_2               ;
00:17A2 C8              	  3460:                               INY                                ;
00:17A3 B138            	  3461:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:17A5 8507            	  3462:                               STA       _uniregA_3               ;
00:17A7 A500            	  3463:                               LDA       _unireg0_0               ;do_afterif() load result from if from unireg0
00:17A9 D003            	  3464:                               BNE       main_if_03wlzz           ;
00:17AB 4C0F19          	  3465:                               JMP       main_if_03wlzz_psvo      ;
                        	  3466: main_if_03wlzz                                                   ;do_afterif
                        	  3467:                                                                  ;BEGINDOEVALUATE: Expression:  search  +  2 , Stackdep
00:17AE A540            	  3468:                               LDA       _userstack_0             ;Copy userstack to unireg7
00:17B0 8538            	  3469:                               STA       _unireg7_0               ;
00:17B2 A541            	  3470:                               LDA       _userstack_1             ;
00:17B4 8539            	  3471:                               STA       _unireg7_1               ;
00:17B6 A951            	  3472:                               LDA       #main_sflast             ;
00:17B8 20D702          	  3473:                               JSR       addaccuto_unireg7        ;
00:17BB A912            	  3474:                               LDA       #18                      ;PUSHVARTOSTACK with Name:main_search
00:17BD 20F102          	  3475:                               JSR       subaccufrom_unireg7      ;sub from ureg7
00:17C0 18              	  3476:                               CLC                                ;
00:17C1 A540            	  3477:                               LDA       _userstack_0             ;
00:17C3 6904            	  3478:                               ADC       #main_search             ;
00:17C5 8530            	  3479:                               STA       _unireg6_0               ;
00:17C7 A541            	  3480:                               LDA       _userstack_1             ;
00:17C9 6900            	  3481:                               ADC       #0                       ;
00:17CB 8531            	  3482:                               STA       _unireg6_1               ;
                        	  3483:                                                                  ;Calling PUSHVARONSTACK as virtual Subroutine
00:17CD 20121A          	  3484:                               JSR       pushvaronstack_2         ;
00:17D0 A912            	  3485:                               LDA       #18                      ;PUSHVALUETOSTACK add stack for one var
00:17D2 20F102          	  3486:                               JSR       subaccufrom_unireg7      ;sub from ureg7
00:17D5 A000            	  3487:                               LDY       #0                       ;Value:2
00:17D7 A902            	  3488:                               LDA       #$02                     ;Load from Value:0002
00:17D9 9138            	  3489:                               STA       (_unireg7_0),Y           ;store byte to stack
00:17DB C8              	  3490:                               INY                                ;adjust to next byte
00:17DC A900            	  3491:                               LDA       #$00                     ;Load from Value:0002
00:17DE 9138            	  3492:                               STA       (_unireg7_0),Y           ;store byte to stack
                        	  3493:                                                                  ;Calling ADDONSTACK as virtual Subroutine
00:17E0 202A1A          	  3494:                               JSR       addonstack_2             ;
00:17E3 18              	  3495:                               CLC                                ;POPVARFROMSTACK LOCAL to Name:main_search
00:17E4 A540            	  3496:                               LDA       _userstack_0             ;destination size for token:search is:2 bytes
00:17E6 6904            	  3497:                               ADC       #main_search             ;
00:17E8 8530            	  3498:                               STA       _unireg6_0               ;
00:17EA A541            	  3499:                               LDA       _userstack_1             ;
00:17EC 6900            	  3500:                               ADC       #0                       ;
00:17EE 8531            	  3501:                               STA       _unireg6_1               ;
                        	  3502:                                                                  ;Calling POPVARFROMSTACK as virtual Subroutine
00:17F0 201E1A          	  3503:                               JSR       popvarfromstack_2        ;
00:17F3 38              	  3504:                               SEC                                ;CREATEFUNCTIONCALL for: getintataddress
00:17F4 A540            	  3505:                               LDA       _userstack_0             ;SET FRAMEPOINTER to end of called function
00:17F6 E93E            	  3506:                               SBC       #getintataddress_sflast  ;for having access to parameters
00:17F8 8544            	  3507:                               STA       _framepointer_0          ;store in framepointer lo byte
00:17FA A541            	  3508:                               LDA       _userstack_1             ;load userstack hi-byte
00:17FC E900            	  3509:                               SBC       #0                       ;subtract with carry
00:17FE 8545            	  3510:                               STA       _framepointer_1          ;save to framepointer hi byte
00:1800 EA              	  3511:                               NOP                                ;source:main_search    dest:getintataddress_q (31)
                        	  3512:                                                                  ;---COPYVAR (0) (sourcename:main_search, destname=geti
00:1801 A004            	  3513:                               LDY       #main_search             ;load index, copy from main_search to getintataddress_
00:1803 B140            	  3514:                               LDA       (_userstack_0),Y         ;load from local var
00:1805 A000            	  3515:                               LDY       #getintataddress_q_0     ;load index for destination
00:1807 9144            	  3516:                               STA       (_framepointer_0),Y      ;save to local var
00:1809 A005            	  3517:                               LDY       #main_search_1           ;load index, copy from main_search to getintataddress_
00:180B B140            	  3518:                               LDA       (_userstack_0),Y         ;load from local var
00:180D A001            	  3519:                               LDY       #getintataddress_q_1     ;load index for destination
00:180F 9144            	  3520:                               STA       (_framepointer_0),Y      ;save to local var
                        	  3521:                                                                  ;END-COPYVAR (0) (sourcename:main_search, destname=get
00:1811 20A814          	  3522:                               JSR       getintataddress          ;call function (31)
00:1814 A540            	  3523:                               LDA       _userstack_0             ;Load User-Stack lo byte
00:1816 8544            	  3524:                               STA       _framepointer_0          ;Save Userstack lo in framepointer
00:1818 A541            	  3525:                               LDA       _userstack_1             ;Load User-Stack lo byte
00:181A 8545            	  3526:                               STA       _framepointer_1          ;Save Userstack lo in framepointer
                        	  3527:                                                                  ;---COPYVAR (31) (sourcename:_unireg0, destname=main_p
00:181C EA              	  3528:                               NOP                                ;COPYVAR GLOBAL LOKAL src:_unireg0, dest:main_pattern,
00:181D A500            	  3529:                               LDA       _unireg0                 ;copy int value
00:181F A007            	  3530:                               LDY       #main_pattern            ;load offset for destination
00:1821 9140            	  3531:                               STA       (_userstack_0),Y         ;store data to ptr
00:1823 A501            	  3532:                               LDA       _unireg0_1               ;
00:1825 C8              	  3533:                               INY                                ;switch to next byte
00:1826 9140            	  3534:                               STA       (_userstack_0),Y         ;store date
                        	  3535:                                                                  ;END-COPYVAR (31) (sourcename:_unireg0, destname=main_
                        	  3536:                                                                  ;BEGINDOEVALUATE: Expression:  (  pattern  ==  3568  )
00:1828 A540            	  3537:                               LDA       _userstack_0             ;Copy userstack to unireg7
00:182A 8538            	  3538:                               STA       _unireg7_0               ;
00:182C A541            	  3539:                               LDA       _userstack_1             ;
00:182E 8539            	  3540:                               STA       _unireg7_1               ;
00:1830 A951            	  3541:                               LDA       #main_sflast             ;
00:1832 20D702          	  3542:                               JSR       addaccuto_unireg7        ;
00:1835 A912            	  3543:                               LDA       #18                      ;PUSHVARTOSTACK with Name:main_pattern
00:1837 20F102          	  3544:                               JSR       subaccufrom_unireg7      ;sub from ureg7
00:183A 18              	  3545:                               CLC                                ;
00:183B A540            	  3546:                               LDA       _userstack_0             ;
00:183D 6907            	  3547:                               ADC       #main_pattern            ;
00:183F 8530            	  3548:                               STA       _unireg6_0               ;
00:1841 A541            	  3549:                               LDA       _userstack_1             ;
00:1843 6900            	  3550:                               ADC       #0                       ;
00:1845 8531            	  3551:                               STA       _unireg6_1               ;
                        	  3552:                                                                  ;Calling PUSHVARONSTACK as virtual Subroutine
00:1847 20121A          	  3553:                               JSR       pushvaronstack_2         ;
00:184A A912            	  3554:                               LDA       #18                      ;PUSHVALUETOSTACK add stack for one var
00:184C 20F102          	  3555:                               JSR       subaccufrom_unireg7      ;sub from ureg7
00:184F A000            	  3556:                               LDY       #0                       ;Value:3568
00:1851 A9F0            	  3557:                               LDA       #$f0                     ;Load from Value:0df0
00:1853 9138            	  3558:                               STA       (_unireg7_0),Y           ;store byte to stack
00:1855 C8              	  3559:                               INY                                ;adjust to next byte
00:1856 A90D            	  3560:                               LDA       #$0d                     ;Load from Value:0df0
00:1858 9138            	  3561:                               STA       (_unireg7_0),Y           ;store byte to stack
                        	  3562:                                                                  ;Calling EQUALONSTACK as virtual Subroutine
00:185A 20711A          	  3563:                               JSR       equalonstack_2           ;
00:185D A000            	  3564:                               LDY       #0                       ;POPVARFROMSTACK GLOBAL to Name:global_unireg0, size:8
00:185F B138            	  3565:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:1861 8500            	  3566:                               STA       _unireg0_0               ;
00:1863 C8              	  3567:                               INY                                ;
00:1864 B138            	  3568:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:1866 8501            	  3569:                               STA       _unireg0_1               ;
00:1868 C8              	  3570:                               INY                                ;
00:1869 B138            	  3571:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:186B 8502            	  3572:                               STA       _unireg0_2               ;
00:186D C8              	  3573:                               INY                                ;
00:186E B138            	  3574:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:1870 8503            	  3575:                               STA       _unireg0_3               ;
00:1872 C8              	  3576:                               INY                                ;
00:1873 B138            	  3577:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:1875 8504            	  3578:                               STA       _uniregA_0               ;
00:1877 C8              	  3579:                               INY                                ;
00:1878 B138            	  3580:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:187A 8505            	  3581:                               STA       _uniregA_1               ;
00:187C C8              	  3582:                               INY                                ;
00:187D B138            	  3583:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:187F 8506            	  3584:                               STA       _uniregA_2               ;
00:1881 C8              	  3585:                               INY                                ;
00:1882 B138            	  3586:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:1884 8507            	  3587:                               STA       _uniregA_3               ;
00:1886 A500            	  3588:                               LDA       _unireg0_0               ;do_afterif() load result from if from unireg0
00:1888 D003            	  3589:                               BNE       main_if_04atlk           ;
00:188A 4C0B19          	  3590:                               JMP       main_if_04atlk_acpu      ;
                        	  3591: main_if_04atlk                                                   ;do_afterif
                        	  3592:                                                                  ;BEGINDOEVALUATE: Expression:  search  +  2 , Stackdep
00:188D A540            	  3593:                               LDA       _userstack_0             ;Copy userstack to unireg7
00:188F 8538            	  3594:                               STA       _unireg7_0               ;
00:1891 A541            	  3595:                               LDA       _userstack_1             ;
00:1893 8539            	  3596:                               STA       _unireg7_1               ;
00:1895 A951            	  3597:                               LDA       #main_sflast             ;
00:1897 20D702          	  3598:                               JSR       addaccuto_unireg7        ;
00:189A A912            	  3599:                               LDA       #18                      ;PUSHVARTOSTACK with Name:main_search
00:189C 20F102          	  3600:                               JSR       subaccufrom_unireg7      ;sub from ureg7
00:189F 18              	  3601:                               CLC                                ;
00:18A0 A540            	  3602:                               LDA       _userstack_0             ;
00:18A2 6904            	  3603:                               ADC       #main_search             ;
00:18A4 8530            	  3604:                               STA       _unireg6_0               ;
00:18A6 A541            	  3605:                               LDA       _userstack_1             ;
00:18A8 6900            	  3606:                               ADC       #0                       ;
00:18AA 8531            	  3607:                               STA       _unireg6_1               ;
                        	  3608:                                                                  ;Calling PUSHVARONSTACK as virtual Subroutine
00:18AC 20121A          	  3609:                               JSR       pushvaronstack_2         ;
00:18AF A912            	  3610:                               LDA       #18                      ;PUSHVALUETOSTACK add stack for one var
00:18B1 20F102          	  3611:                               JSR       subaccufrom_unireg7      ;sub from ureg7
00:18B4 A000            	  3612:                               LDY       #0                       ;Value:2
00:18B6 A902            	  3613:                               LDA       #$02                     ;Load from Value:0002
00:18B8 9138            	  3614:                               STA       (_unireg7_0),Y           ;store byte to stack
00:18BA C8              	  3615:                               INY                                ;adjust to next byte
00:18BB A900            	  3616:                               LDA       #$00                     ;Load from Value:0002
00:18BD 9138            	  3617:                               STA       (_unireg7_0),Y           ;store byte to stack
                        	  3618:                                                                  ;Calling ADDONSTACK as virtual Subroutine
00:18BF 202A1A          	  3619:                               JSR       addonstack_2             ;
00:18C2 18              	  3620:                               CLC                                ;POPVARFROMSTACK LOCAL to Name:main_search
00:18C3 A540            	  3621:                               LDA       _userstack_0             ;destination size for token:search is:2 bytes
00:18C5 6904            	  3622:                               ADC       #main_search             ;
00:18C7 8530            	  3623:                               STA       _unireg6_0               ;
00:18C9 A541            	  3624:                               LDA       _userstack_1             ;
00:18CB 6900            	  3625:                               ADC       #0                       ;
00:18CD 8531            	  3626:                               STA       _unireg6_1               ;
                        	  3627:                                                                  ;Calling POPVARFROMSTACK as virtual Subroutine
00:18CF 201E1A          	  3628:                               JSR       popvarfromstack_2        ;
                        	  3629:                                                                  ;start assignvaluetovariable(stoken=dosearch, t_type=n
00:18D2 A006            	  3630:                               LDY       #main_dosearch           ;load index
00:18D4 A900            	  3631:                               LDA       #0                       ;load constant to accu
00:18D6 9140            	  3632:                               STA       (_userstack),Y           ;store data in local var
00:18D8 A000            	  3633:                               LDY       #0                       ;internal write called with stringconstant
00:18DA B9A91A          	  3634: main_agdyczst                 LDA       main_serzzgzb,Y          ;
00:18DD F01C            	  3635:                               BEQ       main_spaivnhi            ;
00:18DF C95C            	  3636:                               CMP       #$5C                     ;check for backslash
00:18E1 D011            	  3637:                               BNE       main_wsziwigs            ;
00:18E3 C8              	  3638:                               INY                                ;
00:18E4 B9A91A          	  3639:                               LDA       main_serzzgzb,Y          ;
00:18E7 F012            	  3640:                               BEQ       main_spaivnhi            ;
00:18E9 C96E            	  3641:                               CMP       #'n'                     ;
00:18EB D007            	  3642:                               BNE       main_wsziwigs            ;
00:18ED 204803          	  3643:                               JSR       _OUTPUTCRLF              ;
00:18F0 C8              	  3644:                               INY                                ;
00:18F1 4CDA18          	  3645:                               JMP       main_agdyczst            ;
00:18F4 209A03          	  3646: main_wsziwigs                 JSR       _OUTPUTCHAR              ;
00:18F7 C8              	  3647:                               INY                                ;
00:18F8 4CDA18          	  3648:                               JMP       main_agdyczst            ;
                        	  3649: main_spaivnhi                                                    ;end of writeloop
00:18FB A005            	  3650:                               LDY       #main_search_1           ;internal write called with int or pointer
00:18FD B140            	  3651:                               LDA       (_userstack_0),Y         ;
00:18FF 203004          	  3652:                               JSR       _OUTHEX                  ;call write a hex byte
00:1902 88              	  3653:                               DEY                                ;
00:1903 B140            	  3654:                               LDA       (_userstack_0),Y         ;
00:1905 203004          	  3655:                               JSR       _OUTHEX                  ;call write a hex byte
00:1908 204803          	  3656:                               JSR       _OUTPUTCRLF              ;write a crlf if functionname is println
00:190B EA              	  3657: main_if_04atlk_acpu           NOP                                ;end_afterif(), only called when there is no else-bran
00:190C 4C3319          	  3658:                               JMP       main_if_03wlzz_jknz      ;do_afterelse(), jump over the else branch
00:190F EA              	  3659: main_if_03wlzz_psvo           NOP                                ;do_afterelse(), start of else block
00:1910 A000            	  3660:                               LDY       #0                       ;internal write called with stringconstant
00:1912 B9BB1A          	  3661: main_olrzkgyj                 LDA       main_wdylvogf,Y          ;
00:1915 F01C            	  3662:                               BEQ       main_qlzpwgtk            ;
00:1917 C95C            	  3663:                               CMP       #$5C                     ;check for backslash
00:1919 D011            	  3664:                               BNE       main_eytupknp            ;
00:191B C8              	  3665:                               INY                                ;
00:191C B9BB1A          	  3666:                               LDA       main_wdylvogf,Y          ;
00:191F F012            	  3667:                               BEQ       main_qlzpwgtk            ;
00:1921 C96E            	  3668:                               CMP       #'n'                     ;
00:1923 D007            	  3669:                               BNE       main_eytupknp            ;
00:1925 204803          	  3670:                               JSR       _OUTPUTCRLF              ;
00:1928 C8              	  3671:                               INY                                ;
00:1929 4C1219          	  3672:                               JMP       main_olrzkgyj            ;
00:192C 209A03          	  3673: main_eytupknp                 JSR       _OUTPUTCHAR              ;
00:192F C8              	  3674:                               INY                                ;
00:1930 4C1219          	  3675:                               JMP       main_olrzkgyj            ;
                        	  3676: main_qlzpwgtk                                                    ;end of writeloop
00:1933 EA              	  3677: main_if_03wlzz_jknz           NOP                                ;end_afterelse(), this is the end of the else-branch
                        	  3678:                                                                  ;BEGINDOEVALUATE: Expression:  (  search  >  12288  ) 
00:1934 A540            	  3679:                               LDA       _userstack_0             ;Copy userstack to unireg7
00:1936 8538            	  3680:                               STA       _unireg7_0               ;
00:1938 A541            	  3681:                               LDA       _userstack_1             ;
00:193A 8539            	  3682:                               STA       _unireg7_1               ;
00:193C A951            	  3683:                               LDA       #main_sflast             ;
00:193E 20D702          	  3684:                               JSR       addaccuto_unireg7        ;
00:1941 A912            	  3685:                               LDA       #18                      ;PUSHVARTOSTACK with Name:main_search
00:1943 20F102          	  3686:                               JSR       subaccufrom_unireg7      ;sub from ureg7
00:1946 18              	  3687:                               CLC                                ;
00:1947 A540            	  3688:                               LDA       _userstack_0             ;
00:1949 6904            	  3689:                               ADC       #main_search             ;
00:194B 8530            	  3690:                               STA       _unireg6_0               ;
00:194D A541            	  3691:                               LDA       _userstack_1             ;
00:194F 6900            	  3692:                               ADC       #0                       ;
00:1951 8531            	  3693:                               STA       _unireg6_1               ;
                        	  3694:                                                                  ;Calling PUSHVARONSTACK as virtual Subroutine
00:1953 20121A          	  3695:                               JSR       pushvaronstack_2         ;
00:1956 A912            	  3696:                               LDA       #18                      ;PUSHVALUETOSTACK add stack for one var
00:1958 20F102          	  3697:                               JSR       subaccufrom_unireg7      ;sub from ureg7
00:195B A000            	  3698:                               LDY       #0                       ;Value:12288
00:195D A900            	  3699:                               LDA       #$00                     ;Load from Value:3000
00:195F 9138            	  3700:                               STA       (_unireg7_0),Y           ;store byte to stack
00:1961 C8              	  3701:                               INY                                ;adjust to next byte
00:1962 A930            	  3702:                               LDA       #$30                     ;Load from Value:3000
00:1964 9138            	  3703:                               STA       (_unireg7_0),Y           ;store byte to stack
                        	  3704:                                                                  ;Calling GREATERONSTACK as virtual Subroutine
00:1966 20BD1A          	  3705:                               JSR       greateronstack_2         ;
00:1969 A000            	  3706:                               LDY       #0                       ;POPVARFROMSTACK GLOBAL to Name:global_unireg0, size:8
00:196B B138            	  3707:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:196D 8500            	  3708:                               STA       _unireg0_0               ;
00:196F C8              	  3709:                               INY                                ;
00:1970 B138            	  3710:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:1972 8501            	  3711:                               STA       _unireg0_1               ;
00:1974 C8              	  3712:                               INY                                ;
00:1975 B138            	  3713:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:1977 8502            	  3714:                               STA       _unireg0_2               ;
00:1979 C8              	  3715:                               INY                                ;
00:197A B138            	  3716:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:197C 8503            	  3717:                               STA       _unireg0_3               ;
00:197E C8              	  3718:                               INY                                ;
00:197F B138            	  3719:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:1981 8504            	  3720:                               STA       _uniregA_0               ;
00:1983 C8              	  3721:                               INY                                ;
00:1984 B138            	  3722:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:1986 8505            	  3723:                               STA       _uniregA_1               ;
00:1988 C8              	  3724:                               INY                                ;
00:1989 B138            	  3725:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:198B 8506            	  3726:                               STA       _uniregA_2               ;
00:198D C8              	  3727:                               INY                                ;
00:198E B138            	  3728:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:1990 8507            	  3729:                               STA       _uniregA_3               ;
00:1992 A500            	  3730:                               LDA       _unireg0_0               ;do_afterif() load result from if from unireg0
00:1994 D003            	  3731:                               BNE       main_if_03lnne           ;
00:1996 4CAA19          	  3732:                               JMP       main_if_03lnne_diog      ;
                        	  3733: main_if_03lnne                                                   ;do_afterif
                        	  3734:                                                                  ;start assignvaluetovariable(stoken=dosearch, t_type=n
00:1999 A006            	  3735:                               LDY       #main_dosearch           ;load index
00:199B A900            	  3736:                               LDA       #0                       ;load constant to accu
00:199D 9140            	  3737:                               STA       (_userstack),Y           ;store data in local var
                        	  3738:                                                                  ;start assignvaluetovariable(stoken=search, t_type=num
00:199F A900            	  3739:                               LDA       #$00                     ;load word(0,$0000) lobyte (00) in accu
00:19A1 A004            	  3740:                               LDY       #main_search             ;load index for name:main
00:19A3 9140            	  3741:                               STA       (_userstack),Y           ;store relative to framepointer
00:19A5 A900            	  3742:                               LDA       #$00                     ;load hibyte (00) in accu
00:19A7 C8              	  3743:                               INY                                ;add pointer to hi-byte
00:19A8 9140            	  3744:                               STA       (_userstack),Y           ;store hibyte
00:19AA EA              	  3745: main_if_03lnne_diog           NOP                                ;end_afterif(), only called when there is no else-bran
                        	  3746:                                                                  ;BEGINDOEVALUATE: Expression:  search  +  1 , Stackdep
00:19AB A540            	  3747:                               LDA       _userstack_0             ;Copy userstack to unireg7
00:19AD 8538            	  3748:                               STA       _unireg7_0               ;
00:19AF A541            	  3749:                               LDA       _userstack_1             ;
00:19B1 8539            	  3750:                               STA       _unireg7_1               ;
00:19B3 A951            	  3751:                               LDA       #main_sflast             ;
00:19B5 20D702          	  3752:                               JSR       addaccuto_unireg7        ;
00:19B8 A912            	  3753:                               LDA       #18                      ;PUSHVARTOSTACK with Name:main_search
00:19BA 20F102          	  3754:                               JSR       subaccufrom_unireg7      ;sub from ureg7
00:19BD 18              	  3755:                               CLC                                ;
00:19BE A540            	  3756:                               LDA       _userstack_0             ;
00:19C0 6904            	  3757:                               ADC       #main_search             ;
00:19C2 8530            	  3758:                               STA       _unireg6_0               ;
00:19C4 A541            	  3759:                               LDA       _userstack_1             ;
00:19C6 6900            	  3760:                               ADC       #0                       ;
00:19C8 8531            	  3761:                               STA       _unireg6_1               ;
                        	  3762:                                                                  ;Calling PUSHVARONSTACK as virtual Subroutine
00:19CA 20121A          	  3763:                               JSR       pushvaronstack_2         ;
00:19CD A912            	  3764:                               LDA       #18                      ;PUSHVALUETOSTACK add stack for one var
00:19CF 20F102          	  3765:                               JSR       subaccufrom_unireg7      ;sub from ureg7
00:19D2 A000            	  3766:                               LDY       #0                       ;Value:1
00:19D4 A901            	  3767:                               LDA       #$01                     ;Load from Value:0001
00:19D6 9138            	  3768:                               STA       (_unireg7_0),Y           ;store byte to stack
00:19D8 C8              	  3769:                               INY                                ;adjust to next byte
00:19D9 A900            	  3770:                               LDA       #$00                     ;Load from Value:0001
00:19DB 9138            	  3771:                               STA       (_unireg7_0),Y           ;store byte to stack
                        	  3772:                                                                  ;Calling ADDONSTACK as virtual Subroutine
00:19DD 202A1A          	  3773:                               JSR       addonstack_2             ;
00:19E0 18              	  3774:                               CLC                                ;POPVARFROMSTACK LOCAL to Name:main_search
00:19E1 A540            	  3775:                               LDA       _userstack_0             ;destination size for token:search is:2 bytes
00:19E3 6904            	  3776:                               ADC       #main_search             ;
00:19E5 8530            	  3777:                               STA       _unireg6_0               ;
00:19E7 A541            	  3778:                               LDA       _userstack_1             ;
00:19E9 6900            	  3779:                               ADC       #0                       ;
00:19EB 8531            	  3780:                               STA       _unireg6_1               ;
                        	  3781:                                                                  ;Calling POPVARFROMSTACK as virtual Subroutine
00:19ED 201E1A          	  3782:                               JSR       popvarfromstack_2        ;
00:19F0 4CBF16          	  3783:                               JMP       main_while_pxji          ;end do_afterwhile()
00:19F3 EA              	  3784: main_whi_02_main_htci         NOP                                ;end_afterwhile
                        	  3785:                                                                  ;start assignvaluetovariable(stoken=_unireg0, t_type=n
00:19F4 A900            	  3786:                               LDA       #$00                     ;Load 00 from Value:0000000000000000, Index:0
00:19F6 8500            	  3787:                               STA       _unireg0_0               ;store byte to global var
00:19F8 8501            	  3788:                               STA       _unireg0_1               ;store byte to global var
00:19FA 8502            	  3789:                               STA       _unireg0_2               ;store byte to global var
00:19FC 8503            	  3790:                               STA       _unireg0_3               ;store byte to global var
00:19FE 8504            	  3791:                               STA       _uniregA_0               ;store byte to global var
00:1A00 8505            	  3792:                               STA       _uniregA_1               ;store byte to global var
00:1A02 8506            	  3793:                               STA       _uniregA_2               ;store byte to global var
00:1A04 8507            	  3794:                               STA       _uniregA_3               ;store byte to global var
00:1A06 4C091A          	  3795:                               JMP       main_exitlabel           ;
                        	  3796: main_exitlabel                                                   ;ENDBLOCK name:endblock = endblock with 
00:1A09 A951            	  3797:                               LDA       #main_sflast             ;correct stackpointer, remove stackframe (47)
00:1A0B 200103          	  3798:                               JSR       setunireg7fromaccu       ;inline assembler from souceline:47
00:1A0E 201803          	  3799:                               JSR       addu7touserstack         ;inline assembler from souceline:47
00:1A11 60              	  3800:                               RTS                                ;inline assembler from souceline:47
                        	  3801: main_Eval_Stk                 =         $0009                    ;define var chararray = Eval_Stk sizeof(72) with type_
                        	  3802: main_Eval_Stk_0               =         $0009                    ;define var chararray = Eval_Stk sizeof(72) with type_
                        	  3803:                                                                  ;CONSTINTSTATEMENT (name:main_sflast, value:81, attrib
                        	  3804: main_sflast                   =         81                       ;const main_sflast = 81 with constvalue
                        	  3805: pushvaronstack_2
00:1A12 A000            	  3806:                               LDY       #0                       ;
00:1A14 B130            	  3807:                               LDA       (_unireg6_0),Y           ;copy from:getintataddress_q
00:1A16 9138            	  3808:                               STA       (_unireg7_0),Y           ;
00:1A18 C8              	  3809:                               INY                                ;adjust to next byte
00:1A19 B130            	  3810:                               LDA       (_unireg6_0),Y           ;copy from:getintataddress_q
00:1A1B 9138            	  3811:                               STA       (_unireg7_0),Y           ;
00:1A1D 60              	  3812:                               RTS                                ;End automated Subroutine pushvaronstack_2
                        	  3813: popvarfromstack_2
00:1A1E A000            	  3814:                               LDY       #0                       ;
00:1A20 B138            	  3815:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:1A22 9130            	  3816:                               STA       (_unireg6_0),Y           ;copy to returntoken
00:1A24 C8              	  3817:                               INY                                ;adjust to next byte
00:1A25 B138            	  3818:                               LDA       (_unireg7),Y             ;copy from:_unireg7
00:1A27 9130            	  3819:                               STA       (_unireg6_0),Y           ;copy to returntoken
00:1A29 60              	  3820:                               RTS                                ;End automated Subroutine popvarfromstack_2
                        	  3821: addonstack_2
                        	  3822:                                                                  ;ADDONSTACK
00:1A2A 18              	  3823:                               CLC                                ;
00:1A2B A538            	  3824:                               LDA       _unireg7_0               ;
00:1A2D 6912            	  3825:                               ADC       #18                      ;
00:1A2F 8530            	  3826:                               STA       _unireg6_0               ;
00:1A31 A539            	  3827:                               LDA       _unireg7_1               ;
00:1A33 6900            	  3828:                               ADC       #0                       ;
00:1A35 8531            	  3829:                               STA       _unireg6_1               ;
00:1A37 A000            	  3830:                               LDY       #0                       ;
00:1A39 18              	  3831:                               CLC                                ;
00:1A3A B138            	  3832:                               LDA       (_unireg7_0),Y           ;
00:1A3C 7130            	  3833:                               ADC       (_unireg6_0),Y           ;
00:1A3E 9130            	  3834:                               STA       (_unireg6_0),Y           ;
00:1A40 C8              	  3835:                               INY                                ;
00:1A41 B138            	  3836:                               LDA       (_unireg7_0),Y           ;
00:1A43 7130            	  3837:                               ADC       (_unireg6_0),Y           ;
00:1A45 9130            	  3838:                               STA       (_unireg6_0),Y           ;
00:1A47 A912            	  3839:                               LDA       #18                      ;add stack for two var
00:1A49 20D702          	  3840:                               JSR       addaccuto_unireg7        ;add from ureg7
00:1A4C 60              	  3841:                               RTS                                ;End automated Subroutine addonstack_2
                        	  3842: pushvaronstack_1
00:1A4D A000            	  3843:                               LDY       #0                       ;
00:1A4F B130            	  3844:                               LDA       (_unireg6_0),Y           ;copy from:main_dosearch
00:1A51 9138            	  3845:                               STA       (_unireg7_0),Y           ;
00:1A53 60              	  3846:                               RTS                                ;End automated Subroutine pushvaronstack_1
                        	  3847: main_mbklbqng
00:1A54 5374617274696E67	  3848:                               ASCIIZ    "Starting with search at adr:";String added name:main_mbklbqng
00:1A5C 2077697468207365
00:1A64 6172636820617420
00:1A6C 6164723A
00:1A70 00
                        	  3849: equalonstack_2
                        	  3850:                                                                  ;EQUALSTACK
00:1A71 18              	  3851:                               CLC                                ;
00:1A72 A538            	  3852:                               LDA       _unireg7_0               ;
00:1A74 6912            	  3853:                               ADC       #18                      ;
00:1A76 8530            	  3854:                               STA       _unireg6_0               ;
00:1A78 A539            	  3855:                               LDA       _unireg7_1               ;
00:1A7A 6900            	  3856:                               ADC       #0                       ;
00:1A7C 8531            	  3857:                               STA       _unireg6_1               ;
00:1A7E A000            	  3858:                               LDY       #0                       ;
00:1A80 B130            	  3859:                               LDA       (_unireg6_0),Y           ;
00:1A82 D138            	  3860:                               CMP       (_unireg7_0),Y           ;
00:1A84 D015            	  3861:                               BNE       main_fyysbmht            ;
00:1A86 C8              	  3862:                               INY                                ;
00:1A87 B130            	  3863:                               LDA       (_unireg6_0),Y           ;
00:1A89 D138            	  3864:                               CMP       (_unireg7_0),Y           ;
00:1A8B D00E            	  3865:                               BNE       main_fyysbmht            ;
00:1A8D A901            	  3866:                               LDA       #1                       ;
00:1A8F A000            	  3867:                               LDY       #0                       ;
00:1A91 9130            	  3868:                               STA       (_unireg6_0),Y           ;
00:1A93 A900            	  3869:                               LDA       #0                       ;
00:1A95 C8              	  3870:                               INY                                ;
00:1A96 9130            	  3871:                               STA       (_unireg6_0),Y           ;
00:1A98 4CA31A          	  3872:                               JMP       main_mfgogtmo            ;
00:1A9B A000            	  3873: main_fyysbmht                 LDY       #0                       ;
00:1A9D 98              	  3874:                               TYA                                ;
00:1A9E 9130            	  3875:                               STA       (_unireg6_0),Y           ;
00:1AA0 C8              	  3876:                               INY                                ;
00:1AA1 9130            	  3877:                               STA       (_unireg6_0),Y           ;
                        	  3878: main_mfgogtmo                                                    ;exit check for equal
00:1AA3 A912            	  3879:                               LDA       #18                      ;add stack for two var
00:1AA5 20D702          	  3880:                               JSR       addaccuto_unireg7        ;add from ureg7
00:1AA8 60              	  3881:                               RTS                                ;End automated Subroutine equalonstack_2
                        	  3882: main_serzzgzb
00:1AA9 466F756E64205061	  3883:                               ASCIIZ    "Found Pattern at:"      ;String added name:main_serzzgzb
00:1AB1 747465726E206174
00:1AB9 3A
00:1ABA 00
                        	  3884: main_wdylvogf
00:1ABB 78              	  3885:                               ASCIIZ    "x"                      ;String added name:main_wdylvogf
00:1ABC 00
                        	  3886: greateronstack_2
                        	  3887:                                                                  ;EQUALGREATER TEST
00:1ABD 18              	  3888:                               CLC                                ;
00:1ABE A538            	  3889:                               LDA       _unireg7_0               ;
00:1AC0 6912            	  3890:                               ADC       #18                      ;
00:1AC2 8530            	  3891:                               STA       _unireg6_0               ;
00:1AC4 A539            	  3892:                               LDA       _unireg7_1               ;
00:1AC6 6900            	  3893:                               ADC       #0                       ;
00:1AC8 8531            	  3894:                               STA       _unireg6_1               ;
00:1ACA A001            	  3895:                               LDY       #1                       ;checking high byte with signed algorithm
00:1ACC 38              	  3896:                               SEC                                ;prepare carry for SBC
00:1ACD B138            	  3897:                               LDA       (_unireg7_0),Y           ;
00:1ACF F130            	  3898:                               SBC       (_unireg6_0),Y           ;A-NUM
00:1AD1 5002            	  3899:                               BVC       main_afmwjrtz            ;if V is 0, N eor V, otherwise N eor V = N eor 1
00:1AD3 4980            	  3900:                               EOR       #$80                     ;A = A eor $80, and N = N eor 1
00:1AD5 3012            	  3901: main_afmwjrtz                 BMI       main_cydoompc            ;if the N flag is 1, then (signed) < NUM(signed) and B
00:1AD7 5002            	  3902:                               BVC       main_pzudqbvi            ;
00:1AD9 4980            	  3903:                               EOR       #$80                     ;
00:1ADB D007            	  3904: main_pzudqbvi                 BNE       main_nhalpzix            ;
00:1ADD 88              	  3905:                               DEY                                ;
00:1ADE B138            	  3906:                               LDA       (_unireg7_0),Y           ;
00:1AE0 F130            	  3907:                               SBC       (_unireg6_0),Y           ;
00:1AE2 9005            	  3908:                               BCC       main_cydoompc            ;
00:1AE4 A900            	  3909: main_nhalpzix                 LDA       #0                       ;
00:1AE6 4CEB1A          	  3910:                               JMP       main_lvnreejf            ;
00:1AE9 A901            	  3911: main_cydoompc                 LDA       #1                       ;
00:1AEB A000            	  3912: main_lvnreejf                 LDY       #0                       ;
00:1AED 9130            	  3913:                               STA       (_unireg6_0),Y           ;
                        	  3914: main_cwtjzsjt                                                    ;exit check for equal
00:1AEF A912            	  3915:                               LDA       #18                      ;add stack for two var
00:1AF1 20D702          	  3916:                               JSR       addaccuto_unireg7        ;add from ureg7
00:1AF4 60              	  3917:                               RTS                                ;End automated Subroutine greateronstack_2
00:1AF5 B105            	  3918:                               WORD      1457                     ;Biosfood, for finding this table: 0xB105F00D
00:1AF7 F00D            	  3919:                               WORD      3568                     ;see: https://en.wikipedia.org/wiki/Hexspeak
                        	  3920: subroutinetable:                                                 ;
00:1AF9 676574696E746174	  3921:                               ASCIIZ    "getintataddress"        ;
00:1B01 61646472657373
00:1B08 00
00:1B09 A814            	  3922:                               WORD      getintataddress          ;
00:1B0B 6D61696E        	  3923:                               ASCIIZ    "main"                   ;
00:1B0F 00
00:1B10 1316            	  3924:                               WORD      main                     ;
00:1B12 F1AC            	  3925:                               WORD      44273                    ;signal end of table
                        	  3926: LASTBYTEINPROG                                                   ;inline assembler from souceline:0
00:1B14 FEED            	  3927:                               word      $EDFE                    ;inline assembler from souceline:0
00:1B16 C0DE            	  3928:                               word      $DEC0                    ;inline assembler from souceline:0
                        	  3929:                               org       $FFFA                    ;inline assembler from souceline:0
                        	  3930: pNMIstart                                                        ;inline assembler from souceline:0
01:FFFA B602            	  3931:                               word      NMIstart                 ;inline assembler from souceline:0
                        	  3932: pProgstart                                                       ;inline assembler from souceline:0
01:FFFC 0402            	  3933:                               word      programstart             ;inline assembler from souceline:0
                        	  3934: pIRQstart                                                        ;inline assembler from souceline:0
01:FFFE 9502            	  3935:                               word      IRQstart                 ;inline assembler from souceline:0
                        	  3936: 


Symbols by name:
A1                               A:0ACE
A2                               A:0BBA
ACIACOMMAND                      E:7812
ACIACONTROL                      E:7813
ACIADATA                         E:7810
ACIASTATUS                       E:7811
B2                               A:0BBE
BS                               E:0088
C                                A:0AD6
C2                               A:0BC2
CALLLETTER                       E:00CA
COLON                            E:00BA
CR                               E:008D
D                                A:0BC6
DOT                              E:00AE
E                                E:007A
ESC                              E:009B
H                                E:005B
INT                              E:008A
IRQhandler                       A:0298
IRQstart                         A:0295
L                                E:005A
L2E                              A:0BB6
LASTBYTEINPROG                   A:1B14
LE2                              A:0ACA
LN10                             A:0AC2
M1                               E:0077
M1_0                             E:0077
M1_1                             E:0078
M1_2                             E:0079
M2                               E:0073
M2T                              A:0A80
M2_0                             E:0073
M2_1                             E:0074
M2_2                             E:0075
MB                               A:0AD2
MHLF                             A:0ADA
MODE                             E:005D
NMIstart                         A:02B6
R22                              A:0AC6
RTSLETTER                        E:00CB
RUNLETTER                        E:00D2
SEXP                             E:0086
SIGN                             E:0071
STH                              E:0059
STL                              E:0058
T                                E:0082
VIAACR                           E:780B
VIAIER                           E:780E
VIAIFR                           E:780D
VIAT1CH                          E:7805
VIAT1CL                          E:7804
VIAT2CH                          E:7809
VIAT2CL                          E:7808
X1                               E:0076
X2                               E:0072
XAMH                             E:0057
XAML                             E:0056
YSAV                             E:005C
Z                                E:007E
_BIN2BCD                         A:0448
_GETADDRESSOFLOCALVAR            A:0438
_INPUTCHAR                       A:0355
_INPUTCHAR_EXIT                  A:035D
_INPUT_AVAIL                     A:035E
_INPUT_CHARS_IN_BUFFER           A:0364
_INPUT_GOSLEEP                   A:0397
_INPUT_WAIT                      A:0365
_INPUT_WAIT_EXIT_NOERR           A:0393
_INPUT_WAIT_FOR_CHARS            A:0367
_MESS_TERMINATED                 A:0273
_MESS_TERMINATED_LOOP            A:025E
_OUTAT_FRAMEPOINTER              A:0670
_OUTAT_UNIREG0                   A:0590
_OUTAT_UNIREG1                   A:05AC
_OUTAT_UNIREG2                   A:05C8
_OUTAT_UNIREG3                   A:05E4
_OUTAT_UNIREG4                   A:0600
_OUTAT_UNIREG5                   A:061C
_OUTAT_UNIREG6                   A:0638
_OUTAT_UNIREG7                   A:0654
_OUTHEX                          A:0430
_OUTPUTCHAR                      A:039A
_OUTPUTCRLF                      A:0348
_OUTPUT_GOSLEEP                  A:03C2
_OUT_ACCU                        A:03C5
_OUT_ACCU_LCD                    A:03E6
_OUT_FRAMEPOINTER                A:04CF
_OUT_M1                          A:068C
_OUT_M2                          A:06A9
_OUT_SCRATCHREGISTER             A:0479
_OUT_UNIREG0                     A:04E8
_OUT_UNIREG0_2                   A:04F2
_OUT_UNIREG1                     A:04FD
_OUT_UNIREG1_2                   A:0507
_OUT_UNIREG2                     A:0512
_OUT_UNIREG2_2                   A:051C
_OUT_UNIREG3                     A:0527
_OUT_UNIREG3_2                   A:0531
_OUT_UNIREG4                     A:053C
_OUT_UNIREG4_2                   A:0546
_OUT_UNIREG5                     A:0551
_OUT_UNIREG5_2                   A:055B
_OUT_UNIREG6                     A:0566
_OUT_UNIREG6_2                   A:0570
_OUT_UNIREG7                     A:057B
_OUT_UNIREG7_2                   A:0585
_OUT_USERSTACK                   A:04DA
_START_MESSAGE                   A:0286
_UNIREG0_DECIMAL                 A:06C6
__INPUT_WAIT_LOOP                A:026D
_clear_userstack_memory_loop     A:0419
_conv2dec_divloop64              A:074E
_conv2dec_divloop64_long         A:06D7
_conv2dec_exit                   A:0751
_conv2decimal64                  A:06CB
_conv_posresult                  A:0715
_conv_subresult                  A:0701
_dowozmanentrypoint              A:0259
_framepointer                    E:0044
_framepointer_0                  E:0044
_framepointer_1                  E:0045
_ignore_calculation64            A:071E
_increment_hi_byte_for_clear_userstack_loop  A:0423
_init_6502_stack_memory          A:0208
_lcd_start_message               A:02A8
_lcd_start_message_loop          A:02AA
_lcd_start_message_rts           A:02B5
_program_terminated              A:026A
_prt_global_mem_loop             A:0769
_prt_global_memarea              A:0767
_prt_global_return               A:0775
_push_char                       A:0752
_push_char_loop                  A:0755
_push_clear_scratchreg           A:06CF
_scratchregister                 E:0046
_scratchregister_0               E:0046
_scratchregister_1               E:0047
_scratchregister_10              E:0050
_scratchregister_11              E:0051
_scratchregister_12              E:0052
_scratchregister_13              E:0053
_scratchregister_14              E:0054
_scratchregister_15              E:0055
_scratchregister_2               E:0048
_scratchregister_3               E:0049
_scratchregister_4               E:004A
_scratchregister_5               E:004B
_scratchregister_6               E:004C
_scratchregister_7               E:004D
_scratchregister_8               E:004E
_scratchregister_9               E:004F
_unireg0                         E:0000
_unireg0_0                       E:0000
_unireg0_1                       E:0001
_unireg0_2                       E:0002
_unireg0_3                       E:0003
_unireg1                         E:0008
_unireg1_0                       E:0008
_unireg1_1                       E:0009
_unireg1_2                       E:000A
_unireg1_3                       E:000B
_unireg2                         E:0010
_unireg2_0                       E:0010
_unireg2_1                       E:0011
_unireg2_2                       E:0012
_unireg2_3                       E:0013
_unireg3                         E:0018
_unireg3_0                       E:0018
_unireg3_1                       E:0019
_unireg3_2                       E:001A
_unireg3_3                       E:001B
_unireg4                         E:0020
_unireg4_0                       E:0020
_unireg4_1                       E:0021
_unireg4_2                       E:0022
_unireg4_3                       E:0023
_unireg5                         E:0028
_unireg5_0                       E:0028
_unireg5_1                       E:0029
_unireg5_2                       E:002A
_unireg5_3                       E:002B
_unireg6                         E:0030
_unireg6_0                       E:0030
_unireg6_1                       E:0031
_unireg6_2                       E:0032
_unireg6_3                       E:0033
_unireg7                         E:0038
_unireg7_0                       E:0038
_unireg7_1                       E:0039
_unireg7_2                       E:003A
_unireg7_3                       E:003B
_uniregA_0                       E:0004
_uniregA_1                       E:0005
_uniregA_2                       E:0006
_uniregA_3                       E:0007
_uniregH_0                       E:003C
_uniregH_1                       E:003D
_uniregH_2                       E:003E
_uniregH_3                       E:003F
_userstack                       E:0040
_userstack_0                     E:0040
_userstack_1                     E:0041
_zpscratch                       E:0056
_zpscratch_0                     E:0056
_zpscratch_1                     E:0057
_zpscratch_2                     E:0058
_zpscratch_3                     E:0059
_zpscratch_4                     E:005A
_zpscratch_5                     E:005B
_zpscratch_6                     E:005C
_zpscratch_7                     E:005D
acia_process_irq_char            A:0864
aciairqhandler                   A:083D
aciairqwaitforchar               A:0849
addaccuto_unireg6                A:02CB
addaccuto_unireg7                A:02D7
addonstack_2                     A:1A2A
addu6tou7                        A:0338
addu7touserstack                 A:0318
bin2bcdclearloop                 A:044C
bin2bcdconvloop                  A:0455
decuserstack_todelete            A:02E3
end_irq_handler_clocktimer       A:07AB
end_irq_handler_clocktimer_pla   A:07D7
end_irq_handler_transmittimer    A:090B
equalonstack_2                   A:1A71
getintataddress                  A:14A8
getintataddress_ad               E:0004
getintataddress_exitlabel        A:160A
getintataddress_p                E:0002
getintataddress_q                E:0000
getintataddress_q_0              E:0000
getintataddress_q_1              E:0001
getintataddress_sflast           E:003E
getintataddress_x                E:0006
global_errno_0                   E:63A2
global_errno_1                   E:63A3
global_inbufacia                 E:629F
global_memarea                   E:609C
global_outbufacia                E:619C
global_tickscounter_0            E:005E
global_tickscounter_1            E:005F
global_tickscounter_2            E:0060
global_tickscounter_3            E:0061
greateronstack_2                 A:1ABD
inbuf_escape_char_checked        A:087C
inbuf_exitaciairqhandler_with_dcd_ready  A:0892
inbuf_exitaciairqhandler_with_dsr_ready  A:0897
inbuf_exitaciairqhandler_with_error  A:089B
inbuf_exitaciairqhandler_with_frameing  A:088E
inbuf_exitaciairqhandler_with_overrun  A:088A
inbuf_exitaciairqhandler_with_parity  A:0886
inbuf_exitaciairqhandlernopla    A:0885
inbuf_exitirqhandler_with_any_error  A:089D
inbuf_irqptr                     E:639F
inbuf_readcounter                E:63A1
inbuf_readptr                    E:63A0
incuserstack_todelete            A:02BD
init_aciaserial                  A:0822
init_clocktimer                  A:0776
init_transmittimer               A:08BD
irq_handler_clocktimer           A:07AC
irq_handler_clocktimer_do_normal  A:07C6
irq_handler_clocktimer_do_ticks  A:07C9
irq_handler_transmittimer        A:08E1
irq_vector                       E:0062
irq_vector_0                     E:0062
irq_vector_1                     E:0063
kima_add                         A:0CC1
kima_add1                        A:0CDB
kima_add10                       A:0D74
kima_add110                      A:0D40
kima_add12                       A:0D39
kima_add120                      A:0D36
kima_add121                      A:0D3C
kima_add13                       A:0D7D
kima_add15                       A:0D91
kima_add17                       A:0D99
kima_add18                       A:0DA9
kima_add19                       A:0DAC
kima_add2                        A:0CE0
kima_add20                       A:0DAD
kima_add3                        A:0CE3
kima_add31                       A:0CEB
kima_add4                        A:0CF4
kima_add5                        A:0D06
kima_add6                        A:0D4B
kima_add7                        A:0D52
kima_add8                        A:0D55
kima_add81                       A:0D62
kima_add9                        A:0D65
kima_amb                         A:112C
kima_apb                         A:1118
kima_argxh                       E:0092
kima_argxl                       E:0091
kima_argyh                       E:0094
kima_argyl                       E:0093
kima_atanx                       A:1031
kima_az0                         A:1075
kima_aztst                       A:1152
kima_aztst0                      A:1155
kima_chop                        A:0FEF
kima_chop0                       A:0FF3
kima_clear                       A:1071
kima_clrx                        A:122A
kima_clrx0                       A:122E
kima_clry                        A:1235
kima_clry0                       A:1239
kima_clrz                        A:1240
kima_clrz0                       A:1244
kima_cnt                         E:008E
kima_cnta                        E:008F
kima_com1                        A:1143
kima_com2                        A:114F
kima_compxy                      A:113B
kima_dechex                      A:107C
kima_deg                         E:0090
kima_dhcnv1                      A:1080
kima_dhcnv2                      A:108C
kima_dhcnv3                      A:1097
kima_dhcnve                      A:10A6
kima_div                         A:0F2E
kima_div0                        A:0F32
kima_div1                        A:0F36
kima_div2                        A:0F3F
kima_div6                        A:0EE9
kima_div7                        A:0F00
kima_divext                      A:0E98
kima_divide                      A:0ECF
kima_dvext0                      A:0E9C
kima_dvext1                      A:0EA9
kima_dvext2                      A:0EAF
kima_dvext3                      A:0EB6
kima_ex                          E:6048
kima_extra                       E:009C
kima_ey                          E:605A
kima_ez                          E:606C
kima_inf0                        A:1190
kima_infin                       A:118B
kima_iprec                       A:13A1
kima_j                           E:008D
kima_kaddr                       A:13B3
kima_kon                         E:0099
kima_konh                        E:009A
kima_konl                        E:0099
kima_konst                       A:13C0
kima_len                         E:0011
kima_length                      E:008F
kima_lgnd0                       A:0FE9
kima_lkp0                        A:1257
kima_lkp1                        A:1271
kima_log                         A:0FA0
kima_logend                      A:0FE1
kima_lookup                      A:124B
kima_lsra                        A:104A
kima_lsra0                       A:104C
kima_md1                         A:0DF8
kima_md10                        A:0E7C
kima_md100                       A:0E16
kima_md11                        A:0E92
kima_md2                         A:0E29
kima_md22                        A:0ECC
kima_md3                         A:0E33
kima_md4                         A:0E36
kima_md5                         A:0E3F
kima_md51                        A:0E5E
kima_md59                        A:0E61
kima_md6                         A:0E67
kima_md61                        A:0E6C
kima_md7                         A:0E70
kima_md8                         A:0E74
kima_md9                         A:0EC1
kima_mdov1                       A:0E11
kima_mdov2                       A:0E19
kima_mlt                         A:0F0C
kima_mlt0                        A:0F12
kima_mlt1                        A:0F19
kima_mlt2                        A:0F23
kima_mltply                      A:0DC4
kima_mn                          E:0034
kima_movr                        A:121E
kima_movr0                       A:1220
kima_mult1                       A:0DD8
kima_mult2                       A:0DDC
kima_mult3                       A:0DE0
kima_mult4                       A:0DE9
kima_mvmn                        A:11E1
kima_mvmx                        A:11D5
kima_mvmy                        A:11D9
kima_mvmz                        A:11DD
kima_mvnm                        A:11F1
kima_mvnx                        A:11E5
kima_mvny                        A:11E9
kima_mvnz                        A:11ED
kima_mvtr                        A:11F3
kima_mvtr0                       A:11F6
kima_mvxm                        A:11AD
kima_mvxn                        A:11B1
kima_mvxy                        A:11A5
kima_mvxz                        A:11A9
kima_mvym                        A:11BD
kima_mvyn                        A:11C1
kima_mvyx                        A:11B5
kima_mvyz                        A:11B9
kima_mvzm                        A:11CD
kima_mvzn                        A:11D1
kima_mvzx                        A:11C5
kima_mvzy                        A:11C9
kima_mx                          E:0030
kima_my                          E:0031
kima_mz                          E:0032
kima_n                           E:008B
kima_nkon                        E:008C
kima_nm                          E:0043
kima_nx                          E:0040
kima_ny                          E:0041
kima_nz                          E:0042
kima_overr                       E:009F
kima_pgtarg                      A:129A
kima_pgtrg0                      A:12A3
kima_pgtrg1                      A:12BD
kima_ploadx                      A:12C3
kima_ploady                      A:12DC
kima_poly                        A:127A
kima_poly0                       A:1283
kima_prec                        E:009B
kima_pstres                      A:12F5
kima_ptr                         E:0097
kima_ptres                       A:12FF
kima_ptrl                        E:0097
kima_ra                          E:6002
kima_raerq                       A:10FC
kima_raerx                       A:10E2
kima_rama                        E:6094
kima_ramb                        E:6097
kima_ramcod                      E:6091
kima_ramrb                       A:1129
kima_raprb                       A:1115
kima_rarq                        A:10FE
kima_rarx0                       A:10E5
kima_rarxe                       A:10EE
kima_rb                          E:6014
kima_rbery                       A:10D5
kima_rbof                        A:10C7
kima_rbofe                       A:10D4
kima_rboff                       A:10C0
kima_rbry                        A:10D8
kima_rclxy                       A:13AE
kima_res                         E:0095
kima_resl                        E:0095
kima_rq                          E:6026
kima_rqerx                       A:10EF
kima_rqrx                        A:10F2
kima_rsbc                        A:10AD
kima_rsbcnt                      A:10A7
kima_rsra                        A:105F
kima_rsra0                       A:1062
kima_rx                          E:6037
kima_ry                          E:6049
kima_rz                          E:605B
kima_rzera                       A:1108
kima_rzra0                       A:110B
kima_rzrae                       A:1114
kima_savxy                       A:13A9
kima_setkon                      A:13B5
kima_sqrt                        A:0F57
kima_sqrt0                       A:0F6E
kima_sub                         A:0CB9
kima_sx                          E:6037
kima_sy                          E:6049
kima_sz                          E:605B
kima_tab                         A:1219
kima_tanx                        A:1015
kima_temp                        E:009D
kima_temp1                       E:009E
kima_tenx                        A:0FFA
kima_tmpx                        E:00A0
kima_tmpy                        E:00A1
kima_ugtar0                      A:131F
kima_ugtar1                      A:132E
kima_ugtarg                      A:1318
kima_uloadx                      A:1343
kima_uloady                      A:135B
kima_ustres                      A:1373
kima_ustrs0                      A:137A
kima_ustrs1                      A:1381
kima_ustrs2                      A:138A
kima_xm                          E:0003
kima_xn                          E:0004
kima_xsy                         A:1178
kima_xsy1                        A:117A
kima_xy                          E:0001
kima_xz                          E:0002
kima_xztst                       A:115F
kima_xztst0                      A:1161
kima_xztst1                      A:116B
kima_xztst2                      A:1169
kima_ym                          E:0013
kima_yn                          E:0014
kima_yx                          E:0010
kima_yz                          E:0012
kima_yztst                       A:116C
kima_yztst0                      A:116E
kima_zm                          E:0023
kima_zn                          E:0024
kima_zx                          E:0020
kima_zy                          E:0021
lcd_instruction                  A:0821
lcd_update_days_0                E:63A9
lcd_update_days_1                E:63AA
lcd_update_hours                 E:63A8
lcd_update_minutes               E:63A7
lcd_update_seconds               E:63A6
lcd_update_statecounter          E:63A4
lcd_update_ticks                 E:63A5
lcd_uptime_counter               A:07DD
lcdcontinueuptime0               A:081F
main                             A:1613
main_afmwjrtz                    A:1AD5
main_agdyczst                    A:18DA
main_cwtjzsjt                    A:1AEF
main_cydoompc                    A:1AE9
main_dosearch                    E:0006
main_exitlabel                   A:1A09
main_eytupknp                    A:192C
main_fyysbmht                    A:1A9B
main_if_03lnne                   A:1999
main_if_03lnne_diog              A:19AA
main_if_03wlzz                   A:17AE
main_if_03wlzz_jknz              A:1933
main_if_03wlzz_psvo              A:190F
main_if_04atlk                   A:188D
main_if_04atlk_acpu              A:190B
main_igbfuquo                    A:168E
main_kwpqvydk                    A:16A8
main_lvnreejf                    A:1AEB
main_mbklbqng                    A:1A54
main_mfgogtmo                    A:1AA3
main_nhalpzix                    A:1AE4
main_olrzkgyj                    A:1912
main_pattern                     E:0007
main_pzudqbvi                    A:1ADB
main_qlzpwgtk                    A:1933
main_search                      E:0004
main_search_1                    E:0005
main_serzzgzb                    A:1AA9
main_sflast                      E:0051
main_spaivnhi                    A:18FB
main_wdylvogf                    A:1ABB
main_whi_02_main_ecyc            A:167A
main_whi_02_main_htci            A:19F3
main_whi_02_main_lacz            A:1670
main_whi_02_main_rtpi            A:1713
main_while_fpeo                  A:161C
main_while_pxji                  A:16BF
main_wsziwigs                    A:18F4
main_xtbcajvd                    A:16AF
out_at_loop_frmptr               A:067D
out_at_loop_r0                   A:059D
out_at_loop_r1                   A:05B9
out_at_loop_r2                   A:05D5
out_at_loop_r3                   A:05F1
out_at_loop_r4                   A:060D
out_at_loop_r5                   A:0629
out_at_loop_r6                   A:0645
out_at_loop_r7                   A:0661
outbuf_exitwithrestoreregisters  A:03BF
outbuf_irqptr                    E:629C
outbuf_writecounter              E:629E
outbuf_writeptr                  E:629D
output_acia_init                 A:08CA
output_buffer_full_empty_loop    A:03BA
output_dont_enable_timer         A:03AF
output_store_write_ptr           A:03A4
pIRQstart                        A:FFFE
pNMIstart                        A:FFFA
pProgstart                       A:FFFC
popvarfromstack_2                A:1A1E
print_lcdchar                    A:0821
programstart                     A:0204
pushvaronstack_1                 A:1A4D
pushvaronstack_2                 A:1A12
setunireg7fromaccu               A:0301
setuserstack                     A:0407
start_transmittimer              A:08D6
subaccufrom_unireg7              A:02F1
subroutinetable                  A:1AF9
subu7fromuserstack               A:0328
t1calledsubdummy                 A:07DB
t1calledsubroutine               E:0064
t1calledsubroutine_0             E:0064
t1calledsubroutine_1             E:0065
t1interval_0                     E:6000
t1interval_1                     E:6001
wozABSWAP                        A:0BDC
wozABSWP1                        A:0BE5
wozADD                           A:0BCA
wozADD1                          A:0BCD
wozADDEND                        A:0C23
wozALGNSW                        A:0C27
wozCOMPL1                        A:0C5C
wozCONT                          A:09FC
wozCONTIN                        A:0B1A
wozDIV1                          A:0C6F
wozDIV2                          A:0C72
wozDIV3                          A:0C7C
wozDIV4                          A:0C81
wozDLOAD                         A:0B57
wozENTD                          A:0B1F
wozERROR                         A:09FB
wozEXP                           A:0ADE
wozFADD                          A:0C1A
wozFCOMPL                        A:0C59
wozFDIV                          A:0C67
wozFIX                           A:0CB2
wozFLOAT                         A:0BF6
wozFMUL                          A:0C41
wozFSA                           A:0AED
wozFSUB                          A:0C14
wozL10                           A:0AB6
wozLA2                           A:0B39
wozLB2                           A:0B4A
wozLD12                          A:0BA3
wozLDD                           A:0B7B
wozLDEXP                         A:0A99
wozLF3                           A:0B97
wozLFA                           A:0B8B
wozLOG                           A:09F5
wozLOG10                         A:0AB1
wozLTMP                          A:0B6F
wozM2A1                          A:0A73
wozM2MB                          A:0A66
wozM2MHL                         A:0A8C
wozMD1                           A:0BD7
wozMD2                           A:0C97
wozMD3                           A:0CA5
wozMDEND                         A:0C55
wozMIC                           A:0A59
wozMIT                           A:0A48
wozMLE2                          A:0AA5
wozMUL1                          A:0C4A
wozMUL2                          A:0C52
wozNORM                          A:0C08
wozNORM1                         A:0C00
wozNORMX                         A:0C57
wozOVCHK                         A:0CAC
wozOVFL                          A:0CAE
wozOVFLW                         A:0B19
wozROR1                          A:0C32
wozROR2                          A:0C37
wozRTAR                          A:0C29
wozRTLOG                         A:0C2C
wozRTLOG1                        A:0C30
wozRTRN                          A:0CB8
wozRTS1                          A:0C13
wozSAVET                         A:0A27
wozSEXP1                         A:0A12
wozSWAP                          A:0BE6
wozSWAP1                         A:0BE8
wozSWPALG                        A:0C17
wozTM2                           A:0A3C
wozZERO                          A:0B13
wozZSAV                          A:0B2B
woz_backspace                    A:0926
woz_blskip                       A:0946
woz_dig                          A:0979
woz_escape                       A:091A
woz_getline                      A:091F
woz_hexshift                     A:097F
woz_isupper                      A:0932
woz_jsr                          A:09A2
woz_mod8chk                      A:09E3
woz_nextchar                     A:0929
woz_nexthex                      A:096A
woz_nextitem                     A:0947
woz_notcr                        A:0911
woz_nothex                       A:098A
woz_notstor                      A:09A6
woz_nxtprnt                      A:09B3
woz_prbyte                       A:09E9
woz_prdata                       A:09C7
woz_printchar                    A:09ED
woz_rts                          A:09A5
woz_run                          A:099F
woz_setadr                       A:09AA
woz_setmode                      A:0944
woz_setstor                      A:0943
woz_tonextitem                   A:099C
woz_xamnext                      A:09D1
wozfixloop1                      A:0CAF
wozmon                           A:090C
wozmonentrypoint                 A:090C

Symbols by value:
0000 getintataddress_q
0000 getintataddress_q_0
0000 _unireg0_0
0000 _unireg0
0001 _unireg0_1
0001 kima_xy
0001 getintataddress_q_1
0002 _unireg0_2
0002 getintataddress_p
0002 kima_xz
0003 _unireg0_3
0003 kima_xm
0004 kima_xn
0004 getintataddress_ad
0004 main_search
0004 _uniregA_0
0005 _uniregA_1
0005 main_search_1
0006 getintataddress_x
0006 _uniregA_2
0006 main_dosearch
0007 main_pattern
0007 _uniregA_3
0008 _unireg1
0008 _unireg1_0
0009 _unireg1_1
000A _unireg1_2
000B _unireg1_3
0010 _unireg2_0
0010 _unireg2
0010 kima_yx
0011 _unireg2_1
0011 kima_len
0012 kima_yz
0012 _unireg2_2
0013 _unireg2_3
0013 kima_ym
0014 kima_yn
0018 _unireg3_0
0018 _unireg3
0019 _unireg3_1
001A _unireg3_2
001B _unireg3_3
0020 _unireg4_0
0020 _unireg4
0020 kima_zx
0021 kima_zy
0021 _unireg4_1
0022 _unireg4_2
0023 _unireg4_3
0023 kima_zm
0024 kima_zn
0028 _unireg5_0
0028 _unireg5
0029 _unireg5_1
002A _unireg5_2
002B _unireg5_3
0030 _unireg6
0030 _unireg6_0
0030 kima_mx
0031 kima_my
0031 _unireg6_1
0032 _unireg6_2
0032 kima_mz
0033 _unireg6_3
0034 kima_mn
0038 _unireg7_0
0038 _unireg7
0039 _unireg7_1
003A _unireg7_2
003B _unireg7_3
003C _uniregH_0
003D _uniregH_1
003E _uniregH_2
003E getintataddress_sflast
003F _uniregH_3
0040 _userstack
0040 kima_nx
0040 _userstack_0
0041 _userstack_1
0041 kima_ny
0042 kima_nz
0043 kima_nm
0044 _framepointer
0044 _framepointer_0
0045 _framepointer_1
0046 _scratchregister_0
0046 _scratchregister
0047 _scratchregister_1
0048 _scratchregister_2
0049 _scratchregister_3
004A _scratchregister_4
004B _scratchregister_5
004C _scratchregister_6
004D _scratchregister_7
004E _scratchregister_8
004F _scratchregister_9
0050 _scratchregister_10
0051 _scratchregister_11
0051 main_sflast
0052 _scratchregister_12
0053 _scratchregister_13
0054 _scratchregister_14
0055 _scratchregister_15
0056 _zpscratch
0056 XAML
0056 _zpscratch_0
0057 _zpscratch_1
0057 XAMH
0058 _zpscratch_2
0058 STL
0059 _zpscratch_3
0059 STH
005A _zpscratch_4
005A L
005B _zpscratch_5
005B H
005C _zpscratch_6
005C YSAV
005D _zpscratch_7
005D MODE
005E global_tickscounter_0
005F global_tickscounter_1
0060 global_tickscounter_2
0061 global_tickscounter_3
0062 irq_vector
0062 irq_vector_0
0063 irq_vector_1
0064 t1calledsubroutine
0064 t1calledsubroutine_0
0065 t1calledsubroutine_1
0071 SIGN
0072 X2
0073 M2
0073 M2_0
0074 M2_1
0075 M2_2
0076 X1
0077 M1
0077 M1_0
0078 M1_1
0079 M1_2
007A E
007E Z
0082 T
0086 SEXP
0088 BS
008A INT
008B kima_n
008C kima_nkon
008D kima_j
008D CR
008E kima_cnt
008F kima_length
008F kima_cnta
0090 kima_deg
0091 kima_argxl
0092 kima_argxh
0093 kima_argyl
0094 kima_argyh
0095 kima_res
0095 kima_resl
0097 kima_ptr
0097 kima_ptrl
0099 kima_konl
0099 kima_kon
009A kima_konh
009B kima_prec
009B ESC
009C kima_extra
009D kima_temp
009E kima_temp1
009F kima_overr
00A0 kima_tmpx
00A1 kima_tmpy
00AE DOT
00BA COLON
00CA CALLLETTER
00CB RTSLETTER
00D2 RUNLETTER
0204 programstart
0208 _init_6502_stack_memory
0259 _dowozmanentrypoint
025E _MESS_TERMINATED_LOOP
026A _program_terminated
026D __INPUT_WAIT_LOOP
0273 _MESS_TERMINATED
0286 _START_MESSAGE
0295 IRQstart
0298 IRQhandler
02A8 _lcd_start_message
02AA _lcd_start_message_loop
02B5 _lcd_start_message_rts
02B6 NMIstart
02BD incuserstack_todelete
02CB addaccuto_unireg6
02D7 addaccuto_unireg7
02E3 decuserstack_todelete
02F1 subaccufrom_unireg7
0301 setunireg7fromaccu
0318 addu7touserstack
0328 subu7fromuserstack
0338 addu6tou7
0348 _OUTPUTCRLF
0355 _INPUTCHAR
035D _INPUTCHAR_EXIT
035E _INPUT_AVAIL
0364 _INPUT_CHARS_IN_BUFFER
0365 _INPUT_WAIT
0367 _INPUT_WAIT_FOR_CHARS
0393 _INPUT_WAIT_EXIT_NOERR
0397 _INPUT_GOSLEEP
039A _OUTPUTCHAR
03A4 output_store_write_ptr
03AF output_dont_enable_timer
03BA output_buffer_full_empty_loop
03BF outbuf_exitwithrestoreregisters
03C2 _OUTPUT_GOSLEEP
03C5 _OUT_ACCU
03E6 _OUT_ACCU_LCD
0407 setuserstack
0419 _clear_userstack_memory_loop
0423 _increment_hi_byte_for_clear_userstack_loop
0430 _OUTHEX
0438 _GETADDRESSOFLOCALVAR
0448 _BIN2BCD
044C bin2bcdclearloop
0455 bin2bcdconvloop
0479 _OUT_SCRATCHREGISTER
04CF _OUT_FRAMEPOINTER
04DA _OUT_USERSTACK
04E8 _OUT_UNIREG0
04F2 _OUT_UNIREG0_2
04FD _OUT_UNIREG1
0507 _OUT_UNIREG1_2
0512 _OUT_UNIREG2
051C _OUT_UNIREG2_2
0527 _OUT_UNIREG3
0531 _OUT_UNIREG3_2
053C _OUT_UNIREG4
0546 _OUT_UNIREG4_2
0551 _OUT_UNIREG5
055B _OUT_UNIREG5_2
0566 _OUT_UNIREG6
0570 _OUT_UNIREG6_2
057B _OUT_UNIREG7
0585 _OUT_UNIREG7_2
0590 _OUTAT_UNIREG0
059D out_at_loop_r0
05AC _OUTAT_UNIREG1
05B9 out_at_loop_r1
05C8 _OUTAT_UNIREG2
05D5 out_at_loop_r2
05E4 _OUTAT_UNIREG3
05F1 out_at_loop_r3
0600 _OUTAT_UNIREG4
060D out_at_loop_r4
061C _OUTAT_UNIREG5
0629 out_at_loop_r5
0638 _OUTAT_UNIREG6
0645 out_at_loop_r6
0654 _OUTAT_UNIREG7
0661 out_at_loop_r7
0670 _OUTAT_FRAMEPOINTER
067D out_at_loop_frmptr
068C _OUT_M1
06A9 _OUT_M2
06C6 _UNIREG0_DECIMAL
06CB _conv2decimal64
06CF _push_clear_scratchreg
06D7 _conv2dec_divloop64_long
0701 _conv_subresult
0715 _conv_posresult
071E _ignore_calculation64
074E _conv2dec_divloop64
0751 _conv2dec_exit
0752 _push_char
0755 _push_char_loop
0767 _prt_global_memarea
0769 _prt_global_mem_loop
0775 _prt_global_return
0776 init_clocktimer
07AB end_irq_handler_clocktimer
07AC irq_handler_clocktimer
07C6 irq_handler_clocktimer_do_normal
07C9 irq_handler_clocktimer_do_ticks
07D7 end_irq_handler_clocktimer_pla
07DB t1calledsubdummy
07DD lcd_uptime_counter
081F lcdcontinueuptime0
0821 lcd_instruction
0821 print_lcdchar
0822 init_aciaserial
083D aciairqhandler
0849 aciairqwaitforchar
0864 acia_process_irq_char
087C inbuf_escape_char_checked
0885 inbuf_exitaciairqhandlernopla
0886 inbuf_exitaciairqhandler_with_parity
088A inbuf_exitaciairqhandler_with_overrun
088E inbuf_exitaciairqhandler_with_frameing
0892 inbuf_exitaciairqhandler_with_dcd_ready
0897 inbuf_exitaciairqhandler_with_dsr_ready
089B inbuf_exitaciairqhandler_with_error
089D inbuf_exitirqhandler_with_any_error
08BD init_transmittimer
08CA output_acia_init
08D6 start_transmittimer
08E1 irq_handler_transmittimer
090B end_irq_handler_transmittimer
090C wozmonentrypoint
090C wozmon
0911 woz_notcr
091A woz_escape
091F woz_getline
0926 woz_backspace
0929 woz_nextchar
0932 woz_isupper
0943 woz_setstor
0944 woz_setmode
0946 woz_blskip
0947 woz_nextitem
096A woz_nexthex
0979 woz_dig
097F woz_hexshift
098A woz_nothex
099C woz_tonextitem
099F woz_run
09A2 woz_jsr
09A5 woz_rts
09A6 woz_notstor
09AA woz_setadr
09B3 woz_nxtprnt
09C7 woz_prdata
09D1 woz_xamnext
09E3 woz_mod8chk
09E9 woz_prbyte
09ED woz_printchar
09F5 wozLOG
09FB wozERROR
09FC wozCONT
0A12 wozSEXP1
0A27 wozSAVET
0A3C wozTM2
0A48 wozMIT
0A59 wozMIC
0A66 wozM2MB
0A73 wozM2A1
0A80 M2T
0A8C wozM2MHL
0A99 wozLDEXP
0AA5 wozMLE2
0AB1 wozLOG10
0AB6 wozL10
0AC2 LN10
0AC6 R22
0ACA LE2
0ACE A1
0AD2 MB
0AD6 C
0ADA MHLF
0ADE wozEXP
0AED wozFSA
0B13 wozZERO
0B19 wozOVFLW
0B1A wozCONTIN
0B1F wozENTD
0B2B wozZSAV
0B39 wozLA2
0B4A wozLB2
0B57 wozDLOAD
0B6F wozLTMP
0B7B wozLDD
0B8B wozLFA
0B97 wozLF3
0BA3 wozLD12
0BB6 L2E
0BBA A2
0BBE B2
0BC2 C2
0BC6 D
0BCA wozADD
0BCD wozADD1
0BD7 wozMD1
0BDC wozABSWAP
0BE5 wozABSWP1
0BE6 wozSWAP
0BE8 wozSWAP1
0BF6 wozFLOAT
0C00 wozNORM1
0C08 wozNORM
0C13 wozRTS1
0C14 wozFSUB
0C17 wozSWPALG
0C1A wozFADD
0C23 wozADDEND
0C27 wozALGNSW
0C29 wozRTAR
0C2C wozRTLOG
0C30 wozRTLOG1
0C32 wozROR1
0C37 wozROR2
0C41 wozFMUL
0C4A wozMUL1
0C52 wozMUL2
0C55 wozMDEND
0C57 wozNORMX
0C59 wozFCOMPL
0C5C wozCOMPL1
0C67 wozFDIV
0C6F wozDIV1
0C72 wozDIV2
0C7C wozDIV3
0C81 wozDIV4
0C97 wozMD2
0CA5 wozMD3
0CAC wozOVCHK
0CAE wozOVFL
0CAF wozfixloop1
0CB2 wozFIX
0CB8 wozRTRN
0CB9 kima_sub
0CC1 kima_add
0CDB kima_add1
0CE0 kima_add2
0CE3 kima_add3
0CEB kima_add31
0CF4 kima_add4
0D06 kima_add5
0D36 kima_add120
0D39 kima_add12
0D3C kima_add121
0D40 kima_add110
0D4B kima_add6
0D52 kima_add7
0D55 kima_add8
0D62 kima_add81
0D65 kima_add9
0D74 kima_add10
0D7D kima_add13
0D91 kima_add15
0D99 kima_add17
0DA9 kima_add18
0DAC kima_add19
0DAD kima_add20
0DC4 kima_mltply
0DD8 kima_mult1
0DDC kima_mult2
0DE0 kima_mult3
0DE9 kima_mult4
0DF8 kima_md1
0E11 kima_mdov1
0E16 kima_md100
0E19 kima_mdov2
0E29 kima_md2
0E33 kima_md3
0E36 kima_md4
0E3F kima_md5
0E5E kima_md51
0E61 kima_md59
0E67 kima_md6
0E6C kima_md61
0E70 kima_md7
0E74 kima_md8
0E7C kima_md10
0E92 kima_md11
0E98 kima_divext
0E9C kima_dvext0
0EA9 kima_dvext1
0EAF kima_dvext2
0EB6 kima_dvext3
0EC1 kima_md9
0ECC kima_md22
0ECF kima_divide
0EE9 kima_div6
0F00 kima_div7
0F0C kima_mlt
0F12 kima_mlt0
0F19 kima_mlt1
0F23 kima_mlt2
0F2E kima_div
0F32 kima_div0
0F36 kima_div1
0F3F kima_div2
0F57 kima_sqrt
0F6E kima_sqrt0
0FA0 kima_log
0FE1 kima_logend
0FE9 kima_lgnd0
0FEF kima_chop
0FF3 kima_chop0
0FFA kima_tenx
1015 kima_tanx
1031 kima_atanx
104A kima_lsra
104C kima_lsra0
105F kima_rsra
1062 kima_rsra0
1071 kima_clear
1075 kima_az0
107C kima_dechex
1080 kima_dhcnv1
108C kima_dhcnv2
1097 kima_dhcnv3
10A6 kima_dhcnve
10A7 kima_rsbcnt
10AD kima_rsbc
10C0 kima_rboff
10C7 kima_rbof
10D4 kima_rbofe
10D5 kima_rbery
10D8 kima_rbry
10E2 kima_raerx
10E5 kima_rarx0
10EE kima_rarxe
10EF kima_rqerx
10F2 kima_rqrx
10FC kima_raerq
10FE kima_rarq
1108 kima_rzera
110B kima_rzra0
1114 kima_rzrae
1115 kima_raprb
1118 kima_apb
1129 kima_ramrb
112C kima_amb
113B kima_compxy
1143 kima_com1
114F kima_com2
1152 kima_aztst
1155 kima_aztst0
115F kima_xztst
1161 kima_xztst0
1169 kima_xztst2
116B kima_xztst1
116C kima_yztst
116E kima_yztst0
1178 kima_xsy
117A kima_xsy1
118B kima_infin
1190 kima_inf0
11A5 kima_mvxy
11A9 kima_mvxz
11AD kima_mvxm
11B1 kima_mvxn
11B5 kima_mvyx
11B9 kima_mvyz
11BD kima_mvym
11C1 kima_mvyn
11C5 kima_mvzx
11C9 kima_mvzy
11CD kima_mvzm
11D1 kima_mvzn
11D5 kima_mvmx
11D9 kima_mvmy
11DD kima_mvmz
11E1 kima_mvmn
11E5 kima_mvnx
11E9 kima_mvny
11ED kima_mvnz
11F1 kima_mvnm
11F3 kima_mvtr
11F6 kima_mvtr0
1219 kima_tab
121E kima_movr
1220 kima_movr0
122A kima_clrx
122E kima_clrx0
1235 kima_clry
1239 kima_clry0
1240 kima_clrz
1244 kima_clrz0
124B kima_lookup
1257 kima_lkp0
1271 kima_lkp1
127A kima_poly
1283 kima_poly0
129A kima_pgtarg
12A3 kima_pgtrg0
12BD kima_pgtrg1
12C3 kima_ploadx
12DC kima_ploady
12F5 kima_pstres
12FF kima_ptres
1318 kima_ugtarg
131F kima_ugtar0
132E kima_ugtar1
1343 kima_uloadx
135B kima_uloady
1373 kima_ustres
137A kima_ustrs0
1381 kima_ustrs1
138A kima_ustrs2
13A1 kima_iprec
13A9 kima_savxy
13AE kima_rclxy
13B3 kima_kaddr
13B5 kima_setkon
13C0 kima_konst
14A8 getintataddress
160A getintataddress_exitlabel
1613 main
161C main_while_fpeo
1670 main_whi_02_main_lacz
167A main_whi_02_main_ecyc
168E main_igbfuquo
16A8 main_kwpqvydk
16AF main_xtbcajvd
16BF main_while_pxji
1713 main_whi_02_main_rtpi
17AE main_if_03wlzz
188D main_if_04atlk
18DA main_agdyczst
18F4 main_wsziwigs
18FB main_spaivnhi
190B main_if_04atlk_acpu
190F main_if_03wlzz_psvo
1912 main_olrzkgyj
192C main_eytupknp
1933 main_qlzpwgtk
1933 main_if_03wlzz_jknz
1999 main_if_03lnne
19AA main_if_03lnne_diog
19F3 main_whi_02_main_htci
1A09 main_exitlabel
1A12 pushvaronstack_2
1A1E popvarfromstack_2
1A2A addonstack_2
1A4D pushvaronstack_1
1A54 main_mbklbqng
1A71 equalonstack_2
1A9B main_fyysbmht
1AA3 main_mfgogtmo
1AA9 main_serzzgzb
1ABB main_wdylvogf
1ABD greateronstack_2
1AD5 main_afmwjrtz
1ADB main_pzudqbvi
1AE4 main_nhalpzix
1AE9 main_cydoompc
1AEB main_lvnreejf
1AEF main_cwtjzsjt
1AF9 subroutinetable
1B14 LASTBYTEINPROG
6000 t1interval_0
6001 t1interval_1
6002 kima_ra
6014 kima_rb
6026 kima_rq
6037 kima_rx
6037 kima_sx
6048 kima_ex
6049 kima_sy
6049 kima_ry
605A kima_ey
605B kima_sz
605B kima_rz
606C kima_ez
6091 kima_ramcod
6094 kima_rama
6097 kima_ramb
609C global_memarea
619C global_outbufacia
629C outbuf_irqptr
629D outbuf_writeptr
629E outbuf_writecounter
629F global_inbufacia
639F inbuf_irqptr
63A0 inbuf_readptr
63A1 inbuf_readcounter
63A2 global_errno_0
63A3 global_errno_1
63A4 lcd_update_statecounter
63A5 lcd_update_ticks
63A6 lcd_update_seconds
63A7 lcd_update_minutes
63A8 lcd_update_hours
63A9 lcd_update_days_0
63AA lcd_update_days_1
7804 VIAT1CL
7805 VIAT1CH
7808 VIAT2CL
7809 VIAT2CH
780B VIAACR
780D VIAIFR
780E VIAIER
7810 ACIADATA
7811 ACIASTATUS
7812 ACIACOMMAND
7813 ACIACONTROL
FFFA pNMIstart
FFFC pProgstart
FFFE pIRQstart
